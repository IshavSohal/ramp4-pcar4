import{J as p,s as m,T as s}from"./main-DvIsqh7u.js";import{p as n}from"./MeshVertexAttributes-C59J_unp.js";import{B as a}from"./vertexSpaceConversion-Cj3LSlVt.js";import"./preload-helper-ExcqyqRp.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-1o9GOaZb.js";import"./computeTranslationToOriginAndRotation-BrFtLJUZ.js";import"./projectPointToVector-C17PBwjS.js";import"./meshVertexSpaceUtils-D2ThfPuu.js";import"./MeshLocalVertexSpace-69YsHQxN.js";import"./vec3-CfrdavQP.js";import"./BufferView-C8X1vu7u.js";import"./vec4-Lf_prB-q.js";async function M(t,r,o){await Promise.resolve(),p(o);const e=a(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),r);return i.transform=null,i}export{M as convertMeshVertexSpace};
