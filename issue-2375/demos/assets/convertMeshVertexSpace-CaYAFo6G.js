import{dq as p,s,P as i}from"./main-DFK8jSbu.js";import{l as n}from"./MeshVertexAttributes-Cwd8DGa7.js";import{M as c}from"./vertexSpaceConversion-jg6Wm_0v.js";import"./preload-helper-ExcqyqRp.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-DRDp9obx.js";import"./computeTranslationToOriginAndRotation-DJAc2PK0.js";import"./meshVertexSpaceUtils-DDiFCYF9.js";import"./MeshLocalVertexSpace-pEBTS0z9.js";import"./vec3-C7Bs7UPg.js";import"./projection-GzeXKBbO.js";import"./DoubleArray-4aYsOW9A.js";import"./BufferView-CEl8sR5b.js";import"./vec4-vJ-WKNIY.js";async function S(t,r,m){await Promise.resolve(),p(m);const o=c(t,r);if(!o)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const e=t.cloneAndModifyVertexAttributes(new n({...o,uv:i(t.vertexAttributes.uv),color:i(t.vertexAttributes.color)}),r);return e.transform=null,e}export{S as convertMeshVertexSpace};
