import{hC as f,fh as c,D as _}from"./main-C02UbYD7.js";import{V as u}from"./enums-DDkmfb-t.js";import{E as d}from"./Texture-BNs5xfWp.js";import{r as x}from"./Program-kooLQgoA.js";let g=class{constructor(e){this._readFile=e}resolveIncludes(e){return this._resolve(e)}_resolve(e,t=new Map){if(t.has(e))return t.get(e);const i=this._read(e);if(!i)throw new Error(`cannot find shader file ${e}`);const r=/^[^\S\n]*#include\s+<(\S+)>[^\S\n]?/gm;let s=r.exec(i);const o=[];for(;s!=null;)o.push({path:s[1],start:s.index,length:s[0].length}),s=r.exec(i);let n=0,h="";return o.forEach(a=>{h+=i.slice(n,a.start),h+=t.has(a.path)?"":this._resolve(a.path,t),n=a.start+a.length}),h+=i.slice(n),t.set(e,h),h}_read(e){return this._readFile(e)}};const l=()=>_.getLogger("esri.views.webgl.VertexArrayObject");let b=class{constructor(e,t,i,r,s=null){this._context=e,this._locations=t,this._layout=i,this._buffers=r,this._indexBuffer=s,this._glName=null,this._initialized=!1}get glName(){return this._glName}get context(){return this._context}get vertexBuffers(){return this._buffers}get indexBuffer(){return this._indexBuffer}get byteSize(){return Object.keys(this._buffers).reduce((e,t)=>e+this._buffers[t].usedMemory,this._indexBuffer!=null?this._indexBuffer.usedMemory:0)}get layout(){return this._layout}get locations(){return this._locations}get usedMemory(){return this.byteSize+(Object.keys(this._buffers).length+(this._indexBuffer?1:0))*f}dispose(){if(this._context){this._context.getBoundVAO()===this&&this._context.bindVAO(null);for(const e in this._buffers)this._buffers[e]?.dispose(),delete this._buffers[e];this._indexBuffer=c(this._indexBuffer),this.disposeVAOOnly()}else(this._glName||Object.getOwnPropertyNames(this._buffers).length>0)&&l().warn("Leaked WebGL VAO")}disposeVAOOnly(){this._glName&&(this._context.gl.deleteVertexArray(this._glName),this._glName=null,this._context.instanceCounter.decrement(u.VertexArrayObject,this)),this._context=null}initialize(){if(this._initialized)return;const{gl:e}=this._context,t=e.createVertexArray();e.bindVertexArray(t),this._bindLayout(),e.bindVertexArray(null),this._glName=t,this._context.instanceCounter.increment(u.VertexArrayObject,this),this._initialized=!0}bind(){this.initialize(),this._context.gl.bindVertexArray(this.glName)}_bindLayout(){const{_buffers:e,_layout:t,_indexBuffer:i}=this;e||l().error("Vertex buffer dictionary is empty!");const r=this._context.gl;for(const s in e){const o=e[s];o||l().error("Vertex buffer is uninitialized!");const n=t[s];n||l().error("Vertex element descriptor is empty!"),d(this._context,this._locations,o,n)}i!=null&&r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,i.glName)}unbind(){this.initialize(),this._context.gl.bindVertexArray(null)}};function m(e,t,i=""){return new x(e,i+t.shaders.vertexShader,i+t.shaders.fragmentShader,t.attributes)}export{g as a,m as e,b as o};
