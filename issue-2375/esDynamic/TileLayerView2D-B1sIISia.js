import{E as w,F as y,G as I,H as V,J as H,K as v,M as n,N as g,D as T,O as o,P as m,Q as q}from"./main-C02UbYD7.js";import"./GeometryUtils-C38J0GTP.js";import"./UpdateTracking2D-Dbow3jYu.js";import"./enums-BsbtGCGp.js";import"./definitions-Doe0g1C2.js";import"./floatRGBA-BLC568ta.js";import"./Container-opHDNgle.js";import"./WGLContainer-DpYvmPLF.js";import"./Texture-BNs5xfWp.js";import"./enums-DDkmfb-t.js";import"./Program-kooLQgoA.js";import"./LabelMetric-BYq7UFJE.js";import"./StyleDefinition-Dfu7Kx8O.js";import"./enums-qHpGJ28Q.js";import"./MagnifierPrograms-gHYFEO3-.js";import"./FeatureCommandQueue-CZzTPMLL.js";import"./PieChartMeshWriter-DHDfWlls.js";import"./renderState-DjM_esgh.js";import"./interfaces-Aq8q9x0N.js";import"./testSVGPremultipliedAlpha-DFSsxJlf.js";import{V as U}from"./GraphicsView2D-RmB8rv3h.js";import"./earcut-BxtRhkib.js";import"./vec3f32-BS0cezmI.js";import{r as C,o as f,n as d}from"./imageUtils-CzvPHRFj.js";import{f as Q,y as b}from"./LayerView-Cq7I41Ey.js";import{h as S}from"./HighlightGraphicContainer-DjBMutCq.js";import{i as P}from"./RefreshableLayerView-Dh4pADB1.js";import{U as F,_ as L,r as G}from"./drapedUtils-BcOQwA1G.js";const k=[0,0];let r=class extends P(C(Q(b))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(e){this._fetchQueue.pause(),this._fetchQueue.state=e.state,this._tileStrategy.update(e),this._fetchQueue.resume(),this._highlightView?.processUpdate(e)}attach(){const e="tileServers"in this.layer?this.layer.tileServers:null,t=this.tilemapCache;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent,t?.effectiveMinLOD,t?.effectiveMaxLOD),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:e&&10*e.length||10,process:(i,s)=>this.fetchTile(i,s)}),this._tileStrategy=new V({cachePolicy:"keep",resampling:this.resampling,acquireTile:i=>this.acquireTile(i),releaseTile:i=>this.releaseTile(i),tileInfoView:this._tileInfoView}),F(this,this.layer)){const i=this._highlightView=new U({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new S(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new L({createFetchPopupFeaturesQueryGeometry:(s,h)=>G(s,h,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(s,h)=>{i.graphicUpdateHandler({graphic:s,property:h})},layerView:this,updatingHandles:this._updatingHandles})}this.requestUpdate(),this.addAttachHandles(this._updatingHandles.add(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),this._popupHighlightHelper?.destroy(),this._highlightView?.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeaturesAtLocation(e,t){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeaturesAtLocation(e,t):[]}highlight(e){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(e):H()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(e){return v(this.layer.tileInfo?.spatialReference,e)}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(e=>this._updatingHandles.addPromise(this._enqueueTileFetch(e)))}}acquireTile(e){const t=this._bitmapView.createTile(e),i=t.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(k,t.key),i.resolution=this._tileInfoView.getTileResolution(t.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(t)),this._bitmapView.addChild(t),this.requestUpdate(),t}releaseTile(e){this._fetchQueue.abort(e.key.id),this._bitmapView.removeChild(e),e.once("detach",()=>e.destroy()),this.requestUpdate()}async fetchTile(e,t={}){const i=this.tilemapCache,{signal:s,resamplingLevel:h=0}=t;if(!i)try{return await this._fetchImage(e,s)}catch(a){if(!n(a)&&!this.resampling)return f(this._tileInfoView.tileInfo.size);if(h<3){const c=this._tileInfoView.getTileParentId(e.id);if(c){const u=new g(c),_=await this.fetchTile(u,{...t,resamplingLevel:h+1});return d(this._tileInfoView,_,u,e)}}throw a}const l=new g(0,0,0,0);let p;try{if(await i.fetchAvailabilityUpsample(e.level,e.row,e.col,l,{signal:s}),l.level!==e.level&&!this.resampling)return f(this._tileInfoView.tileInfo.size);p=await this._fetchImage(l,s)}catch(a){if(n(a))throw a;p=await this._fetchImage(e,s)}return this.resampling?d(this._tileInfoView,p,l,e):p}async _enqueueTileFetch(e){if(!this._fetchQueue.has(e.key.id)){try{const t=await this._fetchQueue.push(e.key);e.bitmap.source=t,e.bitmap.width=this._tileInfoView.tileInfo.size[0],e.bitmap.height=this._tileInfoView.tileInfo.size[1],e.once("attach",()=>this.requestUpdate())}catch(t){n(t)||T.getLogger(this).error(t)}this.requestUpdate()}}async _fetchImage(e,t){return this.layer.fetchImageBitmapTile(e.level,e.row,e.col,{signal:t})}};o([m()],r.prototype,"resampling",null),o([m()],r.prototype,"tilemapCache",null),r=o([q("esri.views.2d.layers.TileLayerView2D")],r);const x=r;export{x as default};
