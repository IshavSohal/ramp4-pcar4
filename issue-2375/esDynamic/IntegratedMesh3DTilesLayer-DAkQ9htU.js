import{dY as V,dK as X,dL as z,dM as U,dN as j,dZ as P,d_ as W,bv as g,b8 as A,d$ as _,aJ as u,di as k,dl as p,e0 as L,dh as M,c9 as E,cp as I,e1 as S,e2 as R,e3 as h,s as F,a1 as T,a2 as G,D,O as m,P as f,e4 as K,dR as $,Q as q,dX as O,aI as v}from"./main-C02UbYD7.js";import{$ as N,Z as J,w as Z}from"./elevationInfoUtils-CUnUEx64.js";let d=class extends V(X(z(U(j(P(W(O))))))){constructor(a){super(a),this.operationalLayerType="IntegratedMesh3DTilesLayer",this.spatialReference=new g({wkid:4326,vcsWkid:115700}),this.fullExtent=new A(-180,-90,180,90,this.spatialReference),this.url=null,this.type="integrated-mesh-3dtiles",this.path=null,this.minScale=0,this.maxScale=0}set elevationInfo(a){this._set("elevationInfo",a),this._validateElevationInfo()}_verifyArray(a,s){if(!Array.isArray(a)||a.length<s)return!1;for(const o of a)if(typeof o!="number")return!1;return!0}_initFullExtent(a){const s=a.root?.boundingVolume;if(!s)return;if(s.box){const t=s?.box;if(t[3]>7972671&&t[7]>7972671&&t[11]>7945940)return}const o=a.root?.transform,b=v();if(s.region&&this._verifyArray(s.region,6)){const t=s.region,l=_(t[0]),n=_(t[1]),i=t[4],r=_(t[2]),e=_(t[3]),y=t[5];this.fullExtent=new A({xmin:l,ymin:n,zmin:i,xmax:r,ymax:e,zmax:y,spatialReference:this.spatialReference})}else if(s.sphere&&this._verifyArray(s.sphere,4)){const t=s.sphere,l=u(t[0],t[1],t[2]),n=t[3]/Math.sqrt(3),i=v();k(i,l,u(n,n,n));const r=v();if(p(r,l,u(n,n,n)),o&&this._verifyArray(o,16)){const x=o;L(b,i,x),M(i,b),L(b,r,x),M(r,b)}E(i,I,0,i,g.WGS84,0,1),E(r,I,0,r,g.WGS84,0,1);const e=v(),y=v();S(e,i,r),R(y,i,r),this.fullExtent=new A({xmin:e[0],ymin:e[1],zmin:e[2],xmax:y[0],ymax:y[1],zmax:y[2],spatialReference:this.spatialReference})}else if(s.box&&this._verifyArray(s.box,12)){const t=s.box,l=u(t[0],t[1],t[2]),n=u(t[3],t[4],t[5]),i=u(t[6],t[7],t[8]),r=u(t[9],t[10],t[11]),e=[];for(let c=0;c<8;++c)e.push(v());if(p(e[0],l,n),p(e[0],e[0],i),p(e[0],e[0],r),h(e[1],l,n),p(e[1],e[1],i),p(e[1],e[1],r),p(e[2],l,n),h(e[2],e[2],i),p(e[2],e[2],r),h(e[3],l,n),h(e[3],e[3],i),p(e[3],e[3],r),p(e[4],l,n),p(e[4],e[4],i),h(e[4],e[4],r),h(e[5],l,n),p(e[5],e[5],i),h(e[5],e[5],r),p(e[6],l,n),h(e[6],e[6],i),h(e[6],e[6],r),h(e[7],l,n),h(e[7],e[7],i),h(e[7],e[7],r),o&&this._verifyArray(o,16)){const c=o;for(let w=0;w<8;++w)L(e[w],e[w],c)}const y=u(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE),x=u(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE);for(let c=0;c<8;++c)E(e[c],I,0,e[c],g.WGS84,0,1),S(x,x,e[c]),R(y,y,e[c]);this.fullExtent=new A({xmin:x[0],ymin:x[1],zmin:x[2],xmax:y[0],ymax:y[1],zmax:y[2],spatialReference:this.spatialReference})}}async load(a){return this.addResolvingPromise(this._doLoad(a)),this}async _doLoad(a){const s=a!=null?a.signal:null;try{await this.loadFromPortal({supportedTypes:["3DTiles Service"],validateItem:o=>{if(o.typeKeywords?.includes("IntegratedMesh"))return!0;throw new F("portal:invalid-layer-item-type","Invalid layer item, expected '${expectedType}' ",{expectedType:"3DTiles Service containing IntegratedMesh"})}},a)}catch(o){T(o)}this.url&&await G(this.url,{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:s}).then(o=>{this._initFullExtent(o.data)},o=>{T(o)})}async fetchAttributionData(){return this.load().then(()=>({}))}_validateElevationInfo(){const a=this.elevationInfo,s="Integrated mesh 3d tiles layers";N(D.getLogger(this),J(s,"absolute-height",a)),N(D.getLogger(this),Z(s,a))}};m([f({type:["IntegratedMesh3DTilesLayer"]})],d.prototype,"operationalLayerType",void 0),m([f({type:g})],d.prototype,"spatialReference",void 0),m([f({type:A})],d.prototype,"fullExtent",void 0),m([f(K)],d.prototype,"elevationInfo",null),m([f({type:["show","hide"]})],d.prototype,"listMode",void 0),m([f($)],d.prototype,"url",void 0),m([f({readOnly:!0})],d.prototype,"type",void 0),m([f({type:String,json:{origins:{"web-scene":{read:!0,write:!0},"portal-item":{read:!0,write:!0}},read:!1}})],d.prototype,"path",void 0),m([f({type:Number,json:{name:"layerDefinition.minScale",write:!0,origins:{service:{read:!1,write:!1}}}})],d.prototype,"minScale",void 0),m([f({type:Number,json:{name:"layerDefinition.maxScale",write:!0,origins:{service:{read:!1,write:!1}}}})],d.prototype,"maxScale",void 0),d=m([q("esri.layers.IntegratedMesh3DTilesLayer")],d);const B=d;export{B as default};
