import{cv as j,a2 as R,cz as b,gf as l,b$ as y,U as m}from"./main-C02UbYD7.js";function p(n,o){const e=n.toJSON();return e.objectIds&&(e.objectIds=e.objectIds.join(",")),e.orderByFields&&(e.orderByFields=e.orderByFields.join(",")),e.outFields&&!o?.returnCountOnly?e.outFields.includes("*")?e.outFields="*":e.outFields=e.outFields.join(","):delete e.outFields,e.outSR&&(e.outSR=b(e.outSR)),e.dynamicDataSource&&(e.layer=JSON.stringify({source:e.dynamicDataSource}),delete e.dynamicDataSource),e}async function F(n,o,e){const a=await f(n,o,e),t=a.data,s=t.geometryType,r=t.spatialReference,c={};for(const d of t.relatedRecordGroups){const u={fields:void 0,objectIdFieldName:void 0,geometryType:s,spatialReference:r,hasZ:!!t.hasZ,hasM:!!t.hasM,features:d.relatedRecords};if(d.objectId!=null)c[d.objectId]=u;else for(const i of Object.keys(d))i!=="relatedRecords"&&(c[d[i]]=u)}return{...a,data:c}}async function h(n,o,e){const a=await f(n,o,e,{returnCountOnly:!0}),t=a.data,s={};for(const r of t.relatedRecordGroups)r.objectId!=null&&(s[r.objectId]=r.count);return{...a,data:s}}async function f(n,o,e={},a){const t=j({...n.query,f:"json",...a,...p(o,a)});return R(n.path+"/queryRelatedRecords",{...e,query:{...e.query,...t}})}async function I(n,o,e){o=l.from(o);const a=y(n);return F(a,o,e).then(t=>{const s=t.data,r={};return Object.keys(s).forEach(c=>r[c]=m.fromJSON(s[c])),r})}async function S(n,o,e){o=l.from(o);const a=y(n);return h(a,o,{...e}).then(t=>t.data)}export{I as executeRelationshipQuery,S as executeRelationshipQueryForCount};
