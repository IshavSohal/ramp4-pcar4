import{q as i,u as n,C as c,aG as m,s as u,eQ as d,aJ as l}from"./main-I5OitWBP.js";import{d as h}from"./FeatureSet-CsSUf2d1.js";import{n as y,r as _}from"./FeatureLayerView2D-eu2RYTQo.js";import g from"./FeatureFilter-BvU0l_hR.js";import"./preload-helper-ExcqyqRp.js";import"./Field-CCiRoltZ.js";import"./fieldType-D026Ciym.js";import"./compilerUtils-C76XP-3O.js";import"./Container-Bsbk0ZRZ.js";import"./MapView-DXYWL6VP.js";import"./Cyclical-bLSc16pw.js";import"./CollectionFlattener-Dg8oI1th.js";import"./workers-DquSBZpO.js";import"./projection-B4_TWTAT.js";import"./projectBuffer-6NPDEO2G.js";import"./TileInfo-CD-BO-Wz.js";import"./TileKey-DZd6gJy7.js";import"./themeUtils-SlEHXsjK.js";import"./uuid-Cl5lrJ4c.js";import"./UpdatingHandles-D4xxLd6j.js";import"./signal-hBuAIOXv.js";import"./Map-osvkCavA.js";import"./Basemap-CaNkgHB1.js";import"./loadAll-LpxEDvk8.js";import"./PortalItem-DzALBT9b.js";import"./writeUtils-AQvsYkto.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-CijiDGv7.js";import"./common-DQOJ18NT.js";import"./TablesMixin-Cs9l4bgF.js";import"./Layer-DkjhINTN.js";import"./TimeExtent-CqbYfiXv.js";import"./GraphicsCollection-B5hn_5Hu.js";import"./HeightModelInfo-BSfuIFRj.js";import"./ReactiveMap-BuhG2QAG.js";import"./Query-DatHBWcO.js";import"./arcgisLayerUrl-CYzJKxq4.js";import"./ViewingMode-HRfKv6NR.js";import"./vec2f64-B7N_6o8F.js";import"./vec2-DGVIkCvT.js";import"./Tile-km6DwRYx.js";import"./TileKey-r0f1_Gm7.js";import"./QueueProcessor-SnlKxMiM.js";import"./quickselect-QQC62dOK.js";import"./normalizeUtils-C9UQwiOL.js";import"./normalizeUtilsCommon-CCpp9Wh6.js";import"./utils-DSg6MLy_.js";import"./utils-Cl1PJ-NB.js";import"./mat3-XZDRtl20.js";import"./vec2f32-BbH2jxlN.js";import"./unitBezier-BX6NeAEr.js";import"./Scheduler-r9VT0h2Q.js";import"./vec32-1Mrp3Foo.js";import"./definitions-C0Jy3zs7.js";import"./enums-Dk3osxpS.js";import"./Texture-ytqcJ3TE.js";import"./imageUtils-BE8px72F.js";import"./capabilities-A2uoe7dc.js";import"./Version-DI_35dAG.js";import"./ColorBackground-Cew_H13D.js";import"./parser-CWhIQyvL.js";import"./featureConversionUtils-DL-WUTcs.js";import"./OptimizedFeature-CIptWNVu.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./timeSupport-p4H_MPDX.js";import"./LayerView-D8WzCS72.js";import"./layerViewUtils-CW4-5d5z.js";import"./TechniqueInstance-yOzTw3uv.js";import"./UpdateTracking2D-BzzIB2Ns.js";import"./BidiEngine-DNnuvc1i.js";import"./GeometryUtils-B9p0kqAj.js";import"./enums-CmIX1y88.js";import"./utils-QWndGYJy.js";import"./Rect-CUzevAry.js";import"./LabelMetric-CHInaR4f.js";import"./Program-DvjyhPN_.js";import"./BufferObject-D9cJbv72.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./BindType-BmZEZMMh.js";import"./Util-C4yWdKVH.js";import"./vec42-CKs01hkn.js";import"./vec4f64-CMoMXWBi.js";import"./TileContainer-BwOdxLxF.js";import"./WGLContainer-CdLDbd6B.js";import"./VertexArrayObject-CarWtOdb.js";import"./ProgramTemplate-DdOesbYh.js";import"./vec3f32-nZdmKIgz.js";import"./StyleDefinition-BTt_i6C1.js";import"./config-MDUrh2eL.js";import"./earcut-Lltz9D9k.js";import"./FeatureCommandQueue-BUEzqQyM.js";import"./constants-F8oTIn7N.js";import"./lengthUtils-Cez3yCqC.js";import"./CircularArray-CujHzHWW.js";import"./sizeVariableUtils-Cmcuvw-4.js";import"./OrderByInfo-CgGUlGks.js";import"./labelingInfo-zUwoxcGB.js";import"./labelUtils-BcC7MiXo.js";import"./heatmapUtils-BUEPOOFN.js";import"./SDFHelper-B-Z75ljM.js";import"./floatRGBA-32HD-xV3.js";import"./HighlightCounter-Czi-fdpx.js";import"./FeatureEffect-DAab4Eaa.js";import"./jsonUtils-CMsy_Cus.js";import"./floorFilterUtils-DKzVzLpH.js";import"./popupUtils-BeMmBsBX.js";import"./RefreshableLayerView-nmVuwh03.js";const f=t=>{let e=class extends t{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...r){super(...r),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&this._streamConnectionStatus==="connected"?"paused":this._streamConnectionStatus}_onSuspendedChange(r){r?this._doPause():this._isUserPaused||this._doResume()}};return i([n()],e.prototype,"_isUserPaused",void 0),i([n({readOnly:!0})],e.prototype,"connectionStatus",null),i([n({type:g})],e.prototype,"filter",void 0),e=i([c("esri.views.layers.StreamLayerView")],e),e};let s=class extends f(_){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([m(()=>this.layer.customParameters,async t=>{(await this.getWorker()).streamMessenger.updateCustomParameters(t)}),this.layer.on("send-message-to-socket",async t=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(t)}),this.layer.on("send-message-to-client",async t=>{(await this.getWorker()).streamMessenger.sendMessageToClient(t),this._isUserPaused&&"type"in t&&t.type==="clear"&&this.incrementSourceRefreshVersion()}),m(()=>this.layer.purgeOptions,()=>this._update()),m(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new u("stream-controller",this.pipelineErrorString):null}on(t,e){if(Array.isArray(t))return d(t.map(o=>this.on(o,e)));const r=["data-received","message-received"].includes(t);r&&this.getWorker().then(o=>o.streamMessenger.enableEvent(t,!0));const a=super.on(t,e),p=this;return l(()=>{a.remove(),r&&(p._workerProxy.closed||p.hasEventListener(t)||p.getWorker().then(o=>o.streamMessenger.enableEvent(t,!1)))})}async queryLatestObservations(t,e){if(!(this.layer.timeInfo?.endField||this.layer.timeInfo?.startField||this.layer.timeInfo?.trackIdField))throw new u("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const r=await this.getWorker();return y(r.features.executeQueryForLatestObservations(this._cleanUpQuery(t),e).then(a=>{const p=h.fromJSON(a);return p.features.forEach(o=>{o.layer=this.layer,o.sourceLayer=this.layer}),p}),new h({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval)}_doDisconnect(){this.getWorker().then(t=>t.streamMessenger.disconnect()),this._doPause()}_doConnect(){this.getWorker().then(t=>t.streamMessenger.connect()),this.resume()}_doClear(){this.getWorker().then(t=>t.streamMessenger.clear()),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const t=super._createClientOptions(),e=this;return{...t,get container(){return e.featureContainer},setProperty:r=>{this.set(r.propertyName,r.value)}}}};i([n()],s.prototype,"pipelineConnectionStatus",void 0),i([n()],s.prototype,"pipelineErrorString",void 0),i([n({readOnly:!0})],s.prototype,"connectionError",null),i([n({readOnly:!0})],s.prototype,"_streamConnectionStatus",null),s=i([c("esri.views.2d.layers.StreamLayerView2D")],s);const fe=s;export{fe as default};
