import{J as S,bn as g,bo as d,bp as I,U as f,aw as w,s as b,H as $,q as o,u as a,bq as v,z as O,v as T,br as P,C as E}from"./main-BmfnUD3g.js";import{t as L}from"./loadAll-CDIDzB34.js";import{S as F}from"./MultiOriginJSONSupport-BCzazlYB.js";import{i as M}from"./scaleUtils-BxIV_K8g.js";import{f as R}from"./Layer-D2QRdFNK.js";import{i as q}from"./APIKeyMixin-Dbeu9B4c.js";import{m as J,f as _,t as j}from"./SublayersOwner-TzDxStKy.js";import{l as N}from"./ArcGISService-BuKCGJbV.js";import{l as U}from"./BlendLayer-DVSQ10E0.js";import{e as A}from"./CustomParametersMixin-Cf2_c840.js";import{b as V}from"./OperationalLayer-E1J9LCpQ.js";import{j as k}from"./PortalLayer-BGssmdEZ.js";import{f as z}from"./RefreshableLayer-CjvrPUG-.js";import{t as C}from"./ScaleRangeLayer-BJyXLQNz.js";import{l as H}from"./TemporalLayer-BlorrnuY.js";import{y as Z}from"./commonProperties-DfNwvgwQ.js";import{y as B}from"./ExportImageParameters-BJwnkkRX.js";import{t as D}from"./imageBitmapUtils-Btz5TfxJ.js";import{e as x}from"./sublayerUtils-D4hL0SoN.js";import{t as G}from"./versionUtils-D_RJXH8z.js";import{p as K}from"./TimeExtent-Dtq5nncN.js";import"./preload-helper-ExcqyqRp.js";import"./Version-CKYX5zGH.js";import"./arcgisLayerUrl-BSIzazOi.js";import"./portalItemUtils-CvelWCc3.js";import"./projection-CbejALnF.js";import"./projectBuffer-BZgUONQQ.js";import"./CollectionFlattener-BIDo5PzX.js";import"./UniqueValueRenderer-C175jEWj.js";import"./RendererLegendOptions-BxN9QvLA.js";import"./diffUtils-BP7Naba7.js";import"./colorRamps-DkG8fDLZ.js";import"./sizeVariableUtils-Cmcuvw-4.js";import"./visualVariableUtils-CCMtSSuM.js";import"./compilerUtils-CkBtCXnu.js";import"./lengthUtils-7USZCmmw.js";import"./styleUtils-DNg90Vb8.js";import"./jsonUtils-BgYi8lX8.js";import"./LRUCache-fyiuEhBh.js";import"./FieldsIndex-B4I-zMIH.js";import"./UnknownTimeZone-DbA_8TWt.js";import"./OverrideHelper-CRbdG-G2.js";import"./colorUtils-CRW8kTEL.js";import"./vec42-CKs01hkn.js";import"./common-DQOJ18NT.js";import"./vec4f64-CMoMXWBi.js";import"./utils-QWndGYJy.js";import"./enums-CmIX1y88.js";import"./quantizationUtils-D5p4I9RK.js";import"./heatmapUtils-BmbFqBs7.js";import"./QueryTask-BhEzkc4I.js";import"./infoFor3D-_5f2f6Um.js";import"./Query-C17ZsKZm.js";import"./Field-DCSagnNK.js";import"./fieldType-C_aXdwDr.js";import"./utils-DGzLhnf6.js";import"./executeForIds-C_y4jB0J.js";import"./query-Svdugr8k.js";import"./normalizeUtils-C72bTOCg.js";import"./normalizeUtilsCommon-Bro4jizJ.js";import"./utils-BQdCGHRG.js";import"./pbfQueryUtils-h17FG0rG.js";import"./pbf-DG6LT8qc.js";import"./OptimizedFeature-CIptWNVu.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-B5xV0JP9.js";import"./executeQueryPBF-DHB-a-yl.js";import"./featureConversionUtils-CKUUAutM.js";import"./FeatureSet-CEgGjrYI.js";import"./executeQueryJSON-DYqovK5d.js";import"./featureLayerUtils-DQEcgwJF.js";import"./uuid-Cl5lrJ4c.js";import"./RelationshipQuery-DqHzA9J9.js";import"./FeatureType-D4vtvWnD.js";import"./FeatureTemplate-Dr2QZ_Wb.js";import"./labelingInfo-D3SnM_MU.js";import"./labelUtils-Cd9RUie5.js";import"./LayerFloorInfo-DaZR5UIZ.js";import"./Relationship-BLy-qdKa.js";import"./serviceCapabilitiesUtils-qG3ju46I.js";import"./popupUtils-2-HRgdHv.js";import"./jsonUtils-DpvrCUQ8.js";import"./parser-CMHNXkU2.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-CRJqZhkC.js";import"./PortalItem-DejdcV5B.js";import"./TimeInfo-BTZUuQZg.js";import"./ElevationInfo-D-D7ZpiZ.js";import"./floorFilterUtils-DKzVzLpH.js";let r=class extends U(H(C(J(_(N(V(k(F(z(q(A(R)))))))))))){constructor(...t){super(...t),this._exportImageParameters=new B({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(t,e){return typeof t=="string"?{url:t,...e}:t}load(t){const e=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},t).catch(S).then(()=>this._fetchService(e))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(t,e){const n=e.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(t,e,n,s){if(!this.loaded||!t)return;const m=t.slice().reverse().flatten(({sublayers:i})=>i&&i.toArray().reverse()).toArray();let p=!1;const l=g(s.origin);if(this.capabilities?.operations.supportsExportMap&&this.capabilities?.exportMap?.supportsDynamicLayers){if(l===d.PORTAL_ITEM){const i=this.createSublayersForOrigin("service").sublayers;p=x(m,i,d.SERVICE)}else if(l>d.PORTAL_ITEM){const i=this.createSublayersForOrigin("portal-item");p=x(m,i.sublayers,g(i.origin))}}const h=[],c={writeSublayerStructure:p,...s};let y=p||this.hasVisibleLayersForOrigin(l);m.forEach(i=>{const u=i.write({},c);h.push(u),y=y||i.originOf("visible")==="user"}),h.some(i=>Object.keys(i).length>1)&&(e.layers=h),y&&(e.visibleLayers=m.filter(i=>i.visible).map(i=>i.id))}createExportImageParameters(t,e,n,s){const m=s?.pixelRatio||1;t&&this.version>=10&&(t=t.clone().shiftCentralMeridian()),this._exportImageParameters.floors=s?.floors??null,this._exportImageParameters.scale=M({extent:t,width:e})*m;const p=this._exportImageParameters.toJSON(),l=!s?.rotation||this.version<10.3?{}:{rotation:-s.rotation},h=t?.spatialReference,c=I(h);p.dpi*=m;const y={};if(s?.timeExtent){const{start:i,end:u}=s.timeExtent.toJSON();y.time=i&&u&&i===u?""+i:`${i??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(y.time="null,null");return{bbox:t&&t.xmin+","+t.ymin+","+t.xmax+","+t.ymax,bboxSR:c,imageSR:c,size:e+","+n,...p,...l,...y}}async fetchImage(t,e,n,s){const{data:m}=await this._fetchImage("image",t,e,n,s);return m}async fetchImageBitmap(t,e,n,s){const{data:m,url:p}=await this._fetchImage("blob",t,e,n,s);return D(m,p,s?.signal)}async fetchRecomputedExtents(t={}){const e={...t,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await f(this.url,e),{extent:s,fullExtent:m,timeExtent:p}=n,l=s||m;return{fullExtent:l&&w.fromJSON(l),timeExtent:p&&K.fromJSON({start:p[0],end:p[1]})}}loadAll(){return L(this,t=>{t(this.allSublayers),t(this.subtables)})}serviceSupportsSpatialReference(t){return G(this,t)}async _fetchImage(t,e,n,s,m){const p={responseType:t,signal:m?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(e,n,s,m),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(p.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new b("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:p.query});try{const{data:h}=await f(l,p);return{data:h,url:l}}catch(h){throw $(h)?h:new b("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:h})}}async _fetchService(t){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:e,ssl:n}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:t});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=e,this.read(e,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(t){return!(t==null||!this.sublayersSourceJSON[t]?.visibleLayers)}};o([a(v("dateFieldsTimeReference"))],r.prototype,"dateFieldsTimeZone",void 0),o([a({type:Boolean})],r.prototype,"datesInUnknownTimezone",void 0),o([a()],r.prototype,"dpi",void 0),o([a()],r.prototype,"gdbVersion",void 0),o([a()],r.prototype,"imageFormat",void 0),o([O("imageFormat",["supportedImageFormatTypes"])],r.prototype,"readImageFormat",null),o([a({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],r.prototype,"imageMaxHeight",void 0),o([a({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],r.prototype,"imageMaxWidth",void 0),o([a()],r.prototype,"imageTransparency",void 0),o([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],r.prototype,"isReference",void 0),o([a({json:{read:!1,write:!1}})],r.prototype,"labelsVisible",void 0),o([a({type:["ArcGISMapServiceLayer"]})],r.prototype,"operationalLayerType",void 0),o([a({json:{read:!1,write:!1}})],r.prototype,"popupEnabled",void 0),o([a(v("preferredTimeReference"))],r.prototype,"preferredTimeZone",void 0),o([a()],r.prototype,"sourceJSON",void 0),o([a({json:{write:{ignoreOrigin:!0}}})],r.prototype,"sublayers",void 0),o([T("sublayers",{layers:{type:[j]},visibleLayers:{type:[P]}})],r.prototype,"writeSublayers",null),o([a({type:["show","hide","hide-children"]})],r.prototype,"listMode",void 0),o([a({json:{read:!1},readOnly:!0,value:"map-image"})],r.prototype,"type",void 0),o([a(Z)],r.prototype,"url",void 0),r=o([E("esri.layers.MapImageLayer")],r);const Mr=r;export{Mr as default};
