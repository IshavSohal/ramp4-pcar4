{"version":3,"file":"screen-gIGGFhs6.js","sources":["../../src/fixtures/help/section.vue","../../src/fixtures/help/screen.vue"],"sourcesContent":["<template>\r\n    <div v-if=\"helpSection.drawn\">\r\n        <div>\r\n            <button\r\n                type=\"button\"\r\n                class=\"help-section-header flex items-center py-15 px-25 hover:bg-gray-200 cursor-pointer select-none w-full\"\r\n                @click=\"$emit('expand')\"\r\n                :content=\"t(helpSection.expanded ? 'help.section.collapse' : 'help.section.expand')\"\r\n                v-tippy=\"{ placement: 'top-end', hideOnClick: false }\"\r\n            >\r\n                <!-- name -->\r\n                <span class=\"text-lg text-left flex-grow\">{{ helpSection.header }}</span>\r\n\r\n                <!-- dropdown icon -->\r\n                <div class=\"dropdown-icon\" :class=\"{ 'transform -rotate-180': helpSection.expanded }\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\r\n                        <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\r\n                        <path d=\"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\" />\r\n                    </svg>\r\n                </div>\r\n            </button>\r\n            <transition name=\"help-item\" mode=\"out-in\">\r\n                <div\r\n                    v-show=\"helpSection.expanded\"\r\n                    v-html=\"helpSection.info\"\r\n                    class=\"ramp-markdown section-body px-20 pt-5 ml-10 overflow-hidden\"\r\n                ></div>\r\n            </transition>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nconst { t } = useI18n();\r\n\r\ndefineProps({\r\n    helpSection: {\r\n        type: Object,\r\n        required: true\r\n    }\r\n});\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.help-section-header .dropdown-icon {\r\n    transition: transform 0.3s cubic-bezier(0.35, 0, 0.25, 1);\r\n}\r\n.help-item-leave-active,\r\n.help-item-enter-active {\r\n    @apply max-h-500;\r\n    transition: all 0.3s;\r\n}\r\n.help-item-enter-active {\r\n    transition-delay: 0.1s;\r\n}\r\n.help-item-leave-to,\r\n.help-item-enter {\r\n    @apply max-h-0 opacity-0;\r\n}\r\n</style>\r\n","<template>\r\n    <panel-screen :panel=\"panel\">\r\n        <template #header>\r\n            {{ t('help.title') }}\r\n        </template>\r\n        <template #content>\r\n            <div class=\"h-26 mb-8 mx-8\">\r\n                <input\r\n                    type=\"search\"\r\n                    class=\"rv-help-search-bar border-b w-full text-base py-8 outline-none focus:shadow-outline border-gray-600 h-full min-w-0\"\r\n                    :placeholder=\"t('help.search')\"\r\n                    v-model=\"searchTerm\"\r\n                    :aria-label=\"t('help.search')\"\r\n                    @input=\"doSearch(searchTerm, helpSections)\"\r\n                    @keypress.enter.prevent\r\n                    enterkeyhint=\"done\"\r\n                />\r\n            </div>\r\n            <div v-if=\"noResults\">\r\n                <p>{{ t('help.noResults') }}</p>\r\n            </div>\r\n            <help-section\r\n                v-for=\"(section, idx) in helpSections\"\r\n                :helpSection=\"section\"\r\n                :key=\"idx\"\r\n                @expand=\"toggleExpanded(section)\"\r\n            ></help-section>\r\n        </template>\r\n    </panel-screen>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { computed, inject, onBeforeMount, onBeforeUnmount, ref, watch } from 'vue';\r\nimport type { PropType } from 'vue';\r\n\r\nimport type { InstanceAPI, PanelInstance } from '@/api';\r\nimport { useHelpStore } from './store';\r\nimport HelpSection from './section.vue';\r\nimport axios from 'redaxios';\r\nimport { marked } from 'marked';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nconst iApi = inject<InstanceAPI>('iApi')!;\r\nconst helpStore = useHelpStore();\r\nconst { t } = useI18n();\r\n\r\ndefineProps({\r\n    panel: {\r\n        type: Object as PropType<PanelInstance>,\r\n        required: true\r\n    }\r\n});\r\n\r\nconst location = computed<string>(() => helpStore.location);\r\nconst helpSections = ref<Array<any>>([]);\r\nconst originalTextArray = ref<Array<any>>([]);\r\nconst watchers = ref<Array<Function>>([]);\r\n\r\nconst noResults = ref<boolean>(false);\r\nlet numResults: number;\r\nlet searchTerm: string;\r\n\r\n//find search term in info sections without impacting the HTML tags\r\nfunction findInfo(searchTerm: string, section: any) {\r\n    const segments: string[] = section.info.split(/(<[^>]*>)/);\r\n    for (const [i, segment] of segments.entries()) {\r\n        if (i % 2 === 0) {\r\n            if (segment.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n// highlight the search term\r\nfunction highlightSearchTerm(searchTerm: string, idx: number) {\r\n    const originalText = originalTextArray.value[idx];\r\n    // split text around <a> and <img> to preserve links\r\n    const segments: string[] = originalText.split(/(<[^>]*>)/);\r\n    let highlightedText: string = '';\r\n    for (const [i, segment] of segments.entries()) {\r\n        if (i % 2 === 0) {\r\n            highlightedText += segment.replace(\r\n                new RegExp(searchTerm, 'gi'),\r\n                (match: string) => `<mark>${match}</mark>`\r\n            );\r\n        } else {\r\n            highlightedText += segment;\r\n        }\r\n    }\r\n    // text to display set with highlights\r\n    helpSections.value[idx].info = highlightedText;\r\n}\r\n\r\n// find the help sections which contain the search term\r\nfunction doSearch(searchTerm: string, sections: any) {\r\n    numResults = 0;\r\n    sections.forEach((section: any, index: number) => {\r\n        //reset the text to original before looking for search term\r\n        section.info = originalTextArray.value[index];\r\n        //find the search term in each section\r\n        section.drawn =\r\n            findInfo(searchTerm, section) || section.header.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1;\r\n        numResults = section.drawn ? numResults + 1 : numResults;\r\n        section.expanded = section.drawn && searchTerm.length > 2;\r\n        if (section.drawn && searchTerm.length > 2) {\r\n            highlightSearchTerm(searchTerm, index);\r\n        }\r\n    });\r\n    noResults.value = numResults === 0;\r\n}\r\n\r\nfunction toggleExpanded(section: any) {\r\n    section.expanded = !section.expanded;\r\n}\r\n\r\nonBeforeMount(() => {\r\n    // make help request when fixture loads or locale changes\r\n    watchers.value.push(\r\n        watch(\r\n            () => iApi.language,\r\n            (newLocale: any, oldLocale: any) => {\r\n                if (newLocale === oldLocale) return;\r\n                // path to where HELP is hosted is different if RAMP is built as prod library\r\n                const renderer = new marked.Renderer();\r\n                const loc = location.value.slice(-1) === '/' ? location.value : `${location.value}/`;\r\n                // make it easier to use images in markdown by prepending path to href if href is not an external source\r\n                // this avoids the need for ![](help/images/myimg.png) to just ![](myimg.png). This overrides the default image renderer completely.\r\n                renderer.image = (href: string, title: string, text: string) => {\r\n                    if (href.indexOf('http') === -1) {\r\n                        href = `${loc}images/` + href;\r\n                    }\r\n                    return `<img src=\"${href}\" alt=\"${text}\">`;\r\n                };\r\n                axios.get(`${loc}${newLocale}.md`).then(r => {\r\n                    // matches help sections from markdown file where each section begins with one hashbang and a space\r\n                    // followed by the section header, exactly 2 newlines, then up to but not including a double newline\r\n                    // note that the {2,} below is used as the double line deparator since each double new line is actually 6\r\n                    // but we'll also accept more than a double space\r\n                    const reg = /^#\\s(.*)\\n{2}(?:.+|\\n(?!\\n{2,}))*/gm;\r\n                    // remove new line character ASCII (13) so that above regex is compatible with all\r\n                    // operating systems (markdown file varies by OS new line preference)\r\n                    let helpMd = r.data.replace(new RegExp(String.fromCharCode(13), 'g'), '');\r\n                    helpSections.value = [];\r\n                    let section;\r\n                    while ((section = reg.exec(helpMd))) {\r\n                        helpSections.value.push({\r\n                            header: section[1],\r\n                            // parse markdown on info section, split/splice/join removes the header\r\n                            // since we can't put info section into its own regex grouping\r\n                            info: marked(section[0].split('\\n').splice(2).join('\\n'), {\r\n                                renderer\r\n                            }),\r\n                            drawn: true,\r\n                            expanded: false\r\n                        });\r\n                        //copy of the original text to refer to after highlighting\r\n                        originalTextArray.value.push(\r\n                            marked(section[0].split('\\n').splice(2).join('\\n'), {\r\n                                renderer\r\n                            })\r\n                        );\r\n                    }\r\n                });\r\n            },\r\n            { immediate: true }\r\n        )\r\n    );\r\n});\r\n\r\nonBeforeUnmount(() => {\r\n    watchers.value.forEach(unwatch => unwatch());\r\n});\r\n</script>\r\n\r\n<style lang=\"scss\" scoped></style>\r\n"],"names":["t","useI18n","iApi","inject","helpStore","useHelpStore","location","computed","helpSections","ref","originalTextArray","watchers","noResults","numResults","searchTerm","findInfo","section","segments","i","segment","highlightSearchTerm","idx","highlightedText","match","doSearch","sections","index","toggleExpanded","onBeforeMount","watch","newLocale","oldLocale","renderer","marked","loc","href","title","text","axios","r","reg","helpMd","onBeforeUnmount","unwatch"],"mappings":"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"}