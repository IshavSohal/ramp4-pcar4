{"version":3,"file":"index-CfW4W0dd.js","sources":["../../src/geo/map/overview-map.ts","../../src/fixtures/overviewmap/api/overviewmap.ts","../../src/fixtures/overviewmap/overviewmap.vue","../../src/fixtures/overviewmap/lang/lang.csv?raw","../../src/fixtures/overviewmap/index.ts"],"sourcesContent":["import { markRaw } from 'vue';\r\nimport { Basemap, CommonMapAPI, GraphicLayer, InstanceAPI } from '@/api/internal';\r\nimport { Graphic, LayerType, PolygonStyle } from '@/geo/api';\r\nimport type { Extent, RampMapConfig } from '@/geo/api';\r\nimport { EsriAPI } from '@/geo/esri';\r\n\r\nimport { useConfigStore } from '@/stores/config';\r\nimport { useOverviewmapStore } from '@/fixtures/overviewmap/store';\r\n\r\nexport class OverviewMapAPI extends CommonMapAPI {\r\n    protected overviewGraphicLayer: GraphicLayer;\r\n    overviewmapStore: any;\r\n\r\n    /**\r\n     * @constructor\r\n     * @param {InstanceAPI} iApi the RAMP instance\r\n     */\r\n    constructor(iApi: InstanceAPI) {\r\n        super(iApi);\r\n        this.overviewGraphicLayer = this.$iApi.geo.layer.createLayer({\r\n            id: 'RampOverviewGraphic',\r\n            layerType: LayerType.GRAPHIC,\r\n            url: '',\r\n            cosmetic: true\r\n        }) as GraphicLayer;\r\n        this.overviewmapStore = useOverviewmapStore(this.$vApp.$pinia);\r\n    }\r\n\r\n    /**\r\n     * Will generate a ESRI map view and add it to the page\r\n     * Must provide the basemap or basemap id to be used when creating the map view\r\n     *\r\n     * @param {string | Basemap} basemap the id of the basemap that should be used when creating the map view\r\n     * @returns {Promise} resolves when the map view has been created.\r\n     * @protected\r\n     */\r\n    protected async createMapView(basemap: string | Basemap): Promise<void> {\r\n        if (!basemap) {\r\n            throw new Error('Attempted to create overview map view without a basemap');\r\n        }\r\n\r\n        const bm: Basemap = typeof basemap === 'string' ? await this.findBasemap(basemap) : basemap;\r\n\r\n        await this.applyBasemap(bm);\r\n\r\n        // TODO: This assumes that the overview map will be synced with the main map's tile schema, so it just uses the extent/sr from the main map\r\n        //       Revisit this when enhancing the overview map to be able to use a different tile schema than the main map\r\n        this._rampExtentSet = this.$iApi.geo.map.getExtentSet().clone();\r\n        this._rampSR = this._rampExtentSet.sr.clone();\r\n\r\n        const expandFactor: number = this.overviewmapStore.expandFactor;\r\n\r\n        // create esri view with config\r\n        this.esriView = markRaw(\r\n            await EsriAPI.MapView({\r\n                map: this.esriMap,\r\n                container: this._targetDiv,\r\n                constraints: {\r\n                    rotationEnabled: false\r\n                },\r\n                spatialReference: this._rampSR.toESRI(),\r\n                extent: this.$iApi.geo.map.getExtent().toESRI().expand(expandFactor) // use the expanded main map extent\r\n            })\r\n        );\r\n\r\n        // Remove all ui components\r\n        this.esriView.ui.components = [];\r\n\r\n        this.handlers.push({\r\n            type: 'mouse-wheel',\r\n            handler: this.esriView.on('mouse-wheel', esriMouseWheel => {\r\n                esriMouseWheel.stopPropagation();\r\n            })\r\n        });\r\n\r\n        this.handlers.push({\r\n            type: 'double-click',\r\n            handler: this.esriView.on('double-click', esriDoubleClick => {\r\n                esriDoubleClick.stopPropagation();\r\n            })\r\n        });\r\n\r\n        this.handlers.push({\r\n            type: 'key-down',\r\n            handler: this.esriView.on('key-down', esriKeyDown => {\r\n                esriKeyDown.stopPropagation();\r\n            })\r\n        });\r\n\r\n        this.handlers.push({\r\n            type: 'key-up',\r\n            handler: this.esriView.on('key-up', esriKeyUp => {\r\n                esriKeyUp.stopPropagation();\r\n            })\r\n        });\r\n\r\n        this.handlers.push({\r\n            type: 'drag',\r\n            handler: this.esriView.on('drag', esriDrag => {\r\n                esriDrag.stopPropagation();\r\n                this.mapDrag(esriDrag);\r\n            })\r\n        });\r\n\r\n        this.esriView.container.addEventListener('touchmove', e => {\r\n            // need this for panning and zooming to work on mobile devices / touchscreens\r\n            // touchmove stops the drag event (what the MapView reacts to) from firing properly\r\n            e.preventDefault();\r\n        });\r\n\r\n        // most browsers have a webgl context limit of 16 (one instance of RAMP can use 2 - map and overview map).\r\n        // once the number of contexts is higher than the limit, the oldest context will be lost.\r\n        // when instance is visible on screen, if its overview context is lost then recover it.\r\n        this.esriView.watch('fatalError', () => {\r\n            const observer = new IntersectionObserver(entries => {\r\n                entries.forEach(entry => {\r\n                    if (entry.isIntersecting) {\r\n                        this.esriView?.tryFatalErrorRecovery();\r\n                        observer.disconnect();\r\n                    }\r\n                });\r\n            });\r\n            observer.observe(this.esriView!.container);\r\n        });\r\n\r\n        // as of ESRI v4.26, we need to marinate until .when() is done.\r\n        // otherwise, something happens too fast and the initial calls to view.goTo() grouse quite a lot,\r\n        // and ends up breaking the overview.\r\n        this.esriView.when(() => {\r\n            this._viewPromise.resolveMe();\r\n            this.created = true;\r\n        });\r\n    }\r\n\r\n    async addMapGraphicLayer() {\r\n        if (!this.esriMap) {\r\n            this.noMapErr();\r\n            return;\r\n        }\r\n\r\n        const overviewGraphic = new Graphic(this.$iApi.geo.map.getExtent(), 'overview-graphic');\r\n\r\n        const borderColour = this.overviewmapStore.borderColour ?? '#FF0000';\r\n        const borderWidth = this.overviewmapStore.borderWidth ?? 1;\r\n        const areaColour = this.overviewmapStore.areaColour ?? '#000000';\r\n        const areaOpacity = this.overviewmapStore.areaOpacity ?? 0.25;\r\n\r\n        // generate hex colour with alpha\r\n        const areaFill = `${areaColour}${Math.round(areaOpacity * 255).toString(16)}`;\r\n\r\n        overviewGraphic.style = new PolygonStyle({\r\n            fill: { colour: areaFill },\r\n            outline: {\r\n                colour: borderColour,\r\n                width: borderWidth\r\n            }\r\n        });\r\n\r\n        await this.overviewGraphicLayer.initiate();\r\n        await this.overviewGraphicLayer.addGraphic(overviewGraphic);\r\n        this.esriMap?.add(this.overviewGraphicLayer.esriLayer!);\r\n    }\r\n\r\n    async removeMapGraphicLayer() {\r\n        if (!this.esriMap) {\r\n            this.noMapErr();\r\n            return;\r\n        }\r\n\r\n        if (!this.overviewGraphicLayer.esriLayer) {\r\n            throw new Error(\r\n                'Attempted to remove layer from the map without an esri layer. Likely layer.initiate() was not called or had not finished.'\r\n            );\r\n        }\r\n\r\n        this.overviewGraphicLayer.removeGraphic();\r\n        this.esriMap.remove(this.overviewGraphicLayer.esriLayer);\r\n\r\n        // This removes the reference to .esriLayer so must happen after the esriMap.remove()\r\n        await this.overviewGraphicLayer.terminate();\r\n    }\r\n\r\n    /**\r\n     * Destroys the ESRI map view\r\n     *\r\n     * @protected\r\n     */\r\n    protected destroyMapView(): void {\r\n        // override the method to remove this listener\r\n        this.esriView?.container.removeEventListener('touchmove', e => {\r\n            e.preventDefault();\r\n        });\r\n        super.destroyMapView();\r\n    }\r\n\r\n    /**\r\n     * Searches the local basemap list, then the main map basemaps for a basemap with the given id\r\n     * Throws error if basemap could not be found\r\n     *\r\n     * @param {string} id basemap id\r\n     * @returns {Promise<Basemap>} resolves with the found basemap\r\n     * @protected\r\n     */\r\n    async findBasemap(id: string): Promise<Basemap> {\r\n        const bm: Basemap | undefined = this._basemapStore.find(bms => bms.id === id);\r\n        if (bm) {\r\n            return bm;\r\n        } else {\r\n            // search the basemaps in the main map config\r\n            const configStore = useConfigStore(this.$vApp.$pinia);\r\n            const mainMapConfig: RampMapConfig = configStore.config.map;\r\n            if (mainMapConfig) {\r\n                const bmConfig = mainMapConfig.basemaps.find(bm => bm.id === id);\r\n                if (bmConfig) {\r\n                    return Basemap.create(bmConfig);\r\n                }\r\n            }\r\n        }\r\n\r\n        throw new Error(`Invalid basemap id requested: ${id}`);\r\n    }\r\n\r\n    /**\r\n     * Sets the overview map's basemap to the basemap with the given id.\r\n     * Will refresh the map view if set basemap uses different tile schema.\r\n     *\r\n     * Should only be called by the overview map component\r\n     *\r\n     * @param {string} basemapId the basemap id\r\n     * @returns {Promise<boolean>} resolves with boolean indicates if the schema has changed\r\n     */\r\n    async setBasemap(basemapId: string): Promise<boolean> {\r\n        if (!this.esriView || !this.esriMap) {\r\n            this.noMapErr();\r\n            return false;\r\n        }\r\n\r\n        const bm: Basemap = await this.findBasemap(basemapId);\r\n\r\n        // get the current basemap\r\n        const currBm: Basemap | undefined = this.getCurrentBasemapId()\r\n            ? await this.findBasemap(this.getCurrentBasemapId()!)\r\n            : undefined;\r\n\r\n        const differentSchema: boolean = currBm?.tileSchemaId !== bm.tileSchemaId;\r\n\r\n        if (differentSchema) {\r\n            this.destroyMapView();\r\n            await this.createMapView(bm);\r\n        } else {\r\n            await this.applyBasemap(bm);\r\n        }\r\n\r\n        return differentSchema;\r\n    }\r\n\r\n    /**\r\n     * Initial esri extent of graphic during drag\r\n     *\r\n     * @private\r\n     */\r\n    private startExtent: __esri.Extent | null = null;\r\n\r\n    /**\r\n     * Moves graphic and zooms main map if extent graphic is dragged\r\n     *\r\n     * @param {__esri.ViewDragEvent} esriDrag\r\n     * @private\r\n     */\r\n    private async mapDrag(esriDrag: __esri.ViewDragEvent) {\r\n        if (esriDrag.native.pointerType === 'mouse') {\r\n            if (esriDrag.action === 'start') {\r\n                // check if drag hits graphic, if so set start extent\r\n                if (await this.cursorHitTest(esriDrag)) {\r\n                    this.startExtent = markRaw(\r\n                        this.overviewGraphicLayer.getEsriGraphic('overview-graphic')!.geometry\r\n                    ) as __esri.Extent;\r\n                }\r\n            } else if (this.startExtent) {\r\n                // determine delta in map coords from drag origin to current drag point and update extent graphic\r\n                const origin = this.esriView!.toMap(esriDrag.origin);\r\n                const pos = this.esriView!.toMap({\r\n                    x: esriDrag.x,\r\n                    y: esriDrag.y\r\n                });\r\n                const newExtent = this.startExtent.clone().offset(pos.x - origin.x, pos.y - origin.y, 0);\r\n                this.overviewGraphicLayer.getEsriGraphic('overview-graphic')!.geometry = newExtent;\r\n\r\n                if (esriDrag.action === 'end') {\r\n                    // zoom main map once drag is done\r\n                    this.$iApi.geo.map.zoomMapTo(this.$iApi.geo.geom.geomEsriToRamp(newExtent), undefined, false);\r\n                    this.startExtent = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates overviewmap extent and graphic based on main map extent\r\n     *\r\n     * @param {Extent} newExtent new main map extent\r\n     * @returns {Promise<void>} A promise that resolves when the overviewmap has finished updating\r\n     */\r\n    updateOverview(newExtent: Extent): Promise<void> {\r\n        const expandFactor: number = this.overviewmapStore.expandFactor;\r\n\r\n        const zoomPromise = this.zoomMapTo(newExtent.expand(expandFactor), undefined, false);\r\n\r\n        const graphic = this.overviewGraphicLayer.getLocalGraphic('overview-graphic');\r\n\r\n        // Instead of directly changing graphic geometry, we need to remove graphic, change geometry, and re add graphic.\r\n        // This is because of a glitch where changing the geometry directly sometimes causes multiple indicator rectangles\r\n        // to appear in the overview map (https://github.com/ramp4-pcar4/ramp4-pcar4/issues/1493).\r\n        // We suspect that this is an ESRI bug, and are implementing this hack as a workaround for now.\r\n        this.overviewGraphicLayer.removeGraphic(graphic);\r\n        graphic!.geometry = newExtent;\r\n        this.overviewGraphicLayer.addGraphic(graphic!);\r\n\r\n        return zoomPromise;\r\n    }\r\n\r\n    /**\r\n     * Checks if mouse event intersects with extent graphic\r\n     *\r\n     * @param {MouseEvent} e\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    async cursorHitTest(e: MouseEvent | __esri.MapViewScreenPoint): Promise<boolean> {\r\n        const hitTestResult = await this.esriView!.hitTest(e);\r\n        return hitTestResult.results.length > 0;\r\n    }\r\n}\r\n","import { FixtureInstance } from '@/api';\r\nimport { useOverviewmapStore } from '../store';\r\nimport type { OverviewmapConfig } from '../store';\r\n\r\nexport class OverviewmapAPI extends FixtureInstance {\r\n    /**\r\n     * Parses the overview map config JSON snippet from the config file and save to the fixture store.\r\n     *\r\n     * @param {OverviewmapConfig} [OverviewmapConfig]\r\n     * @memberof OverviewmapAPI\r\n     */\r\n    _parseConfig(overviewmapConfig?: OverviewmapConfig) {\r\n        const overviewmapStore = useOverviewmapStore(this.$vApp.$pinia);\r\n\r\n        overviewmapStore.basemaps = overviewmapConfig?.basemaps || {};\r\n        overviewmapStore.mapConfig.basemaps = overviewmapConfig ? Object.values(overviewmapConfig.basemaps) : [];\r\n        overviewmapStore.startMinimized = overviewmapConfig?.startMinimized ?? true;\r\n        overviewmapStore.expandFactor = overviewmapConfig?.expandFactor ?? 1.5;\r\n        overviewmapStore.borderColour = overviewmapConfig?.borderColour ?? '#FF0000';\r\n        overviewmapStore.borderWidth = overviewmapConfig?.borderWidth ?? 1;\r\n        overviewmapStore.areaColour = overviewmapConfig?.areaColour ?? '#000000';\r\n        overviewmapStore.areaOpacity = overviewmapConfig?.areaOpacity ?? 0.25;\r\n    }\r\n\r\n    get config(): OverviewmapConfig {\r\n        return super.config;\r\n    }\r\n}\r\n","<template>\r\n    <div class=\"relative\" ref=\"el\">\r\n        <div\r\n            :style=\"mapStyle()\"\r\n            class=\"pointer-events-auto absolute top-0 right-0 mt-12 mr-12 shadow-tm border-4 border-solid border-white bg-white transition-all duration-300 ease-out\"\r\n        >\r\n            <!-- map -->\r\n            <div class=\"relative h-full w-full overflow-hidden\">\r\n                <div\r\n                    class=\"overviewmap absolute top-0 right-0 h-192 w-192\"\r\n                    :class=\"{ 'cursor-move': hoverOnExtent }\"\r\n                    @mousemove=\"cursorHitTest\"\r\n                ></div>\r\n            </div>\r\n            <!-- toggle -->\r\n            <div class=\"absolute h-30 w-30 top-0 right-0\">\r\n                <button\r\n                    type=\"button\"\r\n                    tabindex=\"0\"\r\n                    class=\"cursor-pointer absolute h-full w-full\"\r\n                    @click=\"minimized = !minimized\"\r\n                    :content=\"t(minimized ? 'overviewmap.expand' : 'overviewmap.minimize')\"\r\n                    :aria-label=\"t(minimized ? 'overviewmap.expand' : 'overviewmap.minimize')\"\r\n                    v-tippy=\"{ placement: 'left', hideOnClick: false }\"\r\n                >\r\n                    <svg\r\n                        class=\"absolute fill-current text-gray-500 transition-all duration-300 ease-out\"\r\n                        :style=\"toggleStyle()\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        fit=\"\"\r\n                        height=\"100%\"\r\n                        width=\"100%\"\r\n                        preserveAspectRatio=\"xMidYMid meet\"\r\n                        viewBox=\"0 0 24 24\"\r\n                        focusable=\"false\"\r\n                    >\r\n                        <g id=\"apple-keyboard-control\">\r\n                            <path\r\n                                d=\"M 19.7782,11.7782L 18.364,13.1924L 12,6.82843L 5.63604,13.1924L 4.22183,11.7782L 12,4L 19.7782,11.7782 Z \"\r\n                            ></path>\r\n                        </g>\r\n                    </svg>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { computed, inject, onBeforeUnmount, onMounted, reactive, ref } from 'vue';\r\n\r\nimport type { BasemapChange, Extent, RampBasemapConfig } from '@/geo/api';\r\nimport { GlobalEvents, InstanceAPI, OverviewMapAPI } from '@/api/internal';\r\nimport { useOverviewmapStore } from './store';\r\nimport { debounce } from 'throttle-debounce';\r\nimport { useI18n } from 'vue-i18n';\r\nimport { useConfigStore } from '@/stores/config';\r\n\r\nconst overviewmapStore = useOverviewmapStore();\r\nconst { t } = useI18n();\r\nconst iApi = inject('iApi') as InstanceAPI;\r\nconst configStore = useConfigStore();\r\nconst el = ref();\r\n\r\nconst activeBasemap = computed<RampBasemapConfig>(() => configStore.activeBasemapConfig as RampBasemapConfig);\r\nconst mapConfig = computed(() => overviewmapStore.mapConfig);\r\nconst basemaps = computed(() => overviewmapStore.basemaps as { [key: string]: RampBasemapConfig });\r\nconst startMinimized = computed(() => overviewmapStore.startMinimized);\r\nlet overviewMap = reactive(new OverviewMapAPI(iApi));\r\nconst minimized = ref(true);\r\nconst hoverOnExtent = ref(false);\r\nconst handlers = reactive<Array<string>>([]);\r\n\r\nonMounted(async () => {\r\n    await iApi.geo.map.viewPromise;\r\n\r\n    _adaptBasemap();\r\n\r\n    await overviewMap.createMap(mapConfig.value!, el.value.querySelector('.overviewmap') as HTMLDivElement);\r\n\r\n    await overviewMap.viewPromise;\r\n    await overviewMap.addMapGraphicLayer();\r\n\r\n    minimized.value = startMinimized.value!;\r\n\r\n    // update the overview map with the current map extent\r\n    let updatePromise = overviewMap.updateOverview(iApi.geo.map.getExtent());\r\n    // update the overview map whenever the extent changes\r\n    handlers.push(\r\n        iApi.event.on(\r\n            GlobalEvents.MAP_EXTENTCHANGE,\r\n            debounce(100, (newExtent: Extent) => {\r\n                updatePromise.then(() => {\r\n                    overviewMap.updateOverview(newExtent);\r\n                });\r\n            })\r\n        )\r\n    );\r\n\r\n    // dev note: if we ever see wild explosions on these two handlers, consider waiting on the view promise.\r\n    //           e.g. overviewMap.viewPromise.then(()=> _adaptBasemap())\r\n\r\n    // adapt the overview map's basemap whenever the main map is created\r\n    handlers.push(\r\n        iApi.event.on(GlobalEvents.MAP_CREATED, () => {\r\n            _adaptBasemap();\r\n        })\r\n    );\r\n\r\n    // adapt the overview map's basemap whenever the main map refreshes\r\n    handlers.push(\r\n        iApi.event.on(GlobalEvents.MAP_REFRESH_END, () => {\r\n            _adaptBasemap();\r\n        })\r\n    );\r\n\r\n    // adapt the overview map's basemap when the main map's basemap changes\r\n    // note that this handler is for the same schema basemap change case where the overview map is using the main map's basemap\r\n    handlers.push(\r\n        iApi.event.on(GlobalEvents.MAP_BASEMAPCHANGE, async (payload: BasemapChange) => {\r\n            if (!payload.schemaChanged && overviewMap.created) {\r\n                if (activeBasemap.value && basemaps.value[activeBasemap.value.tileSchemaId] === undefined) {\r\n                    await overviewMap.removeMapGraphicLayer();\r\n                    await overviewMap.setBasemap(payload.basemapId);\r\n                    await overviewMap.addMapGraphicLayer();\r\n                }\r\n            }\r\n        })\r\n    );\r\n});\r\n\r\nonBeforeUnmount(() => {\r\n    // Remove all event handlers for this component\r\n    handlers.forEach(handler => iApi.event.off(handler));\r\n\r\n    overviewMap.destroyMap();\r\n});\r\n\r\nconst cursorHitTest = async (e: MouseEvent) => {\r\n    hoverOnExtent.value = !minimized.value && (await overviewMap.cursorHitTest(e));\r\n};\r\n\r\nconst mapStyle = () => {\r\n    return {\r\n        height: `${minimized.value ? 48 : 200}px`,\r\n        width: `${minimized.value ? 48 : 200}px`\r\n    };\r\n};\r\n\r\nconst toggleStyle = () => {\r\n    return {\r\n        top: `${minimized.value ? -6 : -3}px`,\r\n        right: `${minimized.value ? -6 : -3}px`,\r\n        transform: `rotate(${minimized.value ? 225 : 45}deg)`\r\n    };\r\n};\r\n\r\n/**\r\n * Adapts the overview map's basemap (and projection) to match that of the main map.\r\n * Will run when the overview map is being set up for the first time, and then whenever the main map refreshes.\r\n *\r\n * When looking for a suitable basemap to use, this method will first check the overview map config for any\r\n * provided basemaps that has a matching tile schema with the main map's basemap.\r\n *\r\n * If no suitable basemap could be found, it will use the same basemap as the main map.\r\n */\r\nconst _adaptBasemap = () => {\r\n    // try to find a suitable basemap\r\n\r\n    if (!activeBasemap.value) {\r\n        console.error('Overview Map could not obtain the basemap config used by the main map');\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const tileSchemaId: string | undefined = activeBasemap.value?.tileSchemaId;\r\n\r\n        if (!tileSchemaId) {\r\n            throw new Error('Overview Map could not obtain the tile schema of the main map');\r\n        }\r\n\r\n        // find a basemap in this tile schema\r\n        const basemap = basemaps.value[tileSchemaId];\r\n\r\n        if (!basemap) {\r\n            throw new Error(\r\n                'Overview Map could not find a suitable basemap that matches the tile schema of the main map'\r\n            );\r\n        }\r\n\r\n        if (overviewMap.created) {\r\n            // set the basemap if the map has been created\r\n            overviewMap.viewPromise.then(() => overviewMap.setBasemap(basemap.id));\r\n        } else {\r\n            // override the intial basemap id in the overview map config\r\n            overviewmapStore.updateInitialBasemap(basemap.id);\r\n        }\r\n    } catch (err) {\r\n        // if we errored above, just use the main map's basemap\r\n\r\n        // do we want this warning? will throw on every map refresh if no basemaps have been provided in the config (which is valid)\r\n        //   JR: no, as it made me investigate what the problem was. If we want to put a warning for an error that is not the\r\n        //       hardcoded one thrown above, we should compare the error text and only console if different. Can also shorten the\r\n        //       above to a unique key of sorts, since it wont be visibile to eyes.\r\n        // console.warn(`${err}. Will default to the main map's basemap.`);\r\n\r\n        // override the intial basemap id in the overview map config\r\n        if (!overviewMap.created) {\r\n            overviewmapStore.updateInitialBasemap(activeBasemap.value.id);\r\n        }\r\n\r\n        // set the basemap once the map loads\r\n        overviewMap.viewPromise.then(() => overviewMap.setBasemap(activeBasemap.value.id));\r\n    }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.overviewmap::before {\r\n    @apply absolute w-0 h-0 top-0 right-0 border-solid;\r\n    border-width: 0 40px 40px 0;\r\n    border-color: transparent #eee transparent transparent;\r\n    content: '';\r\n}\r\n</style>\r\n","export default \"key,enValue,enValid,frValue,frValid\\r\\noverviewmap.expand,Expand Overview,1,Développer l'aperçu,1\\r\\noverviewmap.minimize,Minimize Overview,1,Réduire l'aperçu,1\"","import { OverviewmapAPI } from './api/overviewmap';\r\nimport { type OverviewmapConfig, useOverviewmapStore } from './store/index';\r\nimport OverviewmapV from './overviewmap.vue';\r\nimport messages from './lang/lang.csv?raw';\r\n\r\nclass OverviewmapFixture extends OverviewmapAPI {\r\n    added() {\r\n        // console.log(`[fixture] ${this.id} added`);\r\n\r\n        Object.entries(messages).forEach(value => (<any>this.$iApi.$i18n).mergeLocaleMessage(...value));\r\n\r\n        this._parseConfig(this.config);\r\n        const unwatch = this.$vApp.$watch(\r\n            () => this.config,\r\n            (value: OverviewmapConfig | undefined) => this._parseConfig(value)\r\n        );\r\n\r\n        const { destroy, el } = this.mount(OverviewmapV, {\r\n            app: this.$element\r\n        });\r\n        const innerShell = this.$vApp.$el.getElementsByClassName('inner-shell')[0];\r\n        innerShell.appendChild(el.childNodes[0]);\r\n\r\n        // override the removed method here to get access to scope\r\n        this.removed = () => {\r\n            // console.log(`[fixture] ${this.id} removed`);\r\n            unwatch();\r\n            destroy();\r\n\r\n            const overviewmapStore = useOverviewmapStore(this.$vApp.$pinia);\r\n            overviewmapStore.$reset();\r\n        };\r\n    }\r\n}\r\n\r\nexport default OverviewmapFixture;\r\n"],"names":["OverviewMapAPI","CommonMapAPI","iApi","LayerType","useOverviewmapStore","basemap","bm","expandFactor","markRaw","EsriAPI","esriMouseWheel","esriDoubleClick","esriKeyDown","esriKeyUp","esriDrag","e","observer","entries","entry","overviewGraphic","Graphic","borderColour","borderWidth","areaColour","areaOpacity","areaFill","PolygonStyle","id","bms","mainMapConfig","useConfigStore","bmConfig","Basemap","basemapId","differentSchema","origin","pos","newExtent","zoomPromise","graphic","OverviewmapAPI","FixtureInstance","overviewmapConfig","overviewmapStore","t","useI18n","inject","configStore","el","ref","activeBasemap","computed","mapConfig","basemaps","startMinimized","overviewMap","reactive","minimized","hoverOnExtent","handlers","onMounted","_adaptBasemap","updatePromise","GlobalEvents","debounce","payload","onBeforeUnmount","handler","cursorHitTest","mapStyle","toggleStyle","tileSchemaId","messages","OverviewmapFixture","value","unwatch","destroy","OverviewmapV"],"mappings":"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"}