{"version":3,"file":"index-BcBLOHfY.js","sources":["../../src/fixtures/scrollguard/lang/lang.csv?raw","../../src/fixtures/scrollguard/map-scrollguard.vue","../../src/fixtures/scrollguard/api/scrollguard.ts","../../src/fixtures/scrollguard/index.ts"],"sourcesContent":["export default \"key,enValue,enValid,frValue,frValid\\r\\nscrollguard.instructions,Use ctrl + scroll to zoom the map,1,Utilisez les touches Ctrl et + pour faire un zoom de la carte,1\\r\\n\"","<template>\r\n    <div class=\"sg\" ref=\"scrollGuard\">\r\n        <p class=\"sg-label\">{{ t('scrollguard.instructions') }}</p>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { GlobalEvents, InstanceAPI } from '@/api';\r\nimport { computed, inject, onBeforeUnmount, onMounted, ref } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\nimport { useScrollguardStore } from './store';\r\n\r\nconst scrollguardStore = useScrollguardStore();\r\nconst { t } = useI18n();\r\nconst iApi = inject('iApi') as InstanceAPI;\r\nconst scrollGuard = ref<HTMLElement>();\r\n\r\nconst enabled = computed(() => scrollguardStore.enabled);\r\n\r\nonMounted(() => {\r\n    (iApi.$vApp.$el.querySelector('.inner-shell + .esri-view')! as HTMLElement)?.addEventListener(\r\n        'wheel',\r\n        wheelHandler,\r\n        {\r\n            capture: true\r\n        }\r\n    );\r\n    iApi.event.on(GlobalEvents.MAP_CREATED, () => {\r\n        (iApi.$vApp.$el.querySelector('.inner-shell + .esri-view')! as HTMLElement)?.addEventListener(\r\n            'wheel',\r\n            wheelHandler,\r\n            {\r\n                capture: true\r\n            }\r\n        );\r\n    });\r\n});\r\n\r\nonBeforeUnmount(() => {\r\n    (iApi.$vApp.$el.querySelector('.inner-shell + .esri-view')! as HTMLElement)?.removeEventListener(\r\n        'wheel',\r\n        wheelHandler,\r\n        {\r\n            capture: true\r\n        }\r\n    );\r\n});\r\n\r\nconst wheelHandler = (event: WheelEvent) => {\r\n    // If the scrollguard is disabled, do not block scrolling.\r\n    if (!enabled.value) return;\r\n\r\n    const scrollGuardClassList = scrollGuard.value!.classList;\r\n\r\n    // prevent scroll unless ctrlKey is depressed\r\n    if (!event.ctrlKey) {\r\n        event.stopPropagation();\r\n        scrollGuardClassList.remove('sg-scrolling');\r\n        scrollGuardClassList.add('sg-active');\r\n\r\n        // remove scroll guard notification after two seconds\r\n        window.setTimeout(() => scrollGuardClassList.remove('sg-active'), 2000);\r\n    } else {\r\n        scrollGuardClassList.remove('sg-active');\r\n        scrollGuardClassList.add('sg-scrolling');\r\n    }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.sg {\r\n    transition: opacity ease-in-out;\r\n    background-color: rgba(0, 0, 0, 0.45);\r\n    text-align: center;\r\n\r\n    position: absolute;\r\n    padding: 0px;\r\n    margin: 0px;\r\n    border-width: 0px;\r\n    width: 100%;\r\n    height: 100%;\r\n    left: 0px;\r\n    top: 0px;\r\n\r\n    transition-duration: 0.8s;\r\n\r\n    opacity: 0;\r\n    pointer-events: none !important;\r\n    z-index: 100;\r\n\r\n    &.sg-active {\r\n        opacity: 1;\r\n        transition-duration: 0.3s;\r\n    }\r\n\r\n    &.sg-scrolling {\r\n        transition-duration: 0.3s;\r\n    }\r\n\r\n    .sg-label {\r\n        font-size: 1em * 1.5;\r\n        color: white;\r\n        position: relative;\r\n        margin: 0;\r\n        top: 50% !important;\r\n        transform: translateY(-50%);\r\n    }\r\n}\r\n</style>\r\n","import { FixtureInstance } from '@/api';\r\nimport { useScrollguardStore } from '../store';\r\nimport type { ScrollguardConfig } from '../store';\r\n\r\nexport class ScrollguardAPI extends FixtureInstance {\r\n    /**\r\n     * Enables the scrollguard on the map if set to true.\r\n     *\r\n     * @param {boolean} value\r\n     * @memberof ScrollguardAPI\r\n     */\r\n    setEnabled(value: boolean) {\r\n        useScrollguardStore(this.$vApp.$pinia).enabled = value;\r\n    }\r\n\r\n    /**\r\n     * Parses the scrollguard config JSON snippet from the config file and save to the fixture store.\r\n     *\r\n     * @param {ScrollguardConfig} [ScrollguardConfig]\r\n     * @memberof ScrollguardAPI\r\n     */\r\n    _parseConfig(scrollguardConfig?: ScrollguardConfig) {\r\n        useScrollguardStore(this.$vApp.$pinia).enabled = scrollguardConfig?.enabled || false;\r\n    }\r\n\r\n    get config(): ScrollguardConfig | undefined {\r\n        return super.config;\r\n    }\r\n}\r\n","import messages from './lang/lang.csv?raw';\r\nimport ScrollguardV from './map-scrollguard.vue';\r\nimport { ScrollguardAPI } from './api/scrollguard';\r\nimport { type ScrollguardConfig, useScrollguardStore } from './store';\r\n\r\nclass ScrollguardFixture extends ScrollguardAPI {\r\n    added(): void {\r\n        // console.log(`[fixture] ${this.id} added`);\r\n        // Manually add lang entries to i18n\r\n        Object.entries(messages).forEach(value => (<any>this.$iApi.$i18n).mergeLocaleMessage(...value));\r\n\r\n        this._parseConfig(this.config);\r\n        const unwatch = this.$vApp.$watch(\r\n            () => this.config,\r\n            (value: ScrollguardConfig | undefined) => this._parseConfig(value)\r\n        );\r\n\r\n        const { destroy, el } = this.mount(ScrollguardV, {\r\n            app: this.$element\r\n        });\r\n\r\n        const innerShell = this.$vApp.$el.getElementsByClassName('inner-shell')[0];\r\n        innerShell.appendChild(el.childNodes[0]);\r\n\r\n        // override the removed method here to get access to scope\r\n        this.removed = () => {\r\n            // console.log(`[fixture] ${this.id} removed`);\r\n            unwatch();\r\n            destroy();\r\n\r\n            const scrollguardStore = useScrollguardStore(this.$vApp.$pinia);\r\n            scrollguardStore.$reset();\r\n        };\r\n    }\r\n}\r\n\r\nexport default ScrollguardFixture;\r\n"],"names":["messages","scrollguardStore","useScrollguardStore","t","useI18n","iApi","inject","scrollGuard","ref","enabled","computed","onMounted","wheelHandler","GlobalEvents","onBeforeUnmount","event","scrollGuardClassList","ScrollguardAPI","FixtureInstance","value","scrollguardConfig","ScrollguardFixture","unwatch","destroy","el","ScrollguardV"],"mappings":";AAAA,MAAAA,IAAe,EAAC,IAAK,EAAC,4BAA2B,oCAAmC,GAAE,IAAK,EAAC,4BAA2B,gEAA+D,EAAC;;;ACYvL,UAAMC,IAAmBC,EAAoB,GACvC,EAAE,GAAAC,EAAE,IAAIC,EAAQ,GAChBC,IAAOC,EAAO,MAAM,GACpBC,IAAcC,EAAiB,GAE/BC,IAAUC,EAAS,MAAMT,EAAiB,OAAO;AAEvD,IAAAU,EAAU,MAAM;AACX,MAAAN,EAAK,MAAM,IAAI,cAAc,2BAA2B,GAAoB;AAAA,QACzE;AAAA,QACAO;AAAA,QACA;AAAA,UACI,SAAS;AAAA,QAAA;AAAA,MAEjB,GACAP,EAAK,MAAM,GAAGQ,EAAa,aAAa,MAAM;AACzC,QAAAR,EAAK,MAAM,IAAI,cAAc,2BAA2B,GAAoB;AAAA,UACzE;AAAA,UACAO;AAAA,UACA;AAAA,YACI,SAAS;AAAA,UAAA;AAAA,QAEjB;AAAA,MAAA,CACH;AAAA,IAAA,CACJ,GAEDE,EAAgB,MAAM;AACjB,MAAAT,EAAK,MAAM,IAAI,cAAc,2BAA2B,GAAoB;AAAA,QACzE;AAAA,QACAO;AAAA,QACA;AAAA,UACI,SAAS;AAAA,QAAA;AAAA,MAEjB;AAAA,IAAA,CACH;AAEK,UAAAA,IAAe,CAACG,MAAsB;AAEpC,UAAA,CAACN,EAAQ,MAAO;AAEd,YAAAO,IAAuBT,EAAY,MAAO;AAG5C,MAACQ,EAAM,WAQPC,EAAqB,OAAO,WAAW,GACvCA,EAAqB,IAAI,cAAc,MARvCD,EAAM,gBAAgB,GACtBC,EAAqB,OAAO,cAAc,GAC1CA,EAAqB,IAAI,WAAW,GAGpC,OAAO,WAAW,MAAMA,EAAqB,OAAO,WAAW,GAAG,GAAI;AAAA,IAK9E;;;;;;;;;;AC9DO,MAAMC,UAAuBC,EAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOhD,WAAWC,GAAgB;AACvB,IAAAjB,EAAoB,KAAK,MAAM,MAAM,EAAE,UAAUiB;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASrD,aAAaC,GAAuC;AAChD,IAAAlB,EAAoB,KAAK,MAAM,MAAM,EAAE,UAAUkB,GAAmB,WAAW;AAAA,EAAA;AAAA,EAGnF,IAAI,SAAwC;AACxC,WAAO,MAAM;AAAA,EAAA;AAErB;ACvBA,MAAMC,UAA2BJ,EAAe;AAAA,EAC5C,QAAc;AAGH,WAAA,QAAQjB,CAAQ,EAAE,QAAQ,CAAAmB,MAAe,KAAK,MAAM,MAAO,mBAAmB,GAAGA,CAAK,CAAC,GAEzF,KAAA,aAAa,KAAK,MAAM;AACvB,UAAAG,IAAU,KAAK,MAAM;AAAA,MACvB,MAAM,KAAK;AAAA,MACX,CAACH,MAAyC,KAAK,aAAaA,CAAK;AAAA,IACrE,GAEM,EAAE,SAAAI,GAAS,IAAAC,EAAA,IAAO,KAAK,MAAMC,GAAc;AAAA,MAC7C,KAAK,KAAK;AAAA,IAAA,CACb;AAGD,IADmB,KAAK,MAAM,IAAI,uBAAuB,aAAa,EAAE,CAAC,EAC9D,YAAYD,EAAG,WAAW,CAAC,CAAC,GAGvC,KAAK,UAAU,MAAM;AAET,MAAAF,EAAA,GACAC,EAAA,GAEiBrB,EAAoB,KAAK,MAAM,MAAM,EAC7C,OAAO;AAAA,IAC5B;AAAA,EAAA;AAER;"}