{"version":3,"file":"screen-D4lTwhyt.js","sources":["../../src/fixtures/geosearch/search-bar.vue","../../src/fixtures/geosearch/top-filters.vue","../../src/fixtures/geosearch/bottom-filters.vue","../../src/fixtures/geosearch/loading-bar.vue","../../src/fixtures/geosearch/screen.vue"],"sourcesContent":["<template>\r\n    <div class=\"rv-geosearch-bar relative h-26 mx-8 mb-8\">\r\n        <input\r\n            type=\"text\"\r\n            class=\"border-b w-full text-base py-8 outline-none focus:shadow-outline border-gray-600 h-full min-w-0\"\r\n            :class=\"{ 'border-yellow-500': badChars }\"\r\n            :placeholder=\"t('geosearch.searchText')\"\r\n            :value=\"searchVal\"\r\n            @input=\"onSearchTermChange(($event.target as HTMLInputElement).value)\"\r\n            @keyup.enter=\"\r\n                if (panelStore.mobileView) {\r\n                    ($event.target as HTMLInputElement).blur();\r\n                }\r\n            \"\r\n            :aria-label=\"t('geosearch.searchText')\"\r\n            @keypress.enter.prevent\r\n            enterkeyhint=\"done\"\r\n        />\r\n        <span class=\"absolute inset-y-0 right-8 grid w-10 place-content-center\">\r\n            <button\r\n                v-if=\"badChars\"\r\n                class=\"cursor-default\"\r\n                :aria-label=\"t('geosearch.badChars', { chars: badChars })\"\r\n                :content=\"t('geosearch.badChars', { chars: badChars })\"\r\n                v-tippy\r\n            >\r\n                âš \r\n            </button>\r\n        </span>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { computed } from 'vue';\r\nimport { useGeosearchStore } from './store';\r\nimport { debounce } from 'throttle-debounce';\r\nimport { useI18n } from 'vue-i18n';\r\nimport { usePanelStore } from '@/stores/panel';\r\n\r\nconst { t } = useI18n();\r\nconst geosearchStore = useGeosearchStore();\r\nconst panelStore = usePanelStore();\r\n\r\nconst searchVal = computed(() => geosearchStore.searchVal);\r\nconst badChars = computed<string>(() =>\r\n    ['\"', '$', '!', '*', '+', '?', '^', '{', '}', '(', ')', '|', '[', ']']\r\n        .filter(bc => geosearchStore.searchVal.includes(bc))\r\n        .join('')\r\n);\r\nconst setSearchTerm = (value: string) => {\r\n    geosearchStore.setSearchTerm(value);\r\n    geosearchStore.setSearchRegex(value);\r\n};\r\n\r\nconst onSearchTermChange = debounce(500, (searchTerm: string) => {\r\n    setSearchTerm(searchTerm);\r\n});\r\n</script>\r\n\r\n<style lang=\"scss\" scoped></style>\r\n","<template>\r\n    <div class=\"rv-geosearch-top-filters sm:flex items-center w-full ml-8 mb-14\" ref=\"el\">\r\n        <div class=\"w-fit inline-block sm:w-1/2 h-26 mb-8 sm:mb-0 pr-16 sm:pr-0\">\r\n            <select\r\n                class=\"border-b border-b-gray-600 w-full h-full py-0 cursor-pointer\"\r\n                :value=\"queryParams.province\"\r\n                :aria-label=\"t('geosearch.filters.province')\"\r\n                v-on:change=\"\r\n                    setProvince({\r\n                        province: ($event.target as HTMLSelectElement).value\r\n                    })\r\n                \"\r\n                v-truncate\r\n                v-tippy=\"{\r\n                    content: t('select.items'),\r\n                    trigger: 'manual',\r\n                    placement: 'top-start'\r\n                }\"\r\n                ref=\"selectProvince\"\r\n            >\r\n                <option value=\"\" disabled hidden v-truncate>\r\n                    {{ t('geosearch.filters.province') }}\r\n                </option>\r\n                <option v-for=\"province in provinces\" v-bind:key=\"province.code\" v-truncate>\r\n                    {{ province.name }}\r\n                </option>\r\n            </select>\r\n        </div>\r\n        <div class=\"sm:w-1/2 h-26 sm:mx-16 flex\">\r\n            <select\r\n                class=\"border-b border-b-gray-600 w-full h-full py-0 cursor-pointer max-w-150\"\r\n                :value=\"queryParams.type\"\r\n                :aria-label=\"t('geosearch.filters.type')\"\r\n                v-on:change=\"\r\n                    setType({\r\n                        type: ($event.target as HTMLSelectElement).value\r\n                    })\r\n                \"\r\n                v-truncate\r\n                v-tippy=\"{\r\n                    content: t('select.items'),\r\n                    trigger: 'manual',\r\n                    placement: 'top-start'\r\n                }\"\r\n                ref=\"selectFilter\"\r\n            >\r\n                <option value=\"\" disabled hidden>\r\n                    {{ t('geosearch.filters.type') }}\r\n                </option>\r\n                <option v-for=\"t in types\" :key=\"t.code\">\r\n                    {{ t.name }}\r\n                </option>\r\n            </select>\r\n            <button\r\n                type=\"button\"\r\n                class=\"text-gray-500 w-1/8 h-24 pl-8 pr-16 sm:pr-8 hover:text-black disabled:cursor-default disabled:text-gray-400\"\r\n                :disabled=\"!queryParams.type && !queryParams.province\"\r\n                v-on:click=\"clearFilters\"\r\n                :content=\"t('geosearch.filters.clear')\"\r\n                :aria-label=\"t('geosearch.filters.clear')\"\r\n                v-tippy=\"{ placement: 'bottom' }\"\r\n            >\r\n                <div class=\"rv-geosearch-icon\">\r\n                    <svg class=\"fill-current w-18 h-18\" viewBox=\"0 0 23 21\">\r\n                        <path\r\n                            d=\"M 14.7574,20.8284L 17.6036,17.9822L 14.7574,15.1716L 16.1716,13.7574L 19.0178,16.568L 21.8284,13.7574L 23.2426,15.1716L 20.432,17.9822L 23.2426,20.8284L 21.8284,22.2426L 19.0178,19.3964L 16.1716,22.2426L 14.7574,20.8284 Z M 2,2L 19.9888,2.00001L 20,2.00001L 20,2.01122L 20,3.99999L 19.9207,3.99999L 13,10.9207L 13,22.909L 8.99999,18.909L 8.99999,10.906L 2.09405,3.99999L 2,3.99999L 2,2 Z \"\r\n                        />\r\n                    </svg>\r\n                </div>\r\n            </button>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport type { InstanceAPI } from '@/api';\r\nimport { computed, inject, onBeforeMount, onBeforeUnmount, onMounted, ref, watch } from 'vue';\r\nimport type { GeosearchAPI } from './api/geosearch';\r\nimport { useGeosearchStore } from './store';\r\nimport type { QueryParams } from './store';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nconst { t } = useI18n();\r\nconst iApi = inject<InstanceAPI>('iApi')!;\r\nconst geosearchStore = useGeosearchStore();\r\nconst el = ref<Element>();\r\nconst selectProvince = ref<Element>();\r\nconst selectFilter = ref<Element>();\r\n\r\nconst provinces = ref<Array<any>>([]);\r\nconst types = ref<Array<any>>([]);\r\nconst watchers = ref<Array<Function>>([]);\r\n\r\nconst queryParams = computed<QueryParams>(() => geosearchStore.queryParams as QueryParams);\r\nconst language = computed<string>(() => iApi.language);\r\n\r\nconst setProvince = (payload: { province?: string; forceReRun?: boolean }) => geosearchStore.setProvince(payload);\r\nconst setType = (payload: { type?: string; forceReRun?: boolean }) => geosearchStore.setType(payload);\r\n\r\n// Called when the `clear filters` button is clicked. Clears province and type filters.\r\nconst clearFilters = () => {\r\n    setProvince({});\r\n    setType({});\r\n};\r\n\r\n// Fetches the most up to date provinces and types.\r\n// Because of the way the GSservice is structured, on language switch, we need to make a new GSservice in the updated language\r\n// and then re fetch all the provinces and types again.\r\n// TODO: In the future, we should look to refactor the code for this fixture to improve clarity and reduce the number of API calls.\r\nconst updateProvincesAndTypes = () => {\r\n    geosearchStore.initService(iApi.language, iApi.fixture.get<GeosearchAPI>('geosearch').config);\r\n\r\n    // convert current province and type selection to new lang\r\n    const queryProvCode = provinces.value.find(prov => queryParams.value.province === prov.name)?.code;\r\n    const queryTypeCode = types.value.find(type => queryParams.value.type === type.name)?.code;\r\n\r\n    // populate province and type selection lists in new lang\r\n    geosearchStore.getProvinces.then(provs => {\r\n        provinces.value = provs;\r\n        setProvince({\r\n            province: provs.find(prov => prov.code === queryProvCode)?.name,\r\n            forceReRun: true\r\n        });\r\n    });\r\n    geosearchStore.getTypes.then(typs => {\r\n        types.value = typs;\r\n        setType({\r\n            type: typs.find(type => type.code === queryTypeCode)?.name,\r\n            forceReRun: true\r\n        });\r\n    });\r\n};\r\n\r\nconst blurProvince = () => {\r\n    (selectProvince.value as any)._tippy.hide();\r\n};\r\nconst blurFilter = () => {\r\n    (selectFilter.value as any)._tippy.hide();\r\n};\r\nconst keyupProvince = (e: Event) => {\r\n    const evt = e as KeyboardEvent;\r\n    if (evt.key === 'Tab' && selectProvince.value?.matches(':focus') && navigator.userAgent.includes('Firefox')) {\r\n        (selectProvince.value as any)._tippy.show();\r\n    } else {\r\n        (selectProvince.value as any)._tippy.hide();\r\n    }\r\n};\r\nconst keyupFilter = (e: Event) => {\r\n    const evt = e as KeyboardEvent;\r\n    if (evt.key === 'Tab' && selectFilter.value?.matches(':focus') && navigator.userAgent.includes('Firefox')) {\r\n        (selectFilter.value as any)._tippy.show();\r\n    } else {\r\n        (selectFilter.value as any)._tippy.hide();\r\n    }\r\n};\r\n\r\nonBeforeMount(() => {\r\n    updateProvincesAndTypes();\r\n    watchers.value.push(watch(language, updateProvincesAndTypes));\r\n});\r\n\r\nonMounted(() => {\r\n    selectProvince.value?.addEventListener('blur', blurProvince);\r\n    selectProvince.value?.addEventListener('keyup', keyupProvince);\r\n    selectFilter.value?.addEventListener('blur', blurFilter);\r\n    selectFilter.value?.addEventListener('keyup', keyupFilter);\r\n});\r\n\r\nonBeforeUnmount(() => {\r\n    watchers.value.forEach(unwatch => unwatch());\r\n\r\n    selectProvince.value?.removeEventListener('blur', blurProvince);\r\n    selectProvince.value?.removeEventListener('keyup', keyupProvince);\r\n    selectFilter.value?.removeEventListener('blur', blurFilter);\r\n    selectFilter.value?.removeEventListener('keyup', keyupFilter);\r\n});\r\n</script>\r\n\r\n<style lang=\"scss\" scoped></style>\r\n","<template>\r\n    <div class=\"rv-geosearch-bottom-filters\">\r\n        <div class=\"bg-white\">\r\n            <label class=\"ml-8 cursor-pointer font-normal\"\r\n                ><input\r\n                    type=\"checkbox\"\r\n                    class=\"border-2 mx-8 border-gray-600 cursor-pointer\"\r\n                    :checked=\"resultsVisible\"\r\n                    @change=\"updateMapExtent(($event.target as HTMLInputElement).checked)\"\r\n                    @keypress.enter.prevent\r\n                />{{ t('geosearch.visible') }}</label\r\n            >\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { GlobalEvents } from '@/api/internal';\r\nimport type { InstanceAPI } from '@/api/internal';\r\nimport type { Extent } from '@/geo/api';\r\nimport { useGeosearchStore } from './store';\r\nimport { debounce } from 'throttle-debounce';\r\n\r\nimport { computed, inject, onBeforeUnmount, onMounted } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nconst { t } = useI18n();\r\nconst iApi = inject<InstanceAPI>('iApi')!;\r\nconst geosearchStore = useGeosearchStore();\r\n\r\nconst resultsVisible = computed<boolean>(() => geosearchStore.resultsVisible);\r\n\r\nconst onMapExtentChange = debounce(300, (newExtent: Extent) => {\r\n    latLongExtent(newExtent).then((e: Extent) => {\r\n        setMapExtent({\r\n            extent: e,\r\n            visible: resultsVisible.value\r\n        });\r\n    });\r\n});\r\n\r\nconst setMapExtent = (mapExtent: any) => {\r\n    geosearchStore.setMapExtent(mapExtent);\r\n};\r\n\r\n// Computes the extent information.\r\nconst latLongExtent = async (ext: Extent): Promise<Extent> => {\r\n    if (ext.sr.wkid === 4326) {\r\n        return ext;\r\n    } else {\r\n        // var needed to get around casting complaints with async syntax\r\n        const pExt = await iApi.geo.proj.projectGeometry(4326, ext);\r\n        return pExt as Extent;\r\n    }\r\n};\r\n\r\n// Called when the checkbox is pressed. Updates the geosearch extent.\r\nconst updateMapExtent = (visible: boolean): void => {\r\n    latLongExtent(iApi.geo.map.getExtent()).then(e => {\r\n        setMapExtent({\r\n            extent: e,\r\n            visible: visible\r\n        });\r\n    });\r\n};\r\n\r\nonMounted(() => {\r\n    // TODO decide if this event handler should go into the default ramp events, or remain as hard-bound to geosearch.\r\n    //      hard-bound means no one outside can un-hook and replace with a different reaction.\r\n    //      going default means the handler function needs to be public / on the geosearch api.\r\n    //      ^ not entirely true. a person can still unhook the event, however our public documentation will\r\n    //        have no mention of the event handler name. A person would need to discover it.\r\n    // TODO also consider if this handler requires debounce because MAP_EXTENTCHANGE fires at a high rate\r\n    iApi.event.on(GlobalEvents.MAP_EXTENTCHANGE, onMapExtentChange, 'geosearch_map_extent');\r\n});\r\n\r\n/**\r\n * This is called while the component is still functional right before everything is removed.\r\n */\r\nonBeforeUnmount(() => {\r\n    iApi.event.off('geosearch_map_extent');\r\n});\r\n</script>\r\n\r\n<style></style>\r\n","<template>\r\n    <div class=\"w-full h-6 relative overflow-hidden rounded-full indeterminate mb-14\">\r\n        <div class=\"h-full progressbar bg-blue-800 rounded-full top-0\" aria-valuemin=\"0\" aria-valuemax=\"100\">\r\n            <span class=\"flex items-center h-full\">\r\n                <slot></slot>\r\n            </span>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\"></script>\r\n\r\n<style scoped>\r\n@keyframes progress-indeterminate {\r\n    0% {\r\n        width: 30%;\r\n        left: -40%;\r\n    }\r\n    60% {\r\n        left: 100%;\r\n        width: 100%;\r\n    }\r\n    to {\r\n        left: 100%;\r\n        width: 0;\r\n    }\r\n}\r\n.progressbar {\r\n    transition: width 0.25s ease;\r\n}\r\n.indeterminate .progressbar {\r\n    animation: progress-indeterminate 1.4s ease infinite;\r\n}\r\n</style>\r\n","<template>\r\n    <panel-screen :panel=\"panel\">\r\n        <template #header>{{ t('geosearch.title') }}</template>\r\n\r\n        <template #content>\r\n            <div class=\"flex flex-col h-full\">\r\n                <geosearch-bar></geosearch-bar>\r\n                <geosearch-top-filters></geosearch-top-filters>\r\n                <loading-bar class=\"flex-none\" v-if=\"loadingResults\"></loading-bar>\r\n                <div class=\"text-red-900 text-xs px-8 mb-10\" v-if=\"failedServices.length > 0 && !loadingResults\">\r\n                    {{\r\n                        t('geosearch.serviceError', {\r\n                            services: failedServices.join(', ')\r\n                        })\r\n                    }}\r\n                </div>\r\n                <div\r\n                    class=\"px-8 mb-10 py-8 flex-grow text-wrap border-y border-gray-600 overflow-y-auto\"\r\n                    v-if=\"cleanedSearchVal && searchResults.length === 0 && !loadingResults\"\r\n                >\r\n                    <span class=\"relative h-48\"\r\n                        >{{ t('geosearch.noResults')\r\n                        }}<span class=\"font-bold text-blue-600\">\"{{ cleanedSearchVal }}\"</span></span\r\n                    >\r\n                </div>\r\n                <ul\r\n                    class=\"rv-results-list flex-grow mb-5 border-t border-b border-gray-600 overflow-y-auto\"\r\n                    v-focus-list\r\n                    v-if=\"searchResults.length > 0\"\r\n                >\r\n                    <li class=\"relative h-56\" v-for=\"(result, idx) in searchResults\" v-bind:key=\"idx\">\r\n                        <button\r\n                            type=\"button\"\r\n                            class=\"absolute inset-0 h-full w-full hover:bg-gray-300 default-focus-style\"\r\n                            @click=\"zoomIn(result)\"\r\n                            v-focus-item=\"'show-truncate'\"\r\n                            style=\"border-bottom: 1px solid lightgray\"\r\n                            truncate-trigger\r\n                        >\r\n                            <div class=\"rv-result-description px-8\">\r\n                                <div\r\n                                    class=\"flex-1 text-left truncate font-bold leading-tight\"\r\n                                    v-truncate=\"{\r\n                                        externalTrigger: true,\r\n                                        options: { placement: 'top-start' }\r\n                                    }\"\r\n                                >\r\n                                    <span v-html=\"highlightSearchTerm(result.name, result.location.province)\"></span>\r\n                                    <span v-if=\"result.location.province\" class=\"text-gray-600 text-sm\">\r\n                                        {{\r\n                                            result.location.city\r\n                                                ? ' ' + result.location.city + ', ' + result.location.province.abbr\r\n                                                : ' ' + result.location.province.abbr\r\n                                        }}</span\r\n                                    >\r\n                                    <span v-if=\"result.type\" class=\"hidden\">; </span>\r\n                                    <span v-if=\"result.type\" class=\"text-sm font-normal\"><br />{{ result.type }}</span>\r\n                                </div>\r\n                            </div>\r\n                        </button>\r\n                    </li>\r\n                </ul>\r\n                <geosearch-bottom-filters class=\"mt-auto\"></geosearch-bottom-filters>\r\n            </div>\r\n        </template>\r\n    </panel-screen>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { computed, inject } from 'vue';\r\nimport type { PropType } from 'vue';\r\nimport type { InstanceAPI, PanelInstance } from '@/api';\r\nimport { Polygon, SpatialReference } from '@/geo/api';\r\nimport { useGeosearchStore } from './store';\r\nimport GeosearchBar from './search-bar.vue';\r\nimport GeosearchTopFilters from './top-filters.vue';\r\nimport GeosearchBottomFilters from './bottom-filters.vue';\r\nimport LoadingBar from './loading-bar.vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nconst { t } = useI18n();\r\nconst iApi = inject<InstanceAPI>('iApi')!;\r\nconst geosearchStore = useGeosearchStore();\r\n\r\ndefineProps({\r\n    panel: {\r\n        type: Object as PropType<PanelInstance>\r\n    }\r\n});\r\n\r\nconst cleanedSearchVal = computed<string>(() => geosearchStore.searchVal.replace(/[\"!*$+?^{}()|[\\]\\\\]/g, '').trim());\r\nconst searchResults = computed<Array<any>>(() => geosearchStore.searchResults);\r\nconst loadingResults = computed<boolean>(() => geosearchStore.loadingResults);\r\nconst failedServices = computed<string[]>(() => geosearchStore.failedServices);\r\n\r\n// zoom in to a clicked result\r\nconst zoomIn = (result: any) => {\r\n    let zoom = new Polygon(\r\n        'zoomies',\r\n        [\r\n            [\r\n                [result.bbox[0], result.bbox[1]],\r\n                [result.bbox[0], result.bbox[3]],\r\n                [result.bbox[2], result.bbox[3]],\r\n                [result.bbox[2], result.bbox[1]],\r\n                [result.bbox[0], result.bbox[1]]\r\n            ]\r\n        ],\r\n        SpatialReference.latLongSR(),\r\n        true\r\n    );\r\n    iApi.geo.map.zoomMapTo(zoom);\r\n};\r\n\r\n// highlight the search term in each listed geosearch result\r\nconst highlightSearchTerm = (name: string, province: any) => {\r\n    // wrap matched search term in results inside span with styling\r\n    const highlightedResult = name.replace(\r\n        new RegExp(`${geosearchStore.searchRegex}`, 'gi'),\r\n        match => '<span class=\"font-bold text-blue-600\">' + match + '</span>'\r\n    );\r\n    // add comma to new highlighted result if a province/location is provided\r\n    return province ? highlightedResult + ',' : highlightedResult;\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped></style>\r\n"],"names":["t","useI18n","geosearchStore","useGeosearchStore","panelStore","usePanelStore","searchVal","computed","badChars","bc","setSearchTerm","value","onSearchTermChange","debounce","searchTerm","iApi","inject","el","ref","selectProvince","selectFilter","provinces","types","watchers","queryParams","language","setProvince","payload","setType","clearFilters","updateProvincesAndTypes","queryProvCode","prov","queryTypeCode","type","provs","typs","blurProvince","blurFilter","keyupProvince","e","keyupFilter","onBeforeMount","watch","onMounted","onBeforeUnmount","unwatch","resultsVisible","onMapExtentChange","newExtent","latLongExtent","setMapExtent","mapExtent","ext","updateMapExtent","visible","GlobalEvents","_hoisted_2","_sfc_render","_ctx","_cache","_openBlock","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_3","cleanedSearchVal","searchResults","loadingResults","failedServices","zoomIn","result","zoom","Polygon","SpatialReference","highlightSearchTerm","name","province","highlightedResult","match"],"mappings":"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"}