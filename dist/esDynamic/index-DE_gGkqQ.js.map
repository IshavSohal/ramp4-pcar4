{"version":3,"file":"index-DE_gGkqQ.js","sources":["../../src/fixtures/appbar/store/appbar-state.ts","../../src/fixtures/appbar/default-button.vue","../../src/fixtures/appbar/divider.vue","../../node_modules/popper-max-size-modifier/dist/popper-max-size-modifier.esm.js","../../src/fixtures/appbar/more-button.vue","../../src/components/notification-center/appbar-button.vue","../../src/fixtures/appbar/appbar.vue","../../src/fixtures/appbar/api/appbar.ts","../../src/fixtures/appbar/lang/lang.csv?raw","../../src/fixtures/appbar/index.ts"],"sourcesContent":["export type AppbarItemSet = { [name: string]: string | AppbarItemInstance };\r\n\r\nexport interface AppbarFixtureConfig {\r\n    items: (string | AppbarItemConfig)[][];\r\n}\r\n\r\nexport interface AppbarItemConfig {\r\n    /**\r\n     * ID of this Appbar item.\r\n     *\r\n     * @type {string}\r\n     * @memberof AppbarItemConfig\r\n     */\r\n    id: string;\r\n\r\n    /**\r\n     * ID of the component of this appbar item.\r\n     *\r\n     * @type {string}\r\n     * @memberof AppbarItemConfig\r\n     */\r\n    componentId?: string;\r\n\r\n    /**\r\n     * The options for the displayed appbar button.\r\n     *\r\n     * @type {object}\r\n     * @memberof AppbarItemConfig\r\n     */\r\n    options?: object;\r\n}\r\n\r\nexport class AppbarItemInstance implements AppbarItemConfig {\r\n    id: string;\r\n\r\n    /**\r\n     * Optional object containing any options to be passed to the appbar component.\r\n     *\r\n     * @type {object}\r\n     * @memberof AppbarItemInstance\r\n     */\r\n    options: object;\r\n\r\n    /**\r\n     * An actual id of the appbar Vue component to use when rendering in the template.\r\n     *\r\n     * @type {string}\r\n     * @memberof AppbarItemInstance\r\n     */\r\n    componentId?: string;\r\n\r\n    constructor(value: AppbarItemConfig) {\r\n        const params = {\r\n            options: {},\r\n            ...value\r\n        };\r\n        ({ id: this.id, options: this.options, componentId: this.componentId } = params);\r\n\r\n        // this should work too, but it doesn't;\r\n        // ({ id: this.id, options: this.options } = { options: {}, ...(typeof value === 'string' ? { id: value} : value) });\r\n    }\r\n}\r\n","<template>\r\n    <appbar-button v-if=\"panelButton\" :onClickFunction=\"onClickFunction\" :tooltip=\"t(panelButton.tooltip)\" :id=\"panelId\"\r\n        ><div\r\n            class=\"default fill-current w-24 h-24 ml-8 sm:ml-20\"\r\n            :class=\"{ 'ml-20': overflow }\"\r\n            v-html=\"panelButton.icon\"\r\n        ></div\r\n    ></appbar-button>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport type { InstanceAPI } from '@/api';\r\nimport { computed, inject } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nconst { t } = useI18n();\r\nconst iApi = inject<InstanceAPI>('iApi');\r\n\r\nconst props = defineProps({\r\n    panelId: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    minimize: {\r\n        type: Boolean,\r\n        default: false\r\n    },\r\n    overflow: {\r\n        type: Boolean\r\n    }\r\n});\r\n\r\nconst panelButton = computed(() => iApi?.panel.get(props.panelId)?.button);\r\n\r\nconst onClickFunction = () => {\r\n    if (props.minimize) {\r\n        iApi?.panel.toggleMinimize(props.panelId);\r\n    } else {\r\n        iApi?.panel.toggle(props.panelId);\r\n    }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped></style>\r\n","<template>\r\n    <span class=\"border-b p-0 self-center w-2/3\"></span>\r\n</template>\r\n\r\n<script setup lang=\"ts\"></script>\r\n\r\n<style lang=\"scss\" scoped>\r\nspan {\r\n    height: 0 !important;\r\n}\r\n</style>\r\n","import { detectOverflow } from '@popperjs/core';\n\nvar maxSize = {\n  name: 'maxSize',\n  enabled: true,\n  phase: 'main',\n  requiresIfExists: ['offset', 'preventOverflow', 'flip'],\n  fn: function fn(_ref) {\n    var state = _ref.state,\n        name = _ref.name,\n        options = _ref.options;\n    var overflow = detectOverflow(state, options);\n\n    var _ref2 = state.modifiersData.preventOverflow || {\n      x: 0,\n      y: 0\n    },\n        x = _ref2.x,\n        y = _ref2.y;\n\n    var _state$rects$popper = state.rects.popper,\n        width = _state$rects$popper.width,\n        height = _state$rects$popper.height;\n\n    var _state$placement$spli = state.placement.split('-'),\n        basePlacement = _state$placement$spli[0];\n\n    var widthProp = basePlacement === 'left' ? 'left' : 'right';\n    var heightProp = basePlacement === 'top' ? 'top' : 'bottom';\n    state.modifiersData[name] = {\n      width: width - overflow[widthProp] - x,\n      height: height - overflow[heightProp] - y\n    };\n  }\n};\n\nexport default maxSize;\n","<template>\r\n    <div class=\"appbar-item relative inset-x-0 w-full text-center\" ref=\"el\">\r\n        <!-- this is for appbar overflow button  -->\r\n        <button\r\n            type=\"button\"\r\n            class=\"text-gray-400 w-full h-48 focus:outline-none hover:text-white\"\r\n            @click=\"popperSetUp()\"\r\n            v-focus-item\r\n            :content=\"t('appbar.more')\"\r\n            :aria-label=\"t('appbar.more')\"\r\n            v-tippy=\"{ placement: 'right-end' }\"\r\n            ref=\"dropdownTrigger\"\r\n        >\r\n            <svg class=\"fill-current w-24 h-24 m-auto\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\r\n                <path d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n                <path\r\n                    d=\"M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"\r\n                />\r\n            </svg>\r\n        </button>\r\n        <!-- this is for appbar overflow menu  -->\r\n        <div\r\n            v-show=\"open\"\r\n            id=\"dropdown\"\r\n            class=\"dropdown shadow-md border border-gray:200 absolute w-64 flex flex-col bg-white rounded\"\r\n            ref=\"dropdown\"\r\n        >\r\n            <slot></slot>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { inject, nextTick, onBeforeUnmount, onMounted, ref, watch } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\nimport type { InstanceAPI } from '@/api/internal';\r\n\r\nimport type { Placement, Modifier, State } from '@popperjs/core';\r\nimport { createPopper } from '@popperjs/core';\r\nimport maxSize from 'popper-max-size-modifier';\r\n\r\nconst { t } = useI18n();\r\nconst iApi = inject('iApi') as InstanceAPI;\r\n\r\nconst props = defineProps({\r\n    position: {\r\n        type: String,\r\n        default: 'right-end'\r\n    },\r\n    popperOptions: {\r\n        type: Object,\r\n        default() {\r\n            return {};\r\n        }\r\n    },\r\n    numItems: {\r\n        type: Number,\r\n        default: 1\r\n    },\r\n\r\n    renderWatch: {\r\n        type: Number,\r\n        default: 0\r\n    }\r\n});\r\nconst emit = defineEmits(['updateParent']);\r\n\r\nfunction updateParent() {\r\n    emit('updateParent');\r\n}\r\n\r\nconst open = ref(false);\r\nconst numRenders = ref(0);\r\nconst el = ref<Element>();\r\nconst dropdownTrigger = ref<Element>();\r\nconst dropdown = ref<HTMLElement>();\r\n\r\nfunction rerender() {\r\n    updateParent();\r\n    nextTick(() => {\r\n        popperSetUp();\r\n        open.value = !open.value;\r\n    });\r\n}\r\n\r\nwatch(\r\n    () => props.renderWatch,\r\n    () => {\r\n        rerender();\r\n    }\r\n);\r\n\r\nconst popperSetUp = () => {\r\n    open.value = !open.value;\r\n\r\n    const innerShell = iApi.$vApp.$el.querySelector('.inner-shell');\r\n\r\n    const applyMaxSize = {\r\n        name: 'applyMaxSize',\r\n        enabled: true,\r\n        phase: 'beforeWrite',\r\n        requires: ['maxSize'],\r\n        fn({ state }: { state: State }) {\r\n            // The `maxSize` modifier provides this data\r\n            const { width } = state.modifiersData.maxSize;\r\n\r\n            state.styles.popper = {\r\n                ...state.styles.popper,\r\n                maxWidth: `${width}px`,\r\n                maxHeight: `${innerShell.offsetHeight - 45}px`\r\n            };\r\n\r\n            const realHeight = Math.min(\r\n                props.numItems <= 0 ? 0 : 55 + 44 * (props.numItems - 1),\r\n                innerShell.offsetHeight - 45\r\n            );\r\n\r\n            state.styles.popper.height = `${realHeight}px`;\r\n            if (dropdown?.value?.offsetHeight) {\r\n                dropdown.value.style.height = `${realHeight}px`;\r\n            }\r\n\r\n            state.styles.popper.overflowY = 'auto';\r\n            state.styles.popper.overflowX = 'hidden';\r\n        }\r\n    };\r\n\r\n    if (dropdownTrigger.value && dropdown.value) {\r\n        numRenders.value++;\r\n        createPopper(dropdownTrigger.value as Element, dropdown.value as HTMLElement, {\r\n            placement: (props.position || 'right-end') as Placement,\r\n            modifiers: [\r\n                {\r\n                    ...maxSize,\r\n                    options: {\r\n                        boundary: innerShell\r\n                    }\r\n                },\r\n                applyMaxSize as Modifier<'applyMaxsize', {}>,\r\n                {\r\n                    name: 'offset',\r\n                    options: {\r\n                        offset: [0, 5]\r\n                    }\r\n                },\r\n                {\r\n                    name: 'preventOverflow',\r\n                    enabled: true,\r\n                    options: {\r\n                        boundary: innerShell\r\n                    }\r\n                }\r\n            ],\r\n            ...props.popperOptions\r\n        });\r\n    }\r\n\r\n    // if this is the first time the popper is being rendered, re-render it\r\n    if (numRenders.value === 1) rerender();\r\n};\r\n\r\nonMounted(() => {\r\n    window.addEventListener(\r\n        'click',\r\n        event => {\r\n            if (event.target instanceof HTMLElement && !el.value?.contains(event.target)) {\r\n                open.value = false;\r\n            }\r\n        },\r\n        { capture: true }\r\n    );\r\n});\r\n\r\nonBeforeUnmount(() => {\r\n    window.removeEventListener(\r\n        'click',\r\n        event => {\r\n            if (event.target instanceof HTMLElement && !el.value?.contains(event.target)) {\r\n                open.value = false;\r\n            }\r\n        },\r\n        { capture: true }\r\n    );\r\n});\r\n\r\ndefineExpose({\r\n    rerender\r\n});\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.dropdown {\r\n    @apply left-full bottom-0;\r\n}\r\n\r\nbutton {\r\n    outline: none !important;\r\n\r\n    &.focused {\r\n        @apply bg-blue-900 text-white;\r\n    }\r\n}\r\n</style>\r\n","<template>\r\n    <appbar-button :onClickFunction=\"onClick\" :tooltip=\"t('notifications.title')\" class=\"notification-button\" id=\"\">\r\n        <!-- https://fonts.google.com/icons?selected=Material%20Icons%3Anotifications -->\r\n        <svg class=\"fill-current w-24 h-24 mx-8 sm:mx-20\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\r\n            <path\r\n                d=\"M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z\"\r\n            />\r\n        </svg>\r\n        <span class=\"number absolute top-1 right-2 text-white w-18 rounded-full\" v-if=\"number && number > 0\">{{\r\n            number\r\n        }}</span>\r\n    </appbar-button>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { inject, computed } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\nimport { useNotificationStore } from '@/stores/notification';\r\nimport type { InstanceAPI } from '@/api';\r\n\r\nconst notificationStore = useNotificationStore();\r\nconst { t } = useI18n();\r\nconst iApi = inject('iApi') as InstanceAPI;\r\n\r\nconst number = computed(() => notificationStore.notificationNumber);\r\n\r\nconst onClick = () => {\r\n    iApi.panel.toggle('notifications');\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.number {\r\n    background: red;\r\n    font-size: 0.8em;\r\n}\r\n\r\n.notification-button {\r\n    position: absolute !important;\r\n}\r\n</style>\r\n","<template>\r\n    <div\r\n        class=\"absolute top-0 left-0 bottom-28 flex flex-col w-40 pointer-events-auto appbar z-50 sm:z-20 bg-black-75 sm:w-64 sm:bottom-38\"\r\n        v-focus-list\r\n        :content=\"t('panels.controls.items')\"\r\n        v-tippy=\"{\r\n            trigger: 'manual',\r\n            touch: false,\r\n            placement: 'top-end',\r\n            popperOptions: {\r\n                placement: 'top',\r\n                modifiers: [\r\n                    { name: 'preventOverflow', options: { altAxis: true } },\r\n                    { name: 'flip', options: { fallbackPlacements: ['top'] } }\r\n                ]\r\n            }\r\n        }\"\r\n        ref=\"el\"\r\n    >\r\n        <template v-for=\"(subArray, index) in items\">\r\n            <template v-for=\"(item, index2) in subArray\">\r\n                <default-button\r\n                    v-if=\"typeof item === 'string' && overflowFlags[`${item}-${index2}`] !== true\"\r\n                    :key=\"`${item}-${index2}-default`\"\r\n                    :panelId=\"item\"\r\n                    class=\"appbar-item h-48\"\r\n                    :class=\"`identifier-${item}-${index2}`\"\r\n                ></default-button>\r\n                <component\r\n                    v-else-if=\"overflowFlags[`${item}-${index2}`] !== true\"\r\n                    :is=\"item.componentId\"\r\n                    :key=\"`${item}-${index2}-custom`\"\r\n                    :options=\"item.options\"\r\n                    class=\"appbar-item h-48\"\r\n                    :id=\"item.id\"\r\n                    :class=\"`identifier-${item}-${index2}`\"\r\n                ></component>\r\n            </template>\r\n            <divider\r\n                class=\"appbar-item\"\r\n                :class=\"`identifier-divider-${index}`\"\r\n                v-if=\"overflowFlags[`divider-${index}`] !== true\"\r\n                :key=\"`${subArray}-${index}-default`\"\r\n            />\r\n        </template>\r\n\r\n        <default-button\r\n            v-for=\"item in temporaryItems?.filter(t => overflowFlags[`${t}-temp`] !== true)\"\r\n            :panelId=\"item\"\r\n            :minimize=\"true\"\r\n            :key=\"`${item}-temp`\"\r\n            :class=\"`identifier-${item}-temp`\"\r\n            class=\"appbar-item h-48\"\r\n        ></default-button>\r\n\r\n        <more-button\r\n            id=\"more\"\r\n            v-show=\"overflow\"\r\n            :numItems=\"numberOverflow\"\r\n            :renderWatch=\"popperRerender\"\r\n            @update-parent=\"rerender\"\r\n        >\r\n            <template v-slot:default>\r\n                <template v-for=\"(subArray, index) in items\" :key=\"index\">\r\n                    <template v-for=\"(item, index2) in subArray\">\r\n                        <default-button\r\n                            v-if=\"typeof item === 'string' && overflowFlags[`${item}-${index2}`]\"\r\n                            :key=\"`${item}-${index2}-default`\"\r\n                            :panelId=\"item\"\r\n                            class=\"text-black hover:bg-gray my-4 h-36\"\r\n                            :class=\"`identifier-${item}-${index2}`\"\r\n                            overflow\r\n                        ></default-button>\r\n                        <component\r\n                            v-else-if=\"overflowFlags[`${item}-${index2}`]\"\r\n                            :is=\"item!.componentId\"\r\n                            :key=\"`${item}-${index2}-custom`\"\r\n                            :options=\"item.options\"\r\n                            :id=\"item.id\"\r\n                            class=\"appbar-item h-48\"\r\n                            :class=\"`identifier-${item}-${index2}`\"\r\n                        ></component>\r\n                    </template>\r\n                    <divider\r\n                        class=\"border-black my-4\"\r\n                        :class=\"`identifier-divider-${index}`\"\r\n                        v-if=\"overflowFlags[`divider-${index}`]\"\r\n                    ></divider>\r\n                </template>\r\n\r\n                <default-button\r\n                    v-for=\"item in temporaryItems?.filter(t => overflowFlags[`${t}-temp`])\"\r\n                    :panelId=\"item\"\r\n                    :minimize=\"true\"\r\n                    :key=\"`${item}-temp`\"\r\n                    :class=\"`identifier-${item}-temp`\"\r\n                    class=\"text-black hover:bg-gray my-4 h-36\"\r\n                    overflow\r\n                ></default-button>\r\n            </template>\r\n        </more-button>\r\n        <notifications-appbar-button class=\"appbar-item bottom-48 h-48 sm:display-none\"></notifications-appbar-button>\r\n\r\n        <!-- TODO: disabled this button for now, revist this when we need it in the future -->\r\n        <!-- <nav-button id=\"nav\"></nav-button> -->\r\n        <about-ramp-dropdown\r\n            class=\"absolute bottom-0 h-40 sm:display-none w-full text-center\"\r\n            position=\"right-start\"\r\n        ></about-ramp-dropdown>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { computed, getCurrentInstance, nextTick, onBeforeMount, onBeforeUnmount, onMounted, onUpdated, ref } from 'vue';\r\nimport DefaultButton from './default-button.vue';\r\nimport Divider from './divider.vue';\r\nimport MoreButton from './more-button.vue';\r\n//import NavAppbarButtonV from './nav-button.vue';\r\nimport NotificationsAppbarButton from '@/components/notification-center/appbar-button.vue';\r\nimport AboutRampDropdown from '@/components/about-ramp/about-ramp-dropdown.vue';\r\nimport { usePanelStore } from '@/stores/panel';\r\nimport { useAppbarStore } from './store';\r\nimport { useI18n } from 'vue-i18n';\r\n\r\nconst panelStore = usePanelStore();\r\nconst appbarStore = useAppbarStore();\r\nconst numberOverflow = ref(0);\r\nconst popperRerender = ref(0);\r\n\r\nconst items = computed<any>(() => appbarStore.visible);\r\nconst temporaryItems = computed<string[] | undefined>(() => appbarStore.temporary);\r\nconst { t } = useI18n();\r\nconst overflow = ref(false);\r\nconst overflowFlags = ref<{\r\n    [key: string]: boolean;\r\n}>({});\r\n\r\nconst el = ref<Element>();\r\n\r\n// When the popper (from the more-button component) is rendered for the first time, it tends to\r\n// overlap the top border of the `inner-shell` component. Re-rendering the appbar (as well as recreating\r\n// the popper) seems to resolve this. The same issue tends to occur when opening a new (non-default) panel,\r\n// then opening the popper. When closing a non-default panel (ex. grid, details) while the popper is open, there\r\n// would have been empty space in the popper (due to the way that the popper height is set in the more-button\r\n// component). Re-rendering the appbar also fixes this. Note: this solution isn't really tackling the root cause\r\n// of the issue, and seems inefficient. If a better solution exists, feel free to implement it and remove this\r\n// function (as well as the other code involved in re-rendering)\r\nconst rerender = () => {\r\n    nextTick(() => {\r\n        const instance = getCurrentInstance();\r\n        instance?.proxy?.$forceUpdate();\r\n    });\r\n};\r\n\r\nconst blurEvent = () => {\r\n    (el.value as any)._tippy.hide();\r\n};\r\n\r\nconst keyupEvent = (e: Event) => {\r\n    const evt = e as KeyboardEvent;\r\n    if (evt.key === 'Tab' && el.value?.matches(':focus')) {\r\n        (el.value as any)._tippy.show();\r\n    }\r\n};\r\n\r\nonMounted(() => {\r\n    el.value?.addEventListener('blur', blurEvent);\r\n\r\n    el.value?.addEventListener('keyup', keyupEvent);\r\n});\r\n\r\nonBeforeMount(() => {\r\n    const instance = getCurrentInstance();\r\n    window.addEventListener('resize', () => instance?.proxy?.$forceUpdate());\r\n});\r\n\r\nonBeforeUnmount(() => {\r\n    const instance = getCurrentInstance();\r\n    window.removeEventListener('resize', () => instance?.proxy?.$forceUpdate());\r\n\r\n    el.value?.removeEventListener('blur', blurEvent);\r\n\r\n    el.value?.removeEventListener('keyup', keyupEvent);\r\n});\r\n\r\nonUpdated(() => {\r\n    nextTick(() => {\r\n        const element: Element = el.value!;\r\n        let key: string | undefined = undefined;\r\n        let children: Element[] = [...element.children];\r\n        let bound: number | undefined = children[children.length - 2].getBoundingClientRect().top;\r\n        if (!panelStore.mobileView) {\r\n            bound = element.getBoundingClientRect().bottom - 38;\r\n        }\r\n        let dropdown: Element | null = element.querySelector('#dropdown');\r\n        // check positions of appbar buttons\r\n        for (let i = children.length - 4; i >= 0; i--) {\r\n            let bottom: number = children[i].getBoundingClientRect().bottom;\r\n            if (bound && dropdown && (bottom > bound || (overflow.value && bottom + 56 > bound))) {\r\n                children[i].classList.forEach(cl => {\r\n                    if (cl.includes('identifier')) {\r\n                        key = cl.slice(11);\r\n                    }\r\n                });\r\n                if (key) {\r\n                    overflowFlags.value[key] = true;\r\n                    if (!(key as String).includes('divider')) {\r\n                        numberOverflow.value++;\r\n                    }\r\n                    popperRerender.value++;\r\n                }\r\n                if (!overflow.value) overflow.value = true;\r\n            } else if (bottom !== 0) {\r\n                break;\r\n            }\r\n        }\r\n        // check position of more button\r\n        let more: Element | null = element.querySelector('#more');\r\n        let moreBottom = more!.getBoundingClientRect().bottom;\r\n        key = undefined;\r\n        if (\r\n            overflow.value &&\r\n            bound &&\r\n            more &&\r\n            dropdown &&\r\n            moreBottom !== 0 &&\r\n            (moreBottom <= bound - 56 || (dropdown.childElementCount == 1 && moreBottom <= bound))\r\n        ) {\r\n            // dropdown.classList.add(`max-h-${moreBottom - 8}`);\r\n            let buttonsRemaining: number = dropdown.childElementCount;\r\n            let index: number = 0;\r\n            while (moreBottom <= bound - 56 || buttonsRemaining == 1) {\r\n                let item: Element | null = dropdown.children[index];\r\n                if (item) {\r\n                    item.classList.forEach(cl => {\r\n                        if (cl.includes('identifier')) {\r\n                            key = cl.slice(11);\r\n                        }\r\n                    });\r\n                    if (key) {\r\n                        overflowFlags.value[key] = false;\r\n                        if (!(key as String).includes('divider')) {\r\n                            numberOverflow.value--;\r\n                        }\r\n                    }\r\n                    moreBottom += 48;\r\n                    buttonsRemaining -= 1;\r\n                    index += 1;\r\n                }\r\n                if (buttonsRemaining === 0) {\r\n                    overflow.value = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // clean up flags for items that were removed.\r\n        Object.keys(overflowFlags.value).forEach((key: string) => {\r\n            if (!element.querySelector(`.identifier-${key}`)) {\r\n                delete overflowFlags.value[key];\r\n                if (!key.includes('divider')) {\r\n                    numberOverflow.value = Math.max(0, numberOverflow.value - 1);\r\n                }\r\n                popperRerender.value++;\r\n            }\r\n        });\r\n    });\r\n});\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.appbar {\r\n    backdrop-filter: blur(5px);\r\n\r\n    .appbar-item {\r\n        @apply my-4 text-gray-400 first:mt-8 hover:text-white;\r\n    }\r\n}\r\n</style>\r\n","import { FixtureInstance } from '@/api';\r\n\r\nimport { AppbarItemInstance } from '../store';\r\n\r\nimport type { AppbarFixtureConfig, AppbarItemSet } from '../store';\r\n\r\nimport { useAppbarStore } from '../store';\r\n\r\nexport class AppbarAPI extends FixtureInstance {\r\n    /**\r\n     * Returns `AppbarFixtureConfig` section of the global config file.\r\n     *\r\n     * @readonly\r\n     * @type {AppbarFixtureConfig}\r\n     * @memberof AppbarFixture\r\n     */\r\n    get config(): AppbarFixtureConfig | undefined {\r\n        return super.config;\r\n    }\r\n\r\n    /**\r\n     * Parses the appbar config JSON snippet from the config file and save resulting objects to the fixture store.\r\n     *\r\n     * @param {AppbarFixtureConfig} [appbarConfig]\r\n     * @returns\r\n     * @memberof AppbarAPI\r\n     */\r\n    _parseConfig(appbarConfig?: AppbarFixtureConfig) {\r\n        if (!appbarConfig) {\r\n            return;\r\n        }\r\n\r\n        const appbarStore = useAppbarStore(this.$vApp.$pinia);\r\n\r\n        let config;\r\n        // wrap the appbar config if needed so it is always a 2d array\r\n        if (!Array.isArray(appbarConfig.items[0])) {\r\n            config = [appbarConfig.items];\r\n        } else {\r\n            config = appbarConfig.items;\r\n        }\r\n\r\n        const appbarItems: (string | AppbarItemInstance)[][] = [];\r\n\r\n        config.forEach((appbarItemList: any[]) => {\r\n            appbarItems.push(\r\n                appbarItemList.map(item => {\r\n                    if (typeof item === 'string') {\r\n                        return item;\r\n                    }\r\n                    return new AppbarItemInstance(item);\r\n                })\r\n            );\r\n        });\r\n\r\n        // save appbar items as a collection to the store\r\n        // they are saves as a set for easy by-id access\r\n        appbarStore.items = appbarItems.flat().reduce<AppbarItemSet>((map, item) => {\r\n            map[item instanceof AppbarItemInstance ? item.id : item] = item;\r\n            return map;\r\n        }, {});\r\n\r\n        // save an ordered list of item ids to use when rendering components\r\n        appbarStore.order = appbarItems.map(subArray =>\r\n            subArray.map(item => (item instanceof AppbarItemInstance ? item.id : item))\r\n        );\r\n\r\n        this._validateItems();\r\n    }\r\n\r\n    /**\r\n     * Checks if components specified as appbar items are registered or not.\r\n     *\r\n     * @memberof AppbarAPI\r\n     */\r\n    _validateItems() {\r\n        const appbarStore = useAppbarStore(this.$vApp.$pinia);\r\n        // get the ordered list of items and see if any of them are registered\r\n        appbarStore.order.flat().forEach(id => {\r\n            if (typeof appbarStore.items[id] === 'string') {\r\n                return;\r\n            }\r\n            // check for components with the id\r\n            [id].some(v => {\r\n                if (this.$iApi.fixture.exists(v) && !appbarStore.items[id]) {\r\n                    // if an item is registered globally, save the name of the registered component\r\n                    (appbarStore.items[id] as unknown as AppbarItemInstance).componentId = `${v}-appbar-button`;\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n","export default \"key,enValue,enValid,frValue,frValid\\r\\nappbar.navigation,Navigation,1,Navigation,1\\r\\nappbar.more,More,1,Plus,1\\r\\nnavigation.export,Export,1,Exporter,1\\r\\nnavigation.map.export,Export Map,1,Exporter la Carte,1\\r\\n\"","import AppbarV from './appbar.vue';\r\nimport { AppbarAPI } from './api/appbar';\r\nimport { useAppbarStore } from './store';\r\nimport type { AppbarFixtureConfig } from './store';\r\nimport { GlobalEvents } from '@/api';\r\nimport messages from './lang/lang.csv?raw';\r\n\r\n// \"It's a trap!\" -- Admiral Appbar\r\n\r\nclass AppbarFixture extends AppbarAPI {\r\n    initialized() {\r\n        // console.log(`[fixture] ${this.id} initialized`);\r\n    }\r\n\r\n    async added() {\r\n        // console.log(`[fixture] ${this.id} added`);\r\n\r\n        // merge in translations since this has no panel\r\n        Object.entries(messages).forEach(value => (<any>this.$iApi.$i18n).mergeLocaleMessage(...value));\r\n\r\n        const { destroy, el } = this.mount(AppbarV, {\r\n            app: this.$element\r\n        });\r\n        const innerShell = this.$vApp.$el.getElementsByClassName('inner-shell')[0];\r\n        innerShell.insertBefore(el.childNodes[0], innerShell.querySelector('.panel-stack'));\r\n\r\n        this._parseConfig(this.config);\r\n        const unwatch = this.$vApp.$watch(\r\n            () => this.config,\r\n            (value: AppbarFixtureConfig | undefined) => this._parseConfig(value)\r\n        );\r\n\r\n        const eventHandlers: string[] = [];\r\n\r\n        // since components used in appbar can be registered after this point, listen to the global component registration event and re-validate items\r\n        // TODO revisit. this seems to be self-contained to the appbar fixture, so ideally can stay as is and not worry about events api.\r\n        eventHandlers.push(\r\n            this.$iApi.event.on(GlobalEvents.COMPONENT, () => {\r\n                this._parseConfig(this.config);\r\n            })\r\n        );\r\n\r\n        this.removed = () => {\r\n            const appbarStore = useAppbarStore(this.$vApp.$pinia);\r\n            // console.log(`[fixture] ${this.id} removed`);\r\n            unwatch();\r\n            eventHandlers.forEach(h => this.$iApi.event.off(h));\r\n\r\n            // gracefully remove all buttons first (in case anything is watching for button removal)\r\n            const items: any = { ...appbarStore.items };\r\n            const tempItems: string[] = [...appbarStore.temporary];\r\n            Object.keys(items).forEach(item => appbarStore.removeButton(item));\r\n            tempItems.forEach(item => appbarStore.removeButton(item));\r\n            destroy();\r\n\r\n            // reset the store\r\n            appbarStore.$reset();\r\n        };\r\n    }\r\n}\r\n\r\nexport default AppbarFixture;\r\n"],"names":["AppbarItemInstance","value","params","t","useI18n","iApi","inject","props","__props","panelButton","computed","onClickFunction","_sfc_render","_ctx","_cache","maxSize","_ref","state","name","options","overflow","detectOverflow","_ref2","x","y","_state$rects$popper","width","height","_state$placement$spli","basePlacement","widthProp","heightProp","emit","__emit","updateParent","open","ref","numRenders","el","dropdownTrigger","dropdown","rerender","nextTick","popperSetUp","watch","innerShell","applyMaxSize","realHeight","createPopper","onMounted","event","onBeforeUnmount","__expose","notificationStore","useNotificationStore","number","onClick","panelStore","usePanelStore","appbarStore","useAppbarStore","numberOverflow","popperRerender","items","temporaryItems","overflowFlags","getCurrentInstance","blurEvent","keyupEvent","e","onBeforeMount","instance","onUpdated","element","key","children","bound","bottom","cl","more","moreBottom","buttonsRemaining","index","item","AppbarAPI","FixtureInstance","appbarConfig","config","appbarItems","appbarItemList","map","subArray","id","v","messages","AppbarFixture","destroy","AppbarV","unwatch","eventHandlers","GlobalEvents","h","tempItems"],"mappings":"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","x_google_ignoreList":[3]}