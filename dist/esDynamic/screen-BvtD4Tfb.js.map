{"version":3,"file":"screen-BvtD4Tfb.js","sources":["../../src/fixtures/basemap/item.vue","../../src/fixtures/basemap/screen.vue"],"sourcesContent":["<template>\r\n    <div class=\"mb-10\">\r\n        <button\r\n            class=\"basemap-item-button bg-gray-300 w-full h-full\"\r\n            type=\"button\"\r\n            :aria-label=\"t('basemap.select')\"\r\n            @click=\"selectBasemap(basemap)\"\r\n            v-focus-item\r\n        >\r\n            <!-- thumbnail -->\r\n            <div>\r\n                <div\r\n                    class=\"flex hover:opacity-50 basemap-item-image basemap-item-container\"\r\n                    :class=\"!basemap.hideThumbnail ? 'h-180' : 'h-30'\"\r\n                >\r\n                    <!-- text-only mode -->\r\n                    <div v-if=\"basemap.hideThumbnail\" class=\"w-full h-30 hidden\" />\r\n                    <!-- Else if, use basemap thumbnail url -->\r\n                    <img\r\n                        v-else-if=\"basemap.thumbnailUrl\"\r\n                        class=\"w-full h-180\"\r\n                        :alt=\"basemap.altText\"\r\n                        :src=\"basemap.thumbnailUrl\"\r\n                    />\r\n                    <!-- Else if, Use tileSchema tile urls -->\r\n                    <div\r\n                        v-for=\"layer in basemap.layers\"\r\n                        :key=\"layer.id\"\r\n                        v-else-if=\"\r\n                            tileSchema.thumbnailTileUrls &&\r\n                            tileSchema.thumbnailTileUrls.length > 0 &&\r\n                            basemap.layers.every(layer => layer.layerType === 'esri-tile')\r\n                        \"\r\n                        class=\"flex basemap-item-inner h-180\"\r\n                    >\r\n                        <img\r\n                            class=\"w-full\"\r\n                            v-for=\"(url, idx) in tileSchema.thumbnailTileUrls\"\r\n                            :alt=\"basemap.altText\"\r\n                            :src=\"layer.url + url\"\r\n                            :key=\"idx\"\r\n                        />\r\n                    </div>\r\n                    <!-- Else, Use placeholder image -->\r\n                    <img\r\n                        v-else\r\n                        class=\"w-full bg-white h-180\"\r\n                        :alt=\"basemap.altText\"\r\n                        src=\"https://openclipart.org/image/800px/275366\"\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            <div\r\n                class=\"absolute flex w-full bg-black text-white h-30 bottom-6 items-center\"\r\n                :class=\"basemap.hideThumbnail && basemap.id === selectedBasemap.id ? 'opacity-85' : 'opacity-75'\"\r\n            >\r\n                <div class=\"pl-5\" v-truncate>\r\n                    <span>{{ basemap.name }}</span>\r\n                </div>\r\n\r\n                <div class=\"ml-auto pr-5\">\r\n                    <a\r\n                        @click.stop\r\n                        @keydown.enter.space.prevent\r\n                        :content=\"basemap.description\"\r\n                        v-tippy=\"{\r\n                            placement: 'bottom',\r\n                            trigger: 'manual'\r\n                        }\"\r\n                        ref=\"basemapInfo\"\r\n                    >\r\n                        <svg class=\"fill-current w-16 h-16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\r\n                            <path d=\"M0 0h24v24H0z\" fill=\"none\"></path>\r\n                            <path\r\n                                d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z\"\r\n                            />\r\n                        </svg>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n\r\n            <div\r\n                class=\"rv-basemap-check absolute top-0 right-0\"\r\n                v-if=\"basemap.id === selectedBasemap.id && !basemap.hideThumbnail\"\r\n            >\r\n                <svg class=\"fill-current w-25 h-25 relative\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\r\n                    <path d=\"M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z\" />\r\n                </svg>\r\n            </div>\r\n        </button>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { computed, inject, onBeforeUnmount, onMounted, ref, useTemplateRef } from 'vue';\r\nimport type { PropType } from 'vue';\r\nimport type { RampBasemapConfig, RampTileSchemaConfig } from '@/geo/api';\r\n\r\nimport type { InstanceAPI } from '@/api';\r\nimport { useI18n } from 'vue-i18n';\r\nimport { useConfigStore } from '@/stores/config';\r\n\r\nconst { t } = useI18n();\r\nconst iApi = inject<InstanceAPI>('iApi');\r\nconst configStore = useConfigStore();\r\nconst basemapInfo = useTemplateRef('basemapInfo');\r\nconst infoTooltipToggle = ref(false);\r\n\r\ndefineProps({\r\n    basemap: {\r\n        type: Object as PropType<RampBasemapConfig>,\r\n        required: true\r\n    },\r\n    tileSchema: {\r\n        type: Object as PropType<RampTileSchemaConfig>,\r\n        required: true\r\n    }\r\n});\r\n\r\nconst selectedBasemap = computed<RampBasemapConfig>(() => configStore.activeBasemapConfig as RampBasemapConfig);\r\n\r\nconst selectBasemap = (basemap: any) => {\r\n    if (basemap.id !== selectedBasemap.value.id) {\r\n        iApi?.geo.map.setBasemap(basemap.id);\r\n    }\r\n};\r\n\r\nconst keyupEvent = (e: Event) => {\r\n    const evt = e as KeyboardEvent;\r\n    if (evt.key === 'Tab' && basemapInfo.value?.matches(':focus')) {\r\n        infoTooltipToggle.value = true;\r\n        (basemapInfo.value as any)._tippy.show();\r\n    }\r\n};\r\n\r\nconst blurEvent = () => {\r\n    infoTooltipToggle.value = false;\r\n    (basemapInfo.value as any)._tippy.hide();\r\n};\r\n\r\nconst mobileTouchEvent = (e: Event) => {\r\n    // ensures that this only handles touch events on a mobile device\r\n    if ((e as PointerEvent).pointerType === 'touch') {\r\n        infoTooltipToggle.value = !infoTooltipToggle.value;\r\n        if (infoTooltipToggle.value) {\r\n            (basemapInfo.value as any)._tippy.show();\r\n        } else {\r\n            (basemapInfo.value as any)._tippy.hide();\r\n        }\r\n    }\r\n};\r\n\r\nonMounted(() => {\r\n    basemapInfo.value?.addEventListener('mouseenter', () => (basemapInfo.value as any)._tippy.show());\r\n    basemapInfo.value?.addEventListener('mouseleave', () => (basemapInfo.value as any)._tippy.hide());\r\n    basemapInfo.value?.addEventListener('click', mobileTouchEvent);\r\n    basemapInfo.value?.addEventListener('keyup', keyupEvent);\r\n    basemapInfo.value?.addEventListener('blur', blurEvent);\r\n});\r\n\r\nonBeforeUnmount(() => {\r\n    basemapInfo.value?.removeEventListener('mouseenter', () => (basemapInfo.value as any)._tippy.show());\r\n    basemapInfo.value?.removeEventListener('mouseleave', () => (basemapInfo.value as any)._tippy.hide());\r\n    basemapInfo.value?.removeEventListener('click', mobileTouchEvent);\r\n    basemapInfo.value?.removeEventListener('focus', () => keyupEvent);\r\n    basemapInfo.value?.removeEventListener('blur', () => blurEvent);\r\n});\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.basemap-item-container {\r\n    display: grid;\r\n    place-items: center;\r\n    grid-template-areas: 'inner-div';\r\n}\r\n\r\n.basemap-item-inner {\r\n    grid-area: inner-div;\r\n}\r\n\r\n[focus-list]:focus [focus-item].focused.basemap-item-button {\r\n    border: solid black 2px;\r\n}\r\n\r\n[focus-list]:focus [focus-item].focused.basemap-item-button .basemap-item-image {\r\n    opacity: 0.5;\r\n}\r\n\r\n.rv-basemap-check {\r\n    &::before {\r\n        content: '';\r\n        position: absolute;\r\n        border-top: 50px solid rgba(250, 250, 250, 1);\r\n        border-left: 50px solid transparent;\r\n        right: 0;\r\n        top: 0;\r\n    }\r\n}\r\n</style>\r\n","<template>\r\n    <panel-screen :panel=\"panel\">\r\n        <template #header>\r\n            {{ t('basemap.title') }}\r\n        </template>\r\n\r\n        <template #content>\r\n            <div\r\n                v-focus-list\r\n                :content=\"t('panels.controls.items')\"\r\n                v-tippy=\"{\r\n                    trigger: 'manual',\r\n                    placement: 'top-end',\r\n                    touch: false,\r\n                    maxWidth: 190\r\n                }\"\r\n                ref=\"el\"\r\n            >\r\n                <div class=\"h-600 overflow-y-auto\">\r\n                    <div class=\"mx-5\" v-for=\"(tileSchema, idx) in tileSchemas\" :key=\"tileSchema.id\">\r\n                        <!-- use mt-5 if it's the first basemap title schema, use mt-36 otherwise -->\r\n                        <div :class=\"(idx === 0 ? 'mt-5' : 'mt-36') + ' flex mb-5'\">\r\n                            <h3 class=\"font-bold text-xl\" v-truncate>\r\n                                {{ tileSchema.name }}\r\n                            </h3>\r\n                        </div>\r\n\r\n                        <ul class=\"border-t border-b border-gray-600\" v-if=\"basemaps.length > 0\">\r\n                            <li v-for=\"basemap in filterBasemaps(tileSchema.id)\" :key=\"basemap.id\">\r\n                                <basemap-item\r\n                                    :basemap=\"basemap\"\r\n                                    :tileSchema=\"tileSchema\"\r\n                                    class=\"block relative overflow-hidden\"\r\n                                ></basemap-item>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </template>\r\n    </panel-screen>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { onMounted, onBeforeUnmount, ref, useTemplateRef } from 'vue';\r\nimport type { PropType } from 'vue';\r\n\r\nimport BasemapItem from './item.vue';\r\nimport type { RampBasemapConfig, RampMapConfig, RampTileSchemaConfig } from '@/geo/api';\r\nimport type { PanelInstance } from '@/api';\r\nimport { useI18n } from 'vue-i18n';\r\nimport { useConfigStore } from '@/stores/config';\r\n\r\nconst { t } = useI18n();\r\nconst configStore = useConfigStore();\r\ndefineProps({\r\n    panel: {\r\n        type: Object as PropType<PanelInstance>\r\n    }\r\n});\r\n\r\nconst el = useTemplateRef('el');\r\nconst tileSchemas = ref<Array<RampTileSchemaConfig>>([]);\r\nconst basemaps = ref<Array<RampBasemapConfig>>([]);\r\nconst keyupEvent = (e: Event) => {\r\n    const evt = e as KeyboardEvent;\r\n    if (evt.key === 'Tab' && el.value?.matches(':focus')) {\r\n        (el.value as any)._tippy.show();\r\n    }\r\n};\r\nconst blurEvent = () => {\r\n    (el.value as any)._tippy.hide();\r\n};\r\n\r\nonMounted(() => {\r\n    const mapConfig = configStore.config.map as RampMapConfig;\r\n    tileSchemas.value = mapConfig.tileSchemas;\r\n    basemaps.value = mapConfig.basemaps;\r\n    el.value?.addEventListener('blur', blurEvent);\r\n    el.value?.addEventListener('keyup', keyupEvent);\r\n});\r\n\r\nonBeforeUnmount(() => {\r\n    el.value?.removeEventListener('blur', blurEvent);\r\n    el.value?.removeEventListener('keyup', keyupEvent);\r\n});\r\n\r\n// filter out all the basemaps that match the current schema\r\nconst filterBasemaps = (schemaId: string) =>\r\n    basemaps.value.filter((basemap: RampBasemapConfig) => basemap.tileSchemaId === schemaId);\r\n</script>\r\n\r\n<style lang=\"scss\" scoped></style>\r\n"],"names":["t","useI18n","iApi","inject","configStore","useConfigStore","basemapInfo","useTemplateRef","infoTooltipToggle","ref","selectedBasemap","computed","selectBasemap","basemap","keyupEvent","e","blurEvent","mobileTouchEvent","onMounted","onBeforeUnmount","el","tileSchemas","basemaps","mapConfig","filterBasemaps","schemaId"],"mappings":";;;;;;;;;;;;;;;;;;;;AAuGM,UAAA,EAAE,GAAAA,EAAE,IAAIC,EAAQ,GAChBC,IAAOC,EAAoB,MAAM,GACjCC,IAAcC,EAAe,GAC7BC,IAAcC,EAAe,aAAa,GAC1CC,IAAoBC,EAAI,EAAK,GAa7BC,IAAkBC,EAA4B,MAAMP,EAAY,mBAAwC,GAExGQ,IAAgB,CAACC,MAAiB;AACpC,MAAIA,EAAQ,OAAOH,EAAgB,MAAM,MACrCR,GAAM,IAAI,IAAI,WAAWW,EAAQ,EAAE;AAAA,IAE3C,GAEMC,IAAa,CAACC,MAAa;AAE7B,MADYA,EACJ,QAAQ,SAAST,EAAY,OAAO,QAAQ,QAAQ,MACxDE,EAAkB,QAAQ,IACzBF,EAAY,MAAc,OAAO,KAAK;AAAA,IAE/C,GAEMU,IAAY,MAAM;AACpB,MAAAR,EAAkB,QAAQ,IACzBF,EAAY,MAAc,OAAO,KAAK;AAAA,IAC3C,GAEMW,IAAmB,CAACF,MAAa;AAE9B,MAAAA,EAAmB,gBAAgB,YAClBP,EAAA,QAAQ,CAACA,EAAkB,OACzCA,EAAkB,QACjBF,EAAY,MAAc,OAAO,KAAK,IAEtCA,EAAY,MAAc,OAAO,KAAK;AAAA,IAGnD;AAEA,WAAAY,EAAU,MAAM;AACA,MAAAZ,EAAA,OAAO,iBAAiB,cAAc,MAAOA,EAAY,MAAc,OAAO,MAAM,GACpFA,EAAA,OAAO,iBAAiB,cAAc,MAAOA,EAAY,MAAc,OAAO,MAAM,GACpFA,EAAA,OAAO,iBAAiB,SAASW,CAAgB,GACjDX,EAAA,OAAO,iBAAiB,SAASQ,CAAU,GAC3CR,EAAA,OAAO,iBAAiB,QAAQU,CAAS;AAAA,IAAA,CACxD,GAEDG,EAAgB,MAAM;AACN,MAAAb,EAAA,OAAO,oBAAoB,cAAc,MAAOA,EAAY,MAAc,OAAO,MAAM,GACvFA,EAAA,OAAO,oBAAoB,cAAc,MAAOA,EAAY,MAAc,OAAO,MAAM,GACvFA,EAAA,OAAO,oBAAoB,SAASW,CAAgB,GAChEX,EAAY,OAAO,oBAAoB,SAAS,MAAMQ,CAAU,GAChER,EAAY,OAAO,oBAAoB,QAAQ,MAAMU,CAAS;AAAA,IAAA,CACjE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClHK,UAAA,EAAE,GAAAhB,EAAE,IAAIC,EAAQ,GAChBG,IAAcC,EAAe,GAO7Be,IAAKb,EAAe,IAAI,GACxBc,IAAcZ,EAAiC,EAAE,GACjDa,IAAWb,EAA8B,EAAE,GAC3CK,IAAa,CAACC,MAAa;AAE7B,MADYA,EACJ,QAAQ,SAASK,EAAG,OAAO,QAAQ,QAAQ,KAC9CA,EAAG,MAAc,OAAO,KAAK;AAAA,IAEtC,GACMJ,IAAY,MAAM;AACnB,MAAAI,EAAG,MAAc,OAAO,KAAK;AAAA,IAClC;AAEA,IAAAF,EAAU,MAAM;AACN,YAAAK,IAAYnB,EAAY,OAAO;AACrC,MAAAiB,EAAY,QAAQE,EAAU,aAC9BD,EAAS,QAAQC,EAAU,UACxBH,EAAA,OAAO,iBAAiB,QAAQJ,CAAS,GACzCI,EAAA,OAAO,iBAAiB,SAASN,CAAU;AAAA,IAAA,CACjD,GAEDK,EAAgB,MAAM;AACf,MAAAC,EAAA,OAAO,oBAAoB,QAAQJ,CAAS,GAC5CI,EAAA,OAAO,oBAAoB,SAASN,CAAU;AAAA,IAAA,CACpD;AAGK,UAAAU,IAAiB,CAACC,MACpBH,EAAS,MAAM,OAAO,CAACT,MAA+BA,EAAQ,iBAAiBY,CAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}