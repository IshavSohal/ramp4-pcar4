{"version":3,"file":"index-CqxNqQrV.js","sources":["../../src/fixtures/export-map/index.ts"],"sourcesContent":["import { fabric } from 'fabric';\r\n\r\nimport { FixtureInstance } from '@/api/internal';\r\nimport type { ExportAPI, ExportSubFixture } from '@/fixtures/export/api/export';\r\nimport type { ExportConfig } from '../export/store';\r\n\r\nclass ExportMapFixture extends FixtureInstance implements ExportSubFixture {\r\n    get config(): any {\r\n        const fixtureConfig: ExportConfig | undefined = this.$iApi.fixture.get<ExportAPI>('export').config;\r\n        return fixtureConfig?.map;\r\n    }\r\n\r\n    async make(options: any): Promise<fabric.Image> {\r\n        const screenshot = await this.$iApi.geo.map.takeScreenshot({\r\n            quality: 1,\r\n            format: 'png'\r\n        });\r\n\r\n        // screenshot function returns a raw image data and a dataUrl\r\n        // load the dataUrl as an image and wrap it into the fabric.Image\r\n        const img = new Image();\r\n        img.src = screenshot.dataUrl;\r\n\r\n        const esriImage = await new Promise<HTMLImageElement>(resolve => (img.onload = () => resolve(img)));\r\n\r\n        return new fabric.Image(esriImage, options);\r\n    }\r\n}\r\n\r\nexport default ExportMapFixture;\r\n"],"names":["ExportMapFixture","FixtureInstance","options","screenshot","img","esriImage","resolve","fabric"],"mappings":";;AAMA,MAAMA,UAAyBC,EAA4C;AAAA,EACvE,IAAI,SAAc;AAEd,WADgD,KAAK,MAAM,QAAQ,IAAe,QAAQ,EAAE,QACtE;AAAA,EAAA;AAAA,EAG1B,MAAM,KAAKC,GAAqC;AAC5C,UAAMC,IAAa,MAAM,KAAK,MAAM,IAAI,IAAI,eAAe;AAAA,MACvD,SAAS;AAAA,MACT,QAAQ;AAAA,IAAA,CACX,GAIKC,IAAM,IAAI,MAAM;AACtB,IAAAA,EAAI,MAAMD,EAAW;AAEf,UAAAE,IAAY,MAAM,IAAI,QAA0B,CAAAC,MAAYF,EAAI,SAAS,MAAME,EAAQF,CAAG,CAAE;AAElG,WAAO,IAAIG,EAAA,OAAO,MAAMF,GAAWH,CAAO;AAAA,EAAA;AAElD;"}