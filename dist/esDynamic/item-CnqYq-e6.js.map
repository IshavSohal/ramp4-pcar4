{"version":3,"file":"item-CnqYq-e6.js","sources":["../../src/fixtures/legend/components/checkbox.vue","../../src/fixtures/legend/components/legend-options.vue","../../src/fixtures/legend/components/symbology-stack.vue","../../src/fixtures/legend/components/item.vue"],"sourcesContent":["<template>\r\n    <div class=\"relative\" @mouseover.stop>\r\n        <!-- TODO: see if getting this to use v-model works; children wouldnt update properly on initial try -->\r\n        <input\r\n            :type=\"isRadio ? 'radio' : 'checkbox'\"\r\n            :aria-label=\"t(checked ? `legend.visibility.hide${label}` : `legend.visibility.show${label}`)\"\r\n            @click.stop=\"toggleVisibility()\"\r\n            :checked=\"checked && initialChecked\"\r\n            @keypress.enter.prevent\r\n            @keyup.enter.stop=\"toggleVisibility()\"\r\n            :class=\"[\r\n                disabled\r\n                    ? 'text-gray-400 border-gray-300'\r\n                    : 'text-black cursor-pointer border-gray-500 hover:border-black'\r\n            ]\"\r\n            class=\"mx-5 h-15 w-15\"\r\n            tabindex=\"-1\"\r\n            :disabled=\"disabled\"\r\n            :content=\"t(checked ? `legend.visibility.hide${label}` : `legend.visibility.show${label}`)\"\r\n            v-tippy=\"{ placement: 'top-end', hideOnClick: false }\"\r\n        />\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { CoreFilter, type LegendSymbology } from '@/geo/api';\r\nimport { onMounted, ref, type PropType } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\nimport { LayerItem } from '../store/layer-item';\r\nimport { LegendItem } from '../store/legend-item';\r\n\r\nconst { t } = useI18n();\r\n\r\nconst props = defineProps({\r\n    value: {\r\n        type: Object as PropType<LegendItem | LegendSymbology>,\r\n        required: true\r\n    },\r\n    legendItem: {\r\n        type: Object as PropType<LegendItem | LayerItem>,\r\n        required: true\r\n    },\r\n    checked: { type: Boolean },\r\n    label: { type: String },\r\n    isRadio: { type: Boolean },\r\n    disabled: { type: Boolean }\r\n});\r\n\r\nconst initialChecked = ref(props.legendItem.visibility);\r\n\r\nonMounted(() => {\r\n    props.legendItem.checkVisibilityRules();\r\n    initialChecked.value = props.legendItem.visibility === props.checked;\r\n});\r\n\r\n/**\r\n * Returns true if none of the child symbols are visible\r\n * @returns {boolean} true when no child symbols are visible\r\n */\r\nconst _noSymbolsVisible = (item: LayerItem): boolean => {\r\n    return !item.symbologyStack.some((item: LegendSymbology) => item.visibility);\r\n};\r\n\r\n/**\r\n * Toggle this visibility of the value object linked with this checkbox\r\n */\r\nconst toggleVisibility = (): void => {\r\n    if (props.value instanceof LegendItem) {\r\n        // Toggle parent symbology checkbox\r\n        props.legendItem.toggleVisibility();\r\n    } else if (props.legendItem instanceof LayerItem) {\r\n        // Toggle child symbology checkbox\r\n        if (_noSymbolsVisible(props.legendItem)) {\r\n            // If no symbols are visible, then set the parent layer to visible\r\n            // since we toggled on one of the child symbols and set all other\r\n            // symbols to invisible (except for the one that is toggled on)\r\n            props.legendItem.setSymbologyVisibility(undefined, false);\r\n            props.legendItem.setSymbologyVisibility(props.value.uid, true);\r\n            props.legendItem.toggleVisibility(true);\r\n        } else {\r\n            // Toggle the child symbology\r\n            props.legendItem.setSymbologyVisibility(props.value.uid, !props.value.lastVisbility);\r\n        }\r\n\r\n        // If all child symbols are toggled off, then toggle off the parent layer too\r\n        if (_noSymbolsVisible(props.legendItem)) {\r\n            props.legendItem.toggleVisibility(false);\r\n        }\r\n\r\n        // Update the layer definition to filter child symbols\r\n        // At the moment, only layers that support features will support sql filters\r\n        if (props.legendItem.layer?.supportsFeatures) {\r\n            const filterGuts = props.legendItem.symbologyStack\r\n                .filter((item: LegendSymbology) => item.lastVisbility === true)\r\n                .map((item: LegendSymbology) => item.definitionClause || '');\r\n\r\n            let sql = ''; // default value, this computes to \"show all\"\r\n            if (filterGuts.length === 0) {\r\n                // nothing visible.\r\n                sql = '1=2';\r\n            } else if (filterGuts.length < props.legendItem.symbologyStack.length) {\r\n                // only a subset of checkboxes are checked. need filter\r\n                sql = filterGuts.join(' OR ');\r\n            }\r\n\r\n            props.legendItem.layer?.setSqlFilter(CoreFilter.SYMBOL, sql);\r\n        }\r\n        initialChecked.value = true;\r\n    }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\"></style>\r\n","<template>\r\n    <div @click.stop @mouseover.stop class=\"options display-block cursor-auto\">\r\n        <dropdown-menu\r\n            class=\"flex-shrink-0\"\r\n            position=\"bottom-end\"\r\n            :tooltip=\"t('legend.layer.options')\"\r\n            tooltipPlacement=\"left\"\r\n            tooltipPlacementAlt=\"left\"\r\n            ref=\"dropdown\"\r\n        >\r\n            <template #header>\r\n                <div class=\"flex p-4 justify-center items-center\">\r\n                    <svg class=\"inline-block fill-current w-18 h-18 mx-4\" viewBox=\"0 0 23 21\">\r\n                        <path\r\n                            d=\"M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"\r\n                        />\r\n                    </svg>\r\n                </div>\r\n            </template>\r\n            <!-- metadata -->\r\n            <a\r\n                href=\"javascript:;\"\r\n                class=\"flex leading-snug items-center text-left w-auto\"\r\n                :class=\"{\r\n                    disabled: !legendItem!.layerControlAvailable(LayerControl.Metadata) || !getFixtureExists('metadata')\r\n                }\"\r\n                @click=\"toggleMetadata\"\r\n                role=\"button\"\r\n                :aria-label=\"t('legend.layer.controls.metadata')\"\r\n            >\r\n                <svg class=\"setting-svg\" viewBox=\"0 0 23 21\">\r\n                    <path\r\n                        d=\"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 16H8v-2h8v2zm0-4H8v-2h8v2zm-3-5V3.5L18.5 9H13z\"\r\n                    />\r\n                </svg>\r\n                {{ t('legend.layer.controls.metadata') }}\r\n            </a>\r\n            <!-- settings -->\r\n            <a\r\n                href=\"javascript:;\"\r\n                class=\"flex leading-snug items-center text-left w-auto\"\r\n                :class=\"{\r\n                    disabled: !legendItem!.layerControlAvailable(LayerControl.Settings) || !getFixtureExists('settings')\r\n                }\"\r\n                @click=\"toggleSettings\"\r\n                role=\"button\"\r\n                :aria-label=\"t('legend.layer.controls.settings')\"\r\n            >\r\n                <svg class=\"setting-svg\" viewBox=\"0 0 23 21\">\r\n                    <g>\r\n                        <path\r\n                            d=\"M 3,17L 3,19L 9,19L 9,17L 3,17 Z M 3,5L 3,7L 13,7L 13,5L 3,5 Z M 13,21L 13,19L 21,19L 21,17L 13,17L 13,15L 11,15L 11,21L 13,21 Z M 7,9L 7,11L 3,11L 3,13L 7,13L 7,15L 9,15L 9,9L 7,9 Z M 21,13L 21,11L 11,11L 11,13L 21,13 Z M 15,9L 17,9L 17,7L 21,7L 21,5L 17,5L 17,3L 15,3L 15,9 Z \"\r\n                        />\r\n                    </g>\r\n                </svg>\r\n                {{ t('legend.layer.controls.settings') }}\r\n            </a>\r\n            <!-- datatable -->\r\n            <a\r\n                href=\"javascript:;\"\r\n                class=\"flex leading-snug items-center text-left w-auto\"\r\n                :class=\"{\r\n                    disabled: !legendItem!.layerControlAvailable(LayerControl.Datatable) || !getFixtureExists('grid')\r\n                }\"\r\n                @click=\"toggleGrid\"\r\n                role=\"button\"\r\n                :aria-label=\"t('legend.layer.controls.datatable')\"\r\n            >\r\n                <svg class=\"setting-svg\" viewBox=\"0 0 23 21\">\r\n                    <path\r\n                        d=\"M 4.00002,3L 20,3C 21.1046,3 22,3.89543 22,5L 22,20C 22,21.1046 21.1046,22 20,22L 4.00001,22C 2.89544,22 2.00001,21.1046 2.00001,20L 2.00002,5C 2.00002,3.89543 2.89545,3 4.00002,3 Z M 4.00002,7L 4.00001,10L 8,10L 8,7.00001L 4.00002,7 Z M 10,7.00001L 9.99999,10L 14,10L 14,7.00001L 10,7.00001 Z M 20,10L 20,7L 16,7.00001L 16,10L 20,10 Z M 4.00002,12L 4.00002,15L 8,15L 8,12L 4.00002,12 Z M 4.00001,20L 8,20L 8,17L 4.00002,17L 4.00001,20 Z M 9.99999,12L 9.99999,15L 14,15L 14,12L 9.99999,12 Z M 9.99999,20L 14,20L 14,17L 9.99999,17L 9.99999,20 Z M 20,20L 20,17L 16,17L 16,20L 20,20 Z M 20,12L 16,12L 16,15L 20,15L 20,12 Z \"\r\n                    />\r\n                </svg>\r\n                {{ t('legend.layer.controls.datatable') }}\r\n            </a>\r\n            <!-- symbology stack -->\r\n            <a\r\n                href=\"javascript:;\"\r\n                class=\"flex leading-snug items-center text-left w-auto\"\r\n                :class=\"{\r\n                    disabled: !legendItem!.layerControlAvailable(LayerControl.Symbology)\r\n                }\"\r\n                @click=\"toggleSymbology\"\r\n                role=\"button\"\r\n                :aria-label=\"t('legend.layer.controls.symbology')\"\r\n            >\r\n                <svg class=\"setting-svg\" viewBox=\"0 0 23 21\">\r\n                    <path\r\n                        d=\"M11.99 18.54l-7.37-5.73L3 14.07l9 7 9-7-1.63-1.27-7.38 5.74zM12 16l7.36-5.73L21 9l-9-7-9 7 1.63 1.27L12 16z\"\r\n                    />\r\n                </svg>\r\n                {{ t('legend.layer.controls.symbology') }}\r\n            </a>\r\n            <!-- boundary zoom -->\r\n            <a\r\n                href=\"javascript:;\"\r\n                class=\"flex leading-snug items-center text-left w-auto\"\r\n                :class=\"{\r\n                    disabled: !legendItem!.layerControlAvailable(LayerControl.BoundaryZoom)\r\n                }\"\r\n                @click=\"zoomToLayerBoundary\"\r\n                role=\"button\"\r\n                :aria-label=\"t('legend.layer.controls.boundaryzoom')\"\r\n            >\r\n                <svg class=\"setting-svg\" viewBox=\"0 0 24 24\">\r\n                    <path\r\n                        d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"\r\n                    />\r\n                    <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\r\n                    <path d=\"M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z\" />\r\n                </svg>\r\n                {{ t('legend.layer.controls.boundaryzoom') }}\r\n            </a>\r\n            <!-- remove -->\r\n            <a\r\n                href=\"javascript:;\"\r\n                class=\"flex leading-snug items-center text-left w-auto\"\r\n                :class=\"{\r\n                    disabled: !legendItem!.layerControlAvailable(LayerControl.Remove)\r\n                }\"\r\n                @click=\"removeLayer\"\r\n                role=\"button\"\r\n                :aria-label=\"t('legend.layer.controls.remove')\"\r\n            >\r\n                <svg class=\"setting-svg\" viewBox=\"0 0 23 21\">\r\n                    <path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"></path>\r\n                </svg>\r\n                {{ t('legend.layer.controls.remove') }}\r\n            </a>\r\n            <!-- reload -->\r\n            <a\r\n                href=\"javascript:;\"\r\n                class=\"flex leading-snug items-center text-left w-auto\"\r\n                :class=\"{\r\n                    disabled: !reloadableLayer\r\n                }\"\r\n                :content=\"!reloadableLayer ? t('legend.layer.controls.reloadDisabled') : ''\"\r\n                @mouseover.stop=\"hover($event.currentTarget!)\"\r\n                @mouseout=\"\r\n                    //@ts-ignore\r\n                    mobileMode ? null : $event.currentTarget?._tippy?.hide(), (hovered = false)\r\n                \"\r\n                v-tippy=\"{\r\n                    placement: 'top-start',\r\n                    trigger: 'manual focus',\r\n                    aria: 'describedby'\r\n                }\"\r\n                @click=\"reloadLayer\"\r\n                role=\"button\"\r\n                :aria-label=\"t('legend.layer.controls.reload')\"\r\n            >\r\n                <svg class=\"setting-svg\" viewBox=\"0 0 24 24\">\r\n                    <path\r\n                        d=\"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\"\r\n                    ></path>\r\n                </svg>\r\n                {{ t('legend.layer.controls.reload') }}\r\n            </a>\r\n        </dropdown-menu>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { GlobalEvents, InstanceAPI } from '@/api';\r\nimport { LayerControl } from '@/geo/api';\r\nimport { computed, inject, ref, toRaw } from 'vue';\r\nimport { useI18n } from 'vue-i18n';\r\nimport { LayerItem } from '../store/layer-item';\r\nimport { usePanelStore } from '@/stores/panel';\r\n\r\nconst { t } = useI18n();\r\nconst iApi = inject('iApi') as InstanceAPI;\r\nconst dropdown = ref();\r\nconst hovered = ref(false);\r\nconst panelStore = usePanelStore();\r\nconst mobileMode = ref(panelStore.mobileView);\r\n\r\nconst props = defineProps({\r\n    legendItem: LayerItem\r\n});\r\n\r\n/**\r\n * Display symbology stack for the layer.\r\n */\r\nconst toggleSymbology = (): void => {\r\n    if (props.legendItem!.layerControlAvailable(LayerControl.Symbology)) {\r\n        props.legendItem!.toggleSymbology();\r\n    }\r\n};\r\n\r\n/**\r\n * Toggles data table panel to open/close for the LegendItem.\r\n */\r\nconst toggleGrid = () => {\r\n    if (props.legendItem!.layerControlAvailable(LayerControl.Datatable) && getFixtureExists('grid')) {\r\n        iApi.event.emit(GlobalEvents.GRID_TOGGLE, props.legendItem!.layer);\r\n    }\r\n};\r\n\r\n/**\r\n * Toggles settings panel to open/close type for the LegendItem.\r\n */\r\nconst toggleSettings = () => {\r\n    if (props.legendItem!.layerControlAvailable(LayerControl.Settings) && getFixtureExists('settings')) {\r\n        iApi.event.emit(GlobalEvents.SETTINGS_TOGGLE, props.legendItem!.layer);\r\n    }\r\n};\r\n\r\n/**\r\n * Toggles metadata panel to open/close for the LegendItem.\r\n */\r\nconst toggleMetadata = () => {\r\n    if (props.legendItem!.layerControlAvailable(LayerControl.Metadata) && getFixtureExists('metadata')) {\r\n        const metaConfig =\r\n            props.legendItem?.layer?.config.metadata || props.legendItem?.layer?.parentLayer?.config?.metadata || {};\r\n        const name = metaConfig?.name || props.legendItem?.layer?.name || '';\r\n        const catalogueUrl =\r\n            props.legendItem?.layer?.config?.catalogueUrl ||\r\n            (props.legendItem?.layer?.layerType === 'sublayer' &&\r\n                props.legendItem?.layer?.parentLayer?.config?.catalogueUrl) ||\r\n            undefined;\r\n\r\n        if (metaConfig.url) {\r\n            // Check the file extension to see if this is an XML file. Defaults to HTML.\r\n            const parseUrl = metaConfig.url.split('.');\r\n            const metadataExtension = parseUrl[parseUrl.length - 1];\r\n            const metadataType = metadataExtension === 'xml' || metadataExtension === 'md' ? metadataExtension : 'html';\r\n\r\n            // TODO: toggle metadata panel through API/store call\r\n            iApi.event.emit(GlobalEvents.METADATA_TOGGLE, {\r\n                type: metadataType,\r\n                layerName: name,\r\n                url: metaConfig.url,\r\n                catalogueUrl: catalogueUrl,\r\n                layer: props.legendItem!.layer\r\n            });\r\n        } else {\r\n            console.warn('Layer does not have a metadata url defined');\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Zoom to the boundary of layer\r\n */\r\nconst zoomToLayerBoundary = () => {\r\n    if (props.legendItem!.layerControlAvailable(LayerControl.BoundaryZoom)) {\r\n        props.legendItem?.layer?.zoomToLayerBoundary();\r\n    }\r\n};\r\n\r\n/**\r\n * Removes layer from map.\r\n */\r\nconst removeLayer = () => {\r\n    if (props.legendItem!.layerControlAvailable(LayerControl.Remove)) {\r\n        iApi.geo.map.removeLayer(props.legendItem!.layerUid!);\r\n    }\r\n};\r\n\r\n/**\r\n * Reloads a layer on the map.\r\n */\r\nconst reloadLayer = () => {\r\n    if (reloadableLayer.value) {\r\n        toRaw(props.legendItem!.layer!).reload();\r\n        dropdown.value.open = false;\r\n    }\r\n};\r\n\r\n/**\r\n * Determine if the layer can be reloaded\r\n */\r\nconst reloadableLayer = computed((): boolean => {\r\n    return (\r\n        props.legendItem!.layerControlAvailable(LayerControl.Reload) &&\r\n        props.legendItem instanceof LayerItem &&\r\n        toRaw(props.legendItem!.layer)?.canReload\r\n    );\r\n});\r\n\r\nconst hover = (t: EventTarget) => {\r\n    hovered.value = true;\r\n    setTimeout(() => {\r\n        //@ts-ignore\r\n        if (hovered.value) mobileMode.value ? null : t._tippy?.show();\r\n    }, 300);\r\n};\r\n\r\n/**\r\n * Indicates if the fixture with the given name has been added\r\n */\r\nconst getFixtureExists = (fixtureName: string): boolean => {\r\n    try {\r\n        return iApi.fixture.exists(fixtureName);\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.disabled {\r\n    @apply text-neutral-500 cursor-default;\r\n}\r\n.setting-svg {\r\n    margin-bottom: 5px;\r\n    display: inline-block;\r\n    fill: currentColor;\r\n    width: 18px;\r\n    height: 18px;\r\n    margin-right: 10px;\r\n}\r\n</style>\r\n","<template>\r\n    <div v-if=\"!visible\">\r\n        <!-- Multiple icons to display -->\r\n        <div v-if=\"stack.length > 1\" class=\"relative left-3\">\r\n            <!-- the :class line calculates margin-left for each of the 3 symbols, and gives a margin-top to symbols that arent the first -->\r\n            <div\r\n                class=\"absolute\"\r\n                :class=\"[idx == 0 ? 'symbol-0' : idx == 1 ? 'left-3 symbol-1' : 'left-6 symbol-2']\"\r\n                :style=\"{ 'z-index': 3 - idx }\"\r\n                v-for=\"(item, idx) in stack.slice(0, 3).reverse()\"\r\n                :key=\"idx\"\r\n            >\r\n                <span v-if=\"stack[idx].svgcode\" class=\"symbologyIcon w-28 h-28\" v-html=\"stack[idx].svgcode\"></span>\r\n                <img v-else-if=\"stack[idx].imgUrl\" class=\"symbologyIcon w-28 h-28\" :src=\"stack[idx].imgUrl\" />\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Only one icon to display. -->\r\n        <div v-else-if=\"stack.length > 0\" class=\"symbologyIcon w-32 h-32\">\r\n            <span v-if=\"stack[0].svgcode\" v-html=\"stack[0].svgcode\"></span>\r\n            <img v-else-if=\"stack[0].imgUrl\" class=\"symbologyIcon w-full h-full\" :src=\"stack[0].imgUrl\" />\r\n        </div>\r\n    </div>\r\n\r\n    <!-- If the symbology stack is already open, display an X in the place of the stack. -->\r\n    <div v-else class=\"h-32 w-32 inline-flex justify-center items-center\">\r\n        <svg class=\"fill-current w-16 h-16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 352 512\">\r\n            <path\r\n                d=\"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\"\r\n            />\r\n        </svg>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport type { LegendSymbology } from '@/geo/api';\r\nimport { toRaw, onMounted, type PropType, ref } from 'vue';\r\nimport type { LayerItem } from '../store/layer-item';\r\n\r\nconst props = defineProps({\r\n    visible: { type: Boolean, required: true },\r\n    legendItem: { type: Object as PropType<LayerItem>, required: true }\r\n});\r\n\r\nconst stack = ref<Array<LegendSymbology>>([]); // ref instead of reactive to maintain reactivity after promise\r\n\r\nonMounted(() => {\r\n    // wait for the layer item to load\r\n    props.legendItem.loadPromise.then(() => {\r\n        if (props.legendItem.layerUid !== undefined) {\r\n            // retrieve the symbology stack\r\n            // waits on all symbols in the stack to finish loading before displaying.\r\n            Promise.all(toRaw(props.legendItem.symbologyStack).map((l: any) => l.drawPromise)).then(() => {\r\n                stack.value = toRaw(props.legendItem).symbologyStack;\r\n            });\r\n        }\r\n    });\r\n});\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.symbol-0 {\r\n    :hover > & {\r\n        transform: rotate(-10deg);\r\n        transform-origin: bottom center;\r\n    }\r\n}\r\n.symbol-2 {\r\n    :hover > & {\r\n        transform: rotate(10deg);\r\n        transform-origin: bottom center;\r\n    }\r\n}\r\n.ramp-styles.animation-enabled .symbol-0 {\r\n    transition-duration: 0.2s;\r\n}\r\n.ramp-styles.animation-enabled .symbol-2 {\r\n    transition-duration: 0.2s;\r\n}\r\n</style>\r\n","<template>\r\n    <div :key=\"`${legendItem.uid}-${legendItem.visibility}`\" v-if=\"!legendItem.hidden\" ref=\"el\">\r\n        <div class=\"relative\">\r\n            <div\r\n                class=\"flex items-center hover:bg-gray-200 default-focus-style !p-5\"\r\n                :class=\"[\r\n                    legendItem.type === LegendType.Item\r\n                        ? 'loaded-item'\r\n                        : legendItem.type === LegendType.Error\r\n                          ? 'non-loaded-item bg-red-200'\r\n                          : 'non-loaded-item',\r\n                    (isGroup && controlAvailable(LegendControl.Expand)) ||\r\n                    (!isGroup &&\r\n                        legendItem instanceof LayerItem &&\r\n                        controlAvailable(LayerControl.Datatable) &&\r\n                        getDatagridExists() &&\r\n                        legendItem.type === LegendType.Item)\r\n                        ? 'cursor-pointer'\r\n                        : 'cursor-default',\r\n                    allowMultilineItems ? 'multilined' : 'singlelined'\r\n                ]\"\r\n                @mouseover.stop=\"hover($event.currentTarget!)\"\r\n                @mouseout=\"\r\n                    //@ts-ignore\r\n                    mobileMode ? null : $event.currentTarget?._tippy?.hide(), (hovered = false)\r\n                \"\r\n                @click=\"\r\n                    () => {\r\n                        if (\r\n                            !isGroup &&\r\n                            legendItem instanceof LayerItem &&\r\n                            controlAvailable(LayerControl.Datatable) &&\r\n                            getDatagridExists() &&\r\n                            legendItem.type === LegendType.Item\r\n                        ) {\r\n                            toggleGrid();\r\n                        } else if (isGroup) {\r\n                            toggleExpand();\r\n                        }\r\n                    }\r\n                \"\r\n                v-focus-item=\"'show-truncate'\"\r\n                :content=\"\r\n                    isGroup && controlAvailable(LegendControl.Expand)\r\n                        ? t(legendItem.expanded ? 'legend.group.collapse' : 'legend.group.expand')\r\n                        : legendItem instanceof LayerItem &&\r\n                            legendItem.type === LegendType.Item &&\r\n                            controlAvailable(LayerControl.Datatable) &&\r\n                            getDatagridExists()\r\n                          ? t('legend.layer.data')\r\n                          : ''\r\n                \"\r\n                v-tippy=\"{\r\n                    placement: 'top-start',\r\n                    trigger: 'manual focus',\r\n                    aria: 'describedby'\r\n                }\"\r\n                truncate-trigger\r\n            >\r\n                <!-- smiley face. very important that we migrate this -->\r\n                <div class=\"flex p-5 mr-[13px]\" v-if=\"legendItem.type !== LegendType.Item\">\r\n                    <svg\r\n                        v-if=\"legendItem.type === LegendType.Placeholder\"\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        viewBox=\"0 0 24 24\"\r\n                        fill=\"black\"\r\n                        width=\"24px\"\r\n                        height=\"24px\"\r\n                    >\r\n                        <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\r\n                        <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\r\n                        <circle cx=\"15.5\" cy=\"9.5\" r=\"1.5\" />\r\n                        <circle cx=\"8.5\" cy=\"9.5\" r=\"1.5\" />\r\n                        <circle cx=\"15.5\" cy=\"9.5\" r=\"1.5\" />\r\n                        <circle cx=\"8.5\" cy=\"9.5\" r=\"1.5\" />\r\n                        <path\r\n                            d=\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm0-2.5c2.33 0 4.32-1.45 5.12-3.5h-1.67c-.69 1.19-1.97 2-3.45 2s-2.75-.81-3.45-2H6.88c.8 2.05 2.79 3.5 5.12 3.5z\"\r\n                        />\r\n                    </svg>\r\n                    <!-- sad face for layer error -->\r\n                    <svg\r\n                        v-else\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        viewBox=\"0 0 24 24\"\r\n                        fill=\"black\"\r\n                        width=\"24px\"\r\n                        height=\"24px\"\r\n                    >\r\n                        <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\r\n                        <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\r\n                        <circle cx=\"15.5\" cy=\"9.5\" r=\"1.5\" />\r\n                        <circle cx=\"8.5\" cy=\"9.5\" r=\"1.5\" />\r\n                        <circle cx=\"15.5\" cy=\"9.5\" r=\"1.5\" />\r\n                        <circle cx=\"8.5\" cy=\"9.5\" r=\"1.5\" />\r\n                        <path\r\n                            d=\"M 20,12C 20,7.6 16.4,4 12,4C 7.6,4 4,7.6 4,12C 4,16.4 7.6,20 12,20C 16.4,20 20,16.4 20,12 Z M 22,12C 22,17.5 17.5,22 12,22C 6.5,22 2,17.5 2,12C 2,6.5 6.5,2.00001 12,2.00001C 17.5,2.00001 22,6.5 22,12 Z M 15.5,8C 16.3,8 17,8.7 17,9.5C 17,10.3 16.3,11 15.5,11C 14.7,11 14,10.3 14,9.5C 14,8.7 14.7,8 15.5,8 Z M 10,9.5C 10,10.3 9.3,11 8.5,11C 7.7,11 7,10.3 7,9.5C 7,8.7 7.7,8 8.5,8C 9.3,8 10,8.7 10,9.5 Z M 12,14C 13.7524,14 15.2943,14.7212 16.1871,15.8129L 14.7697,17.2302C 14.3175,16.5078 13.2477,16 12,16C 10.7523,16 9.68254,16.5078 9.23024,17.2302L 7.81291,15.8129C 8.7057,14.7212 10.2476,14 12,14 Z\"\r\n                        ></path>\r\n                    </svg>\r\n                </div>\r\n\r\n                <!-- symbology stack toggle-->\r\n                <div\r\n                    class=\"relative w-32 h-32 mr-15\"\r\n                    v-if=\"\r\n                        legendItem.type === LegendType.Item &&\r\n                        legendItem instanceof LayerItem &&\r\n                        legendItem.layer.legend.length > 0\r\n                    \"\r\n                    @mouseover.stop\r\n                >\r\n                    <button\r\n                        type=\"button\"\r\n                        @click.stop=\"toggleSymbology\"\r\n                        :class=\"[controlAvailable(LayerControl.Symbology) ? 'cursor-pointer' : 'cursor-default']\"\r\n                        :disabled=\"!controlAvailable(LayerControl.Symbology)\"\r\n                        :content=\"\r\n                            legendItem instanceof LayerItem && legendItem.symbologyExpanded\r\n                                ? t('legend.symbology.hide')\r\n                                : t('legend.symbology.expand')\r\n                        \"\r\n                        :aria-label=\"\r\n                            legendItem instanceof LayerItem && legendItem.symbologyExpanded\r\n                                ? t('legend.symbology.hide')\r\n                                : t('legend.symbology.expand')\r\n                        \"\r\n                        v-tippy=\"{\r\n                            placement: 'top-start'\r\n                        }\"\r\n                    >\r\n                        <symbology-stack\r\n                            v-if=\"!legendItem.coverIcon\"\r\n                            :class=\"{\r\n                                'pointer-events-none': !controlAvailable(LayerControl.Symbology)\r\n                            }\"\r\n                            class=\"w-32 h-32\"\r\n                            :visible=\"legendItem instanceof LayerItem && legendItem.symbologyExpanded\"\r\n                            :legendItem=\"legendItem\"\r\n                        />\r\n                        <img\r\n                            v-else\r\n                            :class=\"{\r\n                                'pointer-events-none': !controlAvailable(LayerControl.Symbology)\r\n                            }\"\r\n                            class=\"w-32 h-32 hover:scale-105\"\r\n                            :src=\"legendItem.coverIcon\"\r\n                            alt=\"Cover icon not found :(\"\r\n                        />\r\n                    </button>\r\n                </div>\r\n\r\n                <!-- dropdown icon -->\r\n                <div\r\n                    v-if=\"isGroup && controlAvailable(LegendControl.Expand)\"\r\n                    class=\"expand-toggle p-8 pointer-events-none\"\r\n                    :class=\"{ 'rotate-180': legendItem.expanded }\"\r\n                >\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"18\" viewBox=\"0 0 24 24\" width=\"18\">\r\n                        <path d=\"M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z\" />\r\n                    </svg>\r\n                </div>\r\n\r\n                <!-- name or info section-->\r\n                <div\r\n                    v-if=\"legendItem instanceof LayerItem && allowMultilineItems\"\r\n                    class=\"flex-1 pointer-events-none m-5\"\r\n                    :class=\"`line-clamp-${maxLines}`\"\r\n                    v-truncate=\"{\r\n                        externalTrigger: true,\r\n                        noTruncateClass: true\r\n                    }\"\r\n                >\r\n                    <span class=\"h-auto break-words text-ellipsis\">{{\r\n                        legendItem.name ?? (!legendItem?.layer?.name ? legendItem.layerId : legendItem.layer?.name)\r\n                    }}</span>\r\n                </div>\r\n                <!-- Version if multiline legend items is turned off -->\r\n                <div\r\n                    v-else-if=\"legendItem instanceof LayerItem\"\r\n                    class=\"flex-1 pointer-events-none p-5\"\r\n                    v-truncate=\"{ externalTrigger: true }\"\r\n                >\r\n                    <span>{{\r\n                        legendItem.name ??\r\n                        (!legendItem.layer || legendItem?.layer?.name === ''\r\n                            ? legendItem.layerId\r\n                            : legendItem.layer?.name)\r\n                    }}</span>\r\n                </div>\r\n                <div v-else-if=\"legendItem instanceof SectionItem\" class=\"flex-1\">\r\n                    <h3 class=\"text-lg font-bold\" v-if=\"legendItem.infoType === InfoType.Title && legendItem.content\">\r\n                        {{ legendItem.content }}\r\n                    </h3>\r\n                    <h3 v-else-if=\"legendItem.infoType === InfoType.Title\">\r\n                        {{ legendItem.name }}\r\n                    </h3>\r\n                    <p v-else-if=\"legendItem.infoType === InfoType.Text\">\r\n                        {{ legendItem.content }}\r\n                    </p>\r\n                    <img\r\n                        v-else-if=\"legendItem.infoType === InfoType.Image\"\r\n                        :src=\"legendItem.content\"\r\n                        alt=\"InfoType image not found :(\"\r\n                    />\r\n                    <div\r\n                        v-else-if=\"legendItem.infoType === InfoType.Markdown\"\r\n                        class=\"ramp-markdown\"\r\n                        v-html=\"markdownToHtml(legendItem.content)\"\r\n                    ></div>\r\n                    <component v-else :is=\"`${legendItem.uid}-info-section`\"></component>\r\n                </div>\r\n\r\n                <!-- reload for error'd items -->\r\n                <div class=\"relative\" v-if=\"legendItem.type === LegendType.Error && reloadableLayer\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"text-gray-500 hover:text-black\"\r\n                        :content=\"t('legend.layer.controls.reload')\"\r\n                        v-tippy=\"{\r\n                            placement: 'top-start'\r\n                        }\"\r\n                        @mouseover.stop\r\n                        @click.stop=\"reloadLayer\"\r\n                        :aria-label=\"t('legend.layer.controls.reload')\"\r\n                    >\r\n                        <div class=\"flex p-8\">\r\n                            <svg class=\"inline-block fill-current w-18 h-18\" viewBox=\"0 0 24 24\">\r\n                                <path\r\n                                    d=\"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\"\r\n                                ></path>\r\n                            </svg>\r\n                        </div>\r\n                    </button>\r\n                </div>\r\n\r\n                <!-- options dropdown menu -->\r\n                <legend-options\r\n                    v-if=\"\r\n                        (legendItem.type === LegendType.Item ||\r\n                            (legendItem.type === LegendType.Placeholder && allowMultilineItems)) &&\r\n                        legendItem instanceof LayerItem\r\n                    \"\r\n                    :class=\"{\r\n                        invisible: legendItem.type === LegendType.Placeholder\r\n                    }\"\r\n                    :legendItem=\"legendItem\"\r\n                />\r\n\r\n                <!-- Button only appears for loading or errored LayerItems -->\r\n                <!-- Morphs depending on state. Cancel for loading, Remove for Errored -->\r\n                <div v-if=\"legendItem.type !== LegendType.Item && legendItem instanceof LayerItem\" class=\"relative\">\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"text-gray-500 hover:text-black\"\r\n                        :content=\"\r\n                            legendItem.type === LegendType.Error\r\n                                ? t('legend.layer.controls.remove')\r\n                                : t('legend.layer.controls.cancel')\r\n                        \"\r\n                        v-tippy=\"{\r\n                            placement: 'top-start'\r\n                        }\"\r\n                        @mouseover.stop\r\n                        @click.stop=\"cancelOrRemoveLayer\"\r\n                        :aria-label=\"\r\n                            legendItem.type === LegendType.Error\r\n                                ? t('legend.layer.controls.remove')\r\n                                : t('legend.layer.controls.cancel')\r\n                        \"\r\n                    >\r\n                        <div class=\"flex p-5\">\r\n                            <svg\r\n                                v-if=\"legendItem.type === LegendType.Placeholder\"\r\n                                class=\"fill-current w-18 h-18\"\r\n                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                viewBox=\"0 0 352 512\"\r\n                            >\r\n                                <path\r\n                                    d=\"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\"\r\n                                />\r\n                            </svg>\r\n                            <svg v-else class=\"inline-block fill-current w-18 h-18 mr-1\" viewBox=\"0 1 23 22\">\r\n                                <path\r\n                                    d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\r\n                                ></path>\r\n                            </svg>\r\n                        </div>\r\n                    </button>\r\n                </div>\r\n\r\n                <!-- offscale icon -->\r\n                <div\r\n                    class=\"relative p-4 cursor-default\"\r\n                    :content=\"t('legend.layer.offscale')\"\r\n                    v-tippy=\"{\r\n                        placement: 'top-start'\r\n                    }\"\r\n                    @mouseover.stop\r\n                    @click.stop\r\n                    v-if=\"\r\n                        legendItem.type === LegendType.Item &&\r\n                        legendItem instanceof LayerItem &&\r\n                        legendItem.layerOffscale\r\n                    \"\r\n                    focus-icon\r\n                >\r\n                    <svg class=\"inline-block fill-gray-400 w-18 h-18\" viewBox=\"0 0 24 24\">\r\n                        <path\r\n                            d=\"M19.81 14.99l1.19-.92-1.43-1.43-1.19.92 1.43 1.43zm-.45-4.72L21 9l-9-7-2.91 2.27 7.87 7.88 2.4-1.88zM3.27 1L2 2.27l4.22 4.22L3 9l1.63 1.27L12 16l2.1-1.63 1.43 1.43L12 18.54l-7.37-5.73L3 14.07l9 7 4.95-3.85L20.73 21 22 19.73 3.27 1z\"\r\n                        ></path>\r\n                    </svg>\r\n                </div>\r\n\r\n                <!-- data only icon -->\r\n                <div\r\n                    class=\"relative p-4 cursor-default\"\r\n                    :content=\"t('legend.layer.data.only')\"\r\n                    v-tippy=\"{\r\n                        placement: 'top-end'\r\n                    }\"\r\n                    @mouseover.stop\r\n                    @click.stop\r\n                    v-if=\"\r\n                        legendItem.type === LegendType.Item &&\r\n                        legendItem instanceof LayerItem &&\r\n                        !legendItem.layer?.mapLayer\r\n                    \"\r\n                    focus-icon\r\n                >\r\n                    <svg\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        height=\"18\"\r\n                        viewBox=\"0 -960 960 960\"\r\n                        width=\"18\"\r\n                        class=\"inline-block fill-gray-400\"\r\n                    >\r\n                        <path\r\n                            d=\"m776.109-63.565-73.435-69.196q-51.302 32.573-106.091 59.145-54.788 26.572-116.255 26.572-88.94 0-167.803-33.893-78.862-33.894-138.052-93.239-59.19-59.346-93.19-138.205-34-78.86-34-167.619 0-64.607 19.12-125.521Q85.521-666.435 120-719.674l-50.848-50.848 68.761-68.761L844.87-132.326l-68.761 68.76Zm-345.392-92.653v-72.5l-52.25-52.086v-50.009l-219.01-218.752q-3 17.015-5 34.031-2 17.015-2 35.136 0 124.449 78.826 214.674 78.826 90.224 199.434 109.506Zm410.392-85.412-76.739-77.74q21.288-37.275 32.35-77.847 11.062-40.572 11.062-84.059 0-95.003-56.304-169.853-56.304-74.849-145.391-108.893v.522l-174.413 76.087v31.348L241.87-842.109q52.483-34.989 113.387-52.918 60.903-17.93 125.159-17.93 89.709 0 168.127 33.869 78.418 33.868 137.435 93.28 59.016 59.413 92.997 137.683 33.982 78.269 33.982 167.993 0 64.203-18.43 125.111-18.429 60.907-53.418 113.391Z\"\r\n                        />\r\n                    </svg>\r\n                </div>\r\n\r\n                <!-- zoom button for offscale layers -->\r\n                <div\r\n                    class=\"relative top-1\"\r\n                    v-if=\"\r\n                        legendItem.type === LegendType.Item &&\r\n                        legendItem instanceof LayerItem &&\r\n                        legendItem.layerOffscale\r\n                    \"\r\n                >\r\n                    <button\r\n                        type=\"button\"\r\n                        class=\"p-4\"\r\n                        :content=\"t('legend.layer.zoomToVisible')\"\r\n                        v-tippy=\"{\r\n                            placement: 'top-start'\r\n                        }\"\r\n                        @mouseover.stop\r\n                        @click.stop=\"(legendItem as LayerItem).layer.zoomToVisibleScale()\"\r\n                    >\r\n                        <svg\r\n                            class=\"m-auto\"\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            height=\"18\"\r\n                            viewBox=\"0 0 24 24\"\r\n                            width=\"18\"\r\n                        >\r\n                            <path\r\n                                d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"\r\n                            ></path>\r\n                            <path d=\"M0 0h24v24H0V0z\" fill=\"none\"></path>\r\n                            <path d=\"M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z\"></path>\r\n                        </svg>\r\n                    </button>\r\n                </div>\r\n\r\n                <!-- visibility -->\r\n                <checkbox\r\n                    v-else-if=\"legendItem.type === LegendType.Item && controlAvailable(LegendControl.Visibility)\"\r\n                    :checked=\"legendItem.visibility\"\r\n                    :value=\"legendItem as LegendItem\"\r\n                    :isRadio=\"legendItem.parent && legendItem.parent.exclusive\"\r\n                    :legendItem=\"legendItem\"\r\n                    :disabled=\"\r\n                        legendItem instanceof LayerItem && !legendItem.layerControlAvailable(LayerControl.Visibility)\r\n                    \"\r\n                    :label=\"isGroup ? 'Group' : 'Layer'\"\r\n                />\r\n            </div>\r\n            <div\r\n                v-if=\"\r\n                    legendItem.type === LegendType.Placeholder ||\r\n                    (legendItem instanceof LayerItem && legendItem.layerRedrawing && legendItem.visibility)\r\n                \"\r\n                class=\"h-3 w-full absolute bottom-0\"\r\n            >\r\n                <div class=\"progress-line\"></div>\r\n            </div>\r\n        </div>\r\n        <!-- Symbology Stack Section -->\r\n        <div\r\n            v-if=\"legendItem instanceof LayerItem && legendItem.symbologyExpanded\"\r\n            v-focus-item\r\n            class=\"symbology-stack default-focus-style\"\r\n        >\r\n            <div v-if=\"symbologyStack.length > 0\">\r\n                <!-- display each symbol -->\r\n                <p v-if=\"legendItem instanceof LayerItem && legendItem.description\" class=\"m-5\">\r\n                    {{ legendItem.description }}\r\n                </p>\r\n                <div class=\"m-5\" v-for=\"item in symbologyStack\" :key=\"item.uid\">\r\n                    <!-- for WMS layers and image render styles -->\r\n                    <div\r\n                        v-if=\"\r\n                            (item.imgUrl && legendItem.symbologyRenderStyle === 'images') ||\r\n                            (!item.imgUrl && layerType === 'ogc-wms')\r\n                        \"\r\n                        class=\"items-center grid-cols-1\"\r\n                    >\r\n                        <div v-if=\"item.imgUrl\" class=\"symbologyIcon w-full p-5\">\r\n                            <img class=\"max-w-full\" :src=\"item.imgUrl\" />\r\n                        </div>\r\n                        <div\r\n                            v-else-if=\"item.imgHeight\"\r\n                            class=\"symbologyIcon w-full p-5\"\r\n                            v-html=\"getLegendGraphic(item)\"\r\n                        ></div>\r\n                        <div v-if=\"item.label\" class=\"flex-1 p-5 bg-black-75 text-white\" v-truncate>\r\n                            <span>{{ item.label }}</span>\r\n                            <checkbox\r\n                                v-if=\"\r\n                                    (!item.imgUrl && symbologyStack.length > 1) ||\r\n                                    (item.imgUrl && item.definitionClause)\r\n                                \"\r\n                                class=\"float-right\"\r\n                                :value=\"item\"\r\n                                :legendItem=\"legendItem\"\r\n                                :checked=\"item.visibility\"\r\n                                :disabled=\"!controlAvailable(LayerControl.Visibility)\"\r\n                                label=\"Symbol\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <!-- for non-WMS layers -->\r\n                    <div v-else class=\"flex items-center\">\r\n                        <div v-if=\"item.imgUrl\" class=\"symbologyIcon\">\r\n                            <img class=\"w-32 h-32\" :src=\"item.imgUrl\" />\r\n                        </div>\r\n                        <div v-else-if=\"item.svgcode\" class=\"symbologyIcon\">\r\n                            <span v-html=\"item.svgcode\"></span>\r\n                        </div>\r\n                        <div class=\"flex-1 ml-15\" v-truncate>\r\n                            {{ item.label }}\r\n                        </div>\r\n                        <checkbox\r\n                            v-if=\"\r\n                                modifiableLayer &&\r\n                                legendItem.layer.supportsFeatures &&\r\n                                ((!item.imgUrl && symbologyStack.length > 1) || (item.imgUrl && item.definitionClause))\r\n                            \"\r\n                            :value=\"item\"\r\n                            :legendItem=\"legendItem\"\r\n                            :checked=\"item.visibility\"\r\n                            :disabled=\"!controlAvailable(LayerControl.Visibility)\"\r\n                            label=\"Symbol\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div v-if=\"!symbologyStackLoaded\">\r\n                <!-- display loading text if the stack hasn't loaded yet -->\r\n                <div class=\"flex p-5 ml-48\" v-truncate>\r\n                    <div class=\"relative animate-spin spinner h-20 w-20 mr-10 pt-2\" v-if=\"isAnimationEnabled\"></div>\r\n                    <div class=\"flex-1 text-gray-500\" v-truncate>\r\n                        <span>{{ t('legend.symbology.loading') }}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <!-- Display children of the group -->\r\n        <div class=\"legend-group border-l-2 ml-4 pl-4\" v-if=\"legendItem.expanded\">\r\n            <item v-for=\"item in legendItem.children\" :legendItem=\"item\" :key=\"item.uid\" />\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { GlobalEvents, InstanceAPI } from '@/api';\r\nimport type { LegendSymbology, RampLayerConfig } from '@/geo/api';\r\nimport { InitiationState, LayerControl } from '@/geo/api';\r\nimport { useLayerStore } from '@/stores/layer';\r\nimport to from 'await-to-js';\r\nimport { marked } from 'marked';\r\nimport type { PropType } from 'vue';\r\nimport { toRaw, computed, inject, ref, watch } from 'vue';\r\nimport { LayerItem } from '../store/layer-item';\r\nimport { LegendControl, LegendType } from '../store/legend-item';\r\nimport { InfoType, SectionItem } from '../store/section-item';\r\nimport Checkbox from './checkbox.vue';\r\nimport LegendOptions from './legend-options.vue';\r\nimport { usePanelStore } from '@/stores/panel';\r\nimport { useI18n } from 'vue-i18n';\r\nimport { useLegendStore } from '../store';\r\n\r\n// eslint doesn't recognize <symbology-stack> usage\r\n// eslint-disable-next-line\r\nimport SymbologyStack from './symbology-stack.vue';\r\n\r\nimport type { LegendAPI } from '../api/legend';\r\nimport type { LegendItem } from '../store/legend-item';\r\n\r\nconst layerStore = useLayerStore();\r\nconst panelStore = usePanelStore();\r\nconst { t } = useI18n();\r\nconst iApi = inject('iApi') as InstanceAPI;\r\nconst el = ref();\r\n\r\nconst props = defineProps({\r\n    legendItem: {\r\n        type: Object as PropType<LegendItem | LayerItem | SectionItem>,\r\n        required: true\r\n    }\r\n});\r\n\r\nconst legendStore = useLegendStore();\r\nconst allowMultilineItems = legendStore.multilineItems;\r\nconst maxLines = (props.legendItem instanceof LayerItem && props.legendItem.maxLines) ?? legendStore.maxLines;\r\n\r\nconst mobileMode = ref(panelStore.mobileView);\r\nconst layerConfigs = computed(() => layerStore.layerConfigs);\r\nconst symbologyStack = ref<Array<LegendSymbology>>([]); // ref instead of reactive to maintain reactivity after promise\r\nconst symbologyStackLoaded = ref<boolean>(false);\r\nconst hovered = ref(false);\r\n\r\n/**\r\n * Get the type of layer\r\n */\r\nconst layerType = computed((): string | undefined => {\r\n    return props.legendItem instanceof LayerItem ? toRaw(props.legendItem!.layer)?.layerType : '';\r\n});\r\n\r\n/**\r\n * Determine if the layer is modifiable\r\n */\r\nconst modifiableLayer = computed((): boolean => {\r\n    return props.legendItem instanceof LayerItem && toRaw(props.legendItem!.layer)?.canModifyLayer;\r\n});\r\n\r\n/**\r\n * Determine if the layer is reloadable\r\n */\r\nconst reloadableLayer = computed((): boolean => {\r\n    if (props.legendItem instanceof LayerItem) {\r\n        const rawLayer = toRaw(props.legendItem.layer);\r\n        if (rawLayer) {\r\n            return rawLayer.canReload;\r\n        } else {\r\n            // funny logic: if layer doesn't exist, it hasn't been registered and\r\n            // linked yet. Main scenario is MIL children who don't get created\r\n            // until after parent loads.\r\n            // Non-reloadability is typically due to file stuff via wizard or\r\n            // using rawData + no caching config. Their RAMP layer will register\r\n            // prior to failpoints.\r\n            // So return true, else child-bound entries won't be able to reload\r\n            return true;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n});\r\n\r\n/**\r\n * Get animation enabled status\r\n */\r\nconst isAnimationEnabled = computed((): boolean => {\r\n    return iApi.animate;\r\n});\r\n\r\n/**\r\n * Get if this item is a group (has at least one child)\r\n */\r\nconst isGroup = computed((): boolean => {\r\n    return (\r\n        props.legendItem.children.length > 0 ||\r\n        // TODO: Determine why Vue reactivity isn't picking updates to the children property of the parent.\r\n        // isGroup is being called on the parent before the children are mapped in legend.ts. After they're mapped, isGroup isn't called again.\r\n        (props.legendItem instanceof LayerItem && toRaw(props.legendItem!.layer)?.sublayers.length > 0)\r\n    );\r\n});\r\n\r\n/**\r\n * Designate between layer controls and legend controls\r\n */\r\nconst controlAvailable = (control: LegendControl | LayerControl): boolean | undefined => {\r\n    if (control === LegendControl.Expand || control === LegendControl.Visibility)\r\n        return props.legendItem.controlAvailable(control as LegendControl);\r\n    else return (props.legendItem as LayerItem).layerControlAvailable(control as LayerControl);\r\n};\r\n\r\nconst markdownToHtml = (md: string) => {\r\n    return marked(md);\r\n};\r\n\r\nconst toggleExpand = () => {\r\n    if (props.legendItem.children.length === 0 || !controlAvailable(LegendControl.Expand)) {\r\n        return;\r\n    }\r\n    props.legendItem.toggleExpanded();\r\n    iApi.updateAlert(t(`legend.alert.group${props.legendItem.expanded ? 'Expanded' : 'Collapsed'}`));\r\n};\r\n/**\r\n * Display symbology stack for the layer.\r\n */\r\nconst toggleSymbology = (): void => {\r\n    if (controlAvailable(LayerControl.Symbology)) {\r\n        const expanded = (props.legendItem as LayerItem).toggleSymbology();\r\n        iApi.updateAlert(t(`legend.alert.symbology${expanded ? 'Expanded' : 'Collapsed'}`));\r\n    }\r\n};\r\n\r\n/**\r\n * Toggles data table panel to open/close for the LegendItem.\r\n */\r\nconst toggleGrid = (): void => {\r\n    if (controlAvailable(LayerControl.Datatable) && getDatagridExists()) {\r\n        iApi.event.emit(GlobalEvents.GRID_TOGGLE, (props.legendItem as LayerItem).layer);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns a span containing the resized legend graphic.\r\n */\r\nconst getLegendGraphic = (item: any): string | undefined => {\r\n    const span = document.createElement('span');\r\n    span.innerHTML = item.svgcode;\r\n    const svg = span.firstElementChild;\r\n    // The legend graphic will display either in its original size, or resized to fit the width of the legend item.\r\n    svg?.classList.add('max-w-full');\r\n    svg?.classList.add('h-full');\r\n    svg?.setAttribute('height', item.imgHeight);\r\n    svg?.setAttribute('width', item.imgWidth);\r\n    return span.outerHTML;\r\n};\r\n\r\n/**\r\n * Indicates if the data grid fixture has been added\r\n */\r\nconst getDatagridExists = (): boolean => {\r\n    try {\r\n        return iApi.fixture.exists('grid');\r\n    } catch (e) {\r\n        return false;\r\n    }\r\n};\r\n\r\n/**\r\n * Reloads a layer on the map.\r\n * Layer is in an error'd state for that UI to be available.\r\n */\r\nconst reloadLayer = () => {\r\n    props.legendItem.reload();\r\n    // want the animation to play for half a second because a reload can fail \"instantly\", making it look like nothing happened to the user\r\n    setTimeout(() => {\r\n        const layerItemProp = props.legendItem as LayerItem;\r\n        let recreateFromConfig = true;\r\n\r\n        if (layerItemProp.layer) {\r\n            // layer exists, reload it\r\n            toRaw(layerItemProp.layer).reload();\r\n            recreateFromConfig = false;\r\n        } else if (layerItemProp.isSublayer && layerItemProp.parentLayerId) {\r\n            // see if parent exists, if so, reload it.\r\n            const testParent = iApi.geo.layer.getLayer(layerItemProp.parentLayerId);\r\n            if (testParent) {\r\n                toRaw(testParent).reload();\r\n                recreateFromConfig = false;\r\n            }\r\n        }\r\n\r\n        if (recreateFromConfig) {\r\n            // were unable to find any layers. Attempt to re-create layer with layer config\r\n\r\n            const targetId = layerItemProp.isSublayer ? layerItemProp.parentLayerId : layerItemProp.layerId;\r\n\r\n            const layerConfig = layerConfigs.value.find((lc: RampLayerConfig) => lc.id === targetId);\r\n            if (layerConfig !== undefined) {\r\n                recreateLayer(layerConfig);\r\n            }\r\n        }\r\n\r\n        // just to silence console about unhandled rejections.\r\n        props.legendItem.loadPromise.catch(() => {});\r\n    }, 400);\r\n};\r\n\r\n/**\r\n * Attempt to recreate and instantiate layer from config.\r\n * Used when an initial layer failed to attach itself to the legend item\r\n */\r\nconst recreateLayer = async (layerConfig: RampLayerConfig) => {\r\n    try {\r\n        // check if the layer exists in store.\r\n        // if so, attempt to reload.\r\n        const checkLayer = iApi.geo.layer.getLayer(layerConfig.id);\r\n        if (checkLayer) {\r\n            const [reloadErr] = await to(toRaw(checkLayer).reload());\r\n            if (reloadErr) {\r\n                throw new Error();\r\n            } else {\r\n                return checkLayer;\r\n            }\r\n        } else {\r\n            // try to re-create new layer based on layerConfig\r\n            // same code to how layers are initialized when layer config array changes, expose this as layer API method?\r\n\r\n            // TODO low priority investigation: now that layers get registered right away,\r\n            // can this ELSE block even get hit anymore? I think we'll always find checkLayer.\r\n            // if layer got removed, legend block should have vanished.\r\n            const layer = iApi.geo.layer.createLayer(layerConfig);\r\n\r\n            await iApi.geo.map.addLayer(layer).catch(() => {\r\n                throw new Error();\r\n            });\r\n\r\n            return layer;\r\n        }\r\n    } catch {\r\n        return;\r\n    }\r\n};\r\n\r\n/**\r\n * Dual use method, leveraged for layers not in a loaded, active state.\r\n * For a loading layer, will \"Cancel\" it. This puts it in the error state but keeps it registered.\r\n * For an errored layer, will \"Remove\" it. Layer deleted from legend, map, and unregistered.\r\n */\r\nconst cancelOrRemoveLayer = () => {\r\n    const layerItem: LayerItem = toRaw(props.legendItem as LayerItem); // so that typescript doesn't yell in the whole method\r\n    let safetyCount = 0;\r\n\r\n    if (layerItem.type === LegendType.Error) {\r\n        // layer in error state, remove layer permanently\r\n        // layer could appear later, so we need to keep checking if its there.\r\n        // It will typically be in the store (now happens soon as its added),\r\n        // but the ESRI layer may appear later if things get wacky.\r\n        // given we can also cancel prior to initiation finishing, we consider\r\n        // layers in that state.\r\n\r\n        props.legendItem.toggleHidden(true); // temporarily hide item until we can remove it\r\n\r\n        const removalWatcher = setInterval(() => {\r\n            // test: we can find the Ramp layer AND ...\r\n            //           the Esri layer exists OR layer is not on the path to have an Esri layer\r\n            //       OR if it's been 5 minutes, stop and try ur best (1200 * 250 === five mins)\r\n\r\n            const rampL = layerItem.layer;\r\n\r\n            if (\r\n                (rampL &&\r\n                    (rampL.layerExists ||\r\n                        rampL.initiationState === InitiationState.NEW ||\r\n                        rampL.initiationState === InitiationState.TERMINATING ||\r\n                        rampL.initiationState === InitiationState.TERMINATED)) ||\r\n                safetyCount > 1200\r\n            ) {\r\n                // stop the interval\r\n                clearInterval(removalWatcher);\r\n\r\n                if (rampL) {\r\n                    // remove from the map, which will de-register and remove anything from the map\r\n                    iApi.geo.map.removeLayer(rampL);\r\n                }\r\n\r\n                // remove layer config from store\r\n                layerStore.removeLayerConfig(layerItem.layerId);\r\n\r\n                // remove layer item from legend\r\n                iApi.fixture.get<LegendAPI>('legend')?.removeLayerItem(layerItem.layerId);\r\n            }\r\n\r\n            safetyCount++;\r\n        }, 250);\r\n    } else {\r\n        // layer in loading state, \"cancel\" layer\r\n        // this puts it in error state. user can then reload or remove\r\n\r\n        props.legendItem.error();\r\n\r\n        // if a sublayer or parent layer was cancelled, cancel the parent layer and all other sublayers.\r\n        // need to keep polling for the parent layer since some sublayers may not be in the config (stuff that came from a group)\r\n\r\n        // This should find stuff real quick now that layers are immediately registered. But keeping the watcher to handle\r\n        // any weird scenarios (e.g. RampMapAPI.addLayer had critical failure)\r\n        // The interval is at a faster rate to account for any rapid cancel & reload clicks. setInterval always waits the interval\r\n        // before first check.\r\n        const cancelWatcher = setInterval(() => {\r\n            const parentmostId = layerItem.parentLayerId || layerItem.layerId;\r\n            const parentLayer = iApi.geo.layer.getLayer(parentmostId);\r\n\r\n            if (parentLayer) {\r\n                clearInterval(cancelWatcher);\r\n\r\n                // cancel the ramp layer\r\n                parentLayer.cancelLoad();\r\n\r\n                // cancel any blocks tied to the layer or sublayers.\r\n\r\n                const affectedBlocks = iApi.fixture.get<LegendAPI>('legend')?.getLayerBoundItems(parentLayer) || [];\r\n\r\n                affectedBlocks.forEach(block => block.error());\r\n            }\r\n\r\n            if (safetyCount > 1200) {\r\n                // 1 minute\r\n                clearInterval(cancelWatcher);\r\n            }\r\n\r\n            safetyCount++;\r\n        }, 50);\r\n    }\r\n};\r\n\r\nconst loadSymbologyStack = () => {\r\n    // load the symbology only when the layer is loaded\r\n    props.legendItem.loadPromise\r\n        .then(() => {\r\n            symbologyStack.value = [];\r\n            // Wait for symbology to load\r\n            if (!(props.legendItem as LayerItem).layer) {\r\n                // This should never happen because the layer is loaded before the legend item component is mounted\r\n                console.warn('Attempted to mount legend item component with undefined layer');\r\n                return;\r\n            }\r\n            Promise.all(\r\n                toRaw((props.legendItem as LayerItem).symbologyStack.map((item: LegendSymbology) => item.drawPromise))\r\n            ).then(() => {\r\n                symbologyStack.value = (props.legendItem as LayerItem).symbologyStack;\r\n\r\n                // Mark the symbology stack as loaded.\r\n                symbologyStackLoaded.value = true;\r\n            });\r\n        })\r\n        .catch(() => {});\r\n};\r\n\r\n/**\r\n * Helper function needed to delay tooltips using the _tippy?.show() workaround\r\n */\r\nconst hover = (t: EventTarget) => {\r\n    hovered.value = true;\r\n    setTimeout(() => {\r\n        //@ts-ignore\r\n        if (hovered.value) mobileMode.value ? null : t._tippy?.show();\r\n    }, 300);\r\n};\r\n\r\nif (props.legendItem instanceof LayerItem) {\r\n    loadSymbologyStack();\r\n    watch(\r\n        () => (props.legendItem as LayerItem).symbologyStack,\r\n        () => {\r\n            loadSymbologyStack();\r\n        }\r\n    );\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.legend-group {\r\n    transition: max-height 0.7s ease-in;\r\n}\r\n.expand-toggle {\r\n    transition: transform 0.3s cubic-bezier(0.35, 0, 0.25, 1);\r\n}\r\n.rotate-180 {\r\n    transform: rotate(-180deg);\r\n}\r\n\r\n@media (hover) {\r\n    .loaded-item.singlelined {\r\n        @apply min-h-[39px];\r\n        .options {\r\n            @apply hidden;\r\n        }\r\n    }\r\n    .loaded-item.multilined {\r\n        @apply min-h-[39px];\r\n        .options {\r\n            @apply block;\r\n        }\r\n    }\r\n    .loaded-item:hover {\r\n        .options {\r\n            @apply block;\r\n        }\r\n    }\r\n}\r\n.loaded-item:focus-within {\r\n    .options {\r\n        @apply block;\r\n    }\r\n}\r\n\r\n.non-loaded-item {\r\n    @apply px-5 py-5 pb-10 pr-0 align-middle;\r\n}\r\n.disabled {\r\n    @apply text-gray-400 cursor-default;\r\n}\r\n\r\n// Overriding Tailwind's line-clamp classes,\r\n// which occasionally fail or disappear for no reason\r\n\r\n// NOTE: The multiline legend items use the CSS line-clamp\r\n// property. If padding is used, it will start showing the\r\n// clamped/hidden text using the padding space, which can lead\r\n// to fragments of the clamped text showing up. In these cases,\r\n// refactor to use margin.\r\n\r\n.line-clamp-1 {\r\n    overflow: hidden;\r\n    display: -webkit-box;\r\n    -webkit-box-orient: vertical;\r\n    -webkit-line-clamp: 1;\r\n}\r\n\r\n.line-clamp-2 {\r\n    overflow: hidden;\r\n    display: -webkit-box;\r\n    -webkit-box-orient: vertical;\r\n    -webkit-line-clamp: 2;\r\n}\r\n\r\n.line-clamp-3 {\r\n    overflow: hidden;\r\n    display: -webkit-box;\r\n    -webkit-box-orient: vertical;\r\n    -webkit-line-clamp: 3;\r\n}\r\n\r\n.line-clamp-4 {\r\n    overflow: hidden;\r\n    display: -webkit-box;\r\n    -webkit-box-orient: vertical;\r\n    -webkit-line-clamp: 4;\r\n}\r\n\r\n.line-clamp-5 {\r\n    overflow: hidden;\r\n    display: -webkit-box;\r\n    -webkit-box-orient: vertical;\r\n    -webkit-line-clamp: 5;\r\n}\r\n\r\n.line-clamp-6 {\r\n    overflow: hidden;\r\n    display: -webkit-box;\r\n    -webkit-box-orient: vertical;\r\n    -webkit-line-clamp: 6;\r\n}\r\n</style>\r\n"],"names":["t","useI18n","props","__props","initialChecked","ref","onMounted","_noSymbolsVisible","item","toggleVisibility","LegendItem","LayerItem","filterGuts","sql","CoreFilter","iApi","inject","dropdown","hovered","panelStore","usePanelStore","mobileMode","toggleSymbology","LayerControl","toggleGrid","getFixtureExists","GlobalEvents","toggleSettings","toggleMetadata","metaConfig","name","catalogueUrl","parseUrl","metadataExtension","metadataType","zoomToLayerBoundary","removeLayer","reloadLayer","reloadableLayer","toRaw","computed","hover","fixtureName","stack","l","layerStore","useLayerStore","el","legendStore","useLegendStore","allowMultilineItems","maxLines","layerConfigs","symbologyStack","symbologyStackLoaded","layerType","modifiableLayer","rawLayer","isAnimationEnabled","isGroup","controlAvailable","control","LegendControl","markdownToHtml","md","marked","toggleExpand","expanded","getDatagridExists","getLegendGraphic","span","svg","layerItemProp","recreateFromConfig","testParent","targetId","layerConfig","lc","recreateLayer","checkLayer","reloadErr","to","layer","cancelOrRemoveLayer","layerItem","safetyCount","LegendType","removalWatcher","rampL","InitiationState","cancelWatcher","parentmostId","parentLayer","block","loadSymbologyStack","watch"],"mappings":"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"}