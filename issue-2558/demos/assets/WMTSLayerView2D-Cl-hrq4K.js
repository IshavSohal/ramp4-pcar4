import{bj as l,H as c,n as y,q as u,u as w,C as g}from"./main-DMwIS4zc.js";import{r as I,n as f}from"./imageUtils-9LuOgDL1.js";import{j as S,y as T}from"./LayerView-DS8mLXr8.js";import{h as V,p as v,r as x}from"./Tile-DwCtzYGe.js";import{e as d}from"./TileKey-BD8wwHxV.js";import{i as q}from"./RefreshableLayerView-DODRSlBL.js";import{g as M}from"./Scheduler-DcU6HYtX.js";import"./preload-helper-ExcqyqRp.js";import"./MapView-DDyvfsXD.js";import"./Cyclical-_49C1woA.js";import"./CollectionFlattener-rDTpilLk.js";import"./workers-DXDiDDG9.js";import"./projection-DajR-n1D.js";import"./projectBuffer-ClQMexQX.js";import"./TileInfo-P8qVVCjv.js";import"./TileKey-DZd6gJy7.js";import"./themeUtils-B1LUpSh8.js";import"./uuid-Cl5lrJ4c.js";import"./UpdatingHandles-CXkPgWIi.js";import"./signal-pxsuPazk.js";import"./Map-wZFL_ADK.js";import"./Basemap-BXWOHwF4.js";import"./loadAll-BFzJgrg2.js";import"./PortalItem-D3Wn8-vX.js";import"./writeUtils-BNzqtEBq.js";import"./compilerUtils-B8_wkvrQ.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-Cqj3ZAyJ.js";import"./common-DQOJ18NT.js";import"./TablesMixin-Ch92-7VQ.js";import"./Layer-BgSdeC_f.js";import"./TimeExtent-BASl8av1.js";import"./GraphicsCollection-BP0JVF-H.js";import"./HeightModelInfo-C7WHUIKx.js";import"./ReactiveMap-hkVWwUTX.js";import"./Query-C5Y6XzL4.js";import"./Field-BLvlYVuv.js";import"./fieldType-IJHuyed7.js";import"./arcgisLayerUrl-DRyTphd7.js";import"./ViewingMode-HRfKv6NR.js";import"./vec2f64-B7N_6o8F.js";import"./vec2-DGVIkCvT.js";import"./normalizeUtils-Cl0pwRaD.js";import"./normalizeUtilsCommon-DPSCXApU.js";import"./utils-D7F3DD8I.js";import"./utils-BdZNmHEp.js";import"./mat3-XZDRtl20.js";import"./vec2f32-BbH2jxlN.js";import"./unitBezier-BX6NeAEr.js";import"./vec32-B8x2pzYA.js";import"./definitions-C0Jy3zs7.js";import"./enums-Dk3osxpS.js";import"./Texture-B_134EuP.js";import"./imageUtils-C49PdZkT.js";import"./capabilities-A2uoe7dc.js";import"./Version-CVhlMuL-.js";import"./ColorBackground-CE5i6zeo.js";import"./Bitmap-D_PkiF09.js";import"./Container-C-Id63C6.js";import"./parser-o96tTUHc.js";import"./WGLContainer-XXkMLRMF.js";import"./LabelMetric-DUJdqpWI.js";import"./enums-CmIX1y88.js";import"./Program-CmHoUSUW.js";import"./BufferObject-BU1vFUJq.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./VertexArrayObject-B26rcV5s.js";import"./ProgramTemplate-Dq9t74iA.js";import"./vec3f32-nZdmKIgz.js";import"./StyleDefinition-BTt_i6C1.js";import"./config-MDUrh2eL.js";import"./earcut-Lltz9D9k.js";import"./featureConversionUtils-BHFn2MI0.js";import"./OptimizedFeature-CIptWNVu.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./TileContainer-C7rk51AA.js";import"./layerViewUtils-CocSsm8s.js";import"./QueueProcessor-IYPIjOnk.js";import"./quickselect-QQC62dOK.js";const R=[0,0];let r=class extends q(I(S(T))){constructor(){super(...arguments),this._tileStrategy=null,this._fetchQueue=null,this.layer=null}get tileMatrixSet(){const{activeLayer:t}=this.layer,{tileMatrixSet:e}=t;if(e&&l(e.tileInfo?.spatialReference,this.view.spatialReference))return e;const i=this._getTileMatrixSetBySpatialReference(t);return i&&i.id!==t.tileMatrixSetId?(t.tileMatrixSetId=i.id,i):null}update(t){this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume()}attach(){const t=this.tileMatrixSet?.tileInfo;t&&(this._tileInfoView=new V(t),this._fetchQueue=new v({tileInfoView:this._tileInfoView,concurrency:16,process:(e,i)=>this.fetchTile(e,i),scheduler:this.scheduler,priority:M.MAPVIEW_FETCH_QUEUE}),this._tileStrategy=new x({cachePolicy:"keep",resampling:!0,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),this.addAttachHandles(this._updatingHandles.add(()=>[this.layer?.activeLayer?.styleId,this.tileMatrixSet],()=>this.doRefresh())),super.attach())}detach(){super.detach(),this._tileStrategy?.destroy(),this._fetchQueue?.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){return this.layer.activeLayer.tileMatrixSets?.some(e=>l(e.tileInfo?.spatialReference,t))??!1}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(t=>this._updatingHandles.addPromise(this._enqueueTileFetch(t)))}}acquireTile(t){const e=this._bitmapView.createTile(t),i=e.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(R,e.key),i.resolution=this._tileInfoView.getTileResolution(e.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(e)),this._bitmapView.addChild(e),this.requestUpdate(),e}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,e={}){const i="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:s,resamplingLevel:p=0}=e;if(!i)return this._fetchImage(t,s);const o=new d(0,0,0,0);let h;try{await i.fetchAvailabilityUpsample(t.level,t.row,t.col,o,{signal:s}),h=await this._fetchImage(o,s)}catch(a){if(c(a))throw a;if(p<3){const m=this._tileInfoView.getTileParentId(t.id);if(m){const n=new d(m),_=await this.fetchTile(n,{...e,resamplingLevel:p+1});return f(this._tileInfoView,_,n,t)}}throw a}return f(this._tileInfoView,h,o,t)}canResume(){const t=super.canResume();return t&&this.tileMatrixSet!==null}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const e=await this._fetchQueue.push(t.key);t.bitmap.source=e,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(e){c(e)||y.getLogger(this).error(e)}this.requestUpdate()}}async _fetchImage(t,e){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:e})}_getTileMatrixSetBySpatialReference(t){return t.tileMatrixSets?.find(e=>l(e.tileInfo?.spatialReference,this.view.spatialReference))}};u([w({readOnly:!0})],r.prototype,"tileMatrixSet",null),r=u([g("esri.views.2d.layers.WMTSLayerView2D")],r);const te=r;export{te as default};
