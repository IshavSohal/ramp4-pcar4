import{G as m,s,h as p}from"./main-DGujzD_M.js";import{p as n}from"./MeshVertexAttributes-DvwMxkQc.js";import{B as a}from"./vertexSpaceConversion-BAtvt3xp.js";import"./preload-helper-ExcqyqRp.js";import"./mat3-XZDRtl20.js";import"./common-DQOJ18NT.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4-DgACfE_X.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-JNeZPdN5.js";import"./spatialReferenceEllipsoidUtils-ANkLRZn8.js";import"./computeTranslationToOriginAndRotation-DyzXihIO.js";import"./projectBuffer-B4NK-jf0.js";import"./projectPointToVector-CssiaH3I.js";import"./projection-BGqxbXnR.js";import"./meshVertexSpaceUtils-DWMEnYsW.js";import"./MeshLocalVertexSpace-CTnh8JtP.js";import"./vec3-DU24Q0-c.js";import"./BufferView-D6L8tIea.js";import"./vec2-DGVIkCvT.js";import"./vec42-CKs01hkn.js";import"./vec4-Cp9I7vs3.js";async function U(t,r,o){await Promise.resolve(),m(o);const e=a(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),r);return i.transform=null,i}export{U as convertMeshVertexSpace};
