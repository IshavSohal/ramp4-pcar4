import{a as n}from"./quantityUtils-BRzO8vol.js";import{ct as u,bh as l,aI as c}from"./main-DqrbaFR_.js";import{geodesicLength as f}from"./geometryEngine-Bey1kURG.js";import{y as p,q as y,R,b as h}from"./geodesicUtils-X_Iwp2tp.js";function d(t){return p(t)||u(t)}function i(t,e,r,...o){return p(t)?e.apply(void 0,o):u(t)?r.apply(void 0,o):null}function x(t){const{spatialReference:e}=t;return i(e,w,z,t)}function b(t,e){if(!l(t.spatialReference,e.spatialReference))return null;const{spatialReference:r}=t;return s[0]=t.x,s[1]=t.y,s[2]=t.hasZ?t.z:0,a[0]=e.x,a[1]=e.y,a[2]=e.hasZ?e.z:0,m(s,a,r)}function m(t,e,r){return i(r,g,v,t,e,r)}function g(t,e,r){return n(y(L,t,e,r).distance,"meters")}function v(t,e,r){return n(f(I(t,e,r),"meters"),"meters")}function w(t){return n(R([t],"meters")[0],"meters")}function z(t){return n(f(t,"meters"),"meters")}function I(t,e,r){return{type:"polyline",spatialReference:r,paths:[[[...t],[...e]]]}}const L=new h,s=c(),a=c();export{d as e,b as f,x as m,i as r,m as u};
