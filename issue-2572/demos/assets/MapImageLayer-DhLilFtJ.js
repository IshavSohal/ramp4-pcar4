import{Z as S,by as g,bz as c,bA as I,a4 as f,bB as w,s as b,Y as $,B as o,D as a,H as O,G as T,bv as P,N as E}from"./main-BzrPS9ps.js";import{t as L}from"./loadAll-uIFEjoqZ.js";import{S as F}from"./MultiOriginJSONSupport-C89trBfP.js";import{i as M}from"./scaleUtils-CzIu_Q9i.js";import{f as R}from"./Layer-Dx8vJCHY.js";import{i as N}from"./APIKeyMixin-z9In5VGF.js";import{m as _,f as j,s as J}from"./SublayersOwner-DDyZCTQT.js";import{l as q}from"./ArcGISService-OrWn1cGF.js";import{p as U}from"./BlendLayer-Bx8-b1kq.js";import{e as A}from"./CustomParametersMixin-D0f-fw44.js";import{b as V}from"./OperationalLayer-Bqy8IP0E.js";import{j as k}from"./PortalLayer-BzSoVOSH.js";import{f as z}from"./RefreshableLayer-0bYtzGhK.js";import{t as B}from"./ScaleRangeLayer-uYcNvWYj.js";import{l as Z}from"./TemporalLayer-DDBSSP_f.js";import{y as D}from"./commonProperties-CCwarbMI.js";import{y as G}from"./ExportImageParameters-DdVP5BSJ.js";import{t as H}from"./imageBitmapUtils-CkTCpL1F.js";import{e as v}from"./sublayerUtils-e59ACFNj.js";import{t as C}from"./versionUtils-B-MJ8c2A.js";import{p as K}from"./TimeExtent-46TNl0XW.js";import{a as x}from"./timeZoneUtils-CwbFjBwN.js";import"./preload-helper-ExcqyqRp.js";import"./Version-BYRTfZDC.js";import"./portalItemUtils-ClZlf653.js";import"./projection-BrJn3jZa.js";import"./projectBuffer-C-y1usGb.js";import"./CollectionFlattener-C3ajzwPX.js";import"./QueryTask-DubSOSeP.js";import"./infoFor3D-DhzudQro.js";import"./Query-C0gvFNUO.js";import"./Field-Cnu4Q95F.js";import"./fieldType--5Ofvjs0.js";import"./utils-D7cFhi-N.js";import"./executeForIds-DR5LyaAw.js";import"./query-CMEgJwgt.js";import"./normalizeUtils-qi8j2obk.js";import"./normalizeUtilsCommon-LzJE2KPI.js";import"./utils-BV6vfcmn.js";import"./pbfQueryUtils-BAUAjzbz.js";import"./pbf-BSvssRIL.js";import"./memoryEstimations-D08VA19Z.js";import"./OptimizedFeature-Bvo2_jKY.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-BoZSBxAz.js";import"./executeQueryPBF-CkFzG38w.js";import"./featureConversionUtils-COudkyc6.js";import"./FeatureSet-BzhG01M7.js";import"./executeQueryJSON-CVRHuSGp.js";import"./OrderedLayer-DH0iUx2N.js";import"./OrderByInfo-Ck13k68D.js";import"./labelingInfo-BAAbrnu0.js";import"./uuid-Cl5lrJ4c.js";import"./SimpleRenderer-P8O_Y1US.js";import"./commonProperties-CWhLgglq.js";import"./colorRamps-ClPics_E.js";import"./ColorStop-C4NORpMQ.js";import"./visualVariableUtils-DnJV5gmF.js";import"./lengthUtils-COi0ZRrs.js";import"./UniqueValueRenderer-D9lxEp9n.js";import"./defaultCIMValues-GRvMfJPa.js";import"./enums-CD-fX3vU.js";import"./RendererLegendOptions-N0iykYJa.js";import"./styleUtils-C2MZMU8-.js";import"./RelationshipQuery-BIXOvdKx.js";import"./NormalizationBinParametersMixin-5KnGAMwx.js";import"./labelUtils-BbnxHR21.js";import"./FeatureType-CIRNxtjw.js";import"./FeatureTemplate-BsZVjOtm.js";import"./FieldsIndex-z-bU1NW1.js";import"./LayerFloorInfo-B2pr7kS0.js";import"./Relationship-dwQGBj3w.js";import"./serviceCapabilitiesUtils-DeuDQDGa.js";import"./typeUtils-Ce7OrkCJ.js";import"./ClassBreaksRenderer-DJJPSu6_.js";import"./LRUCache-Bo0sXgMN.js";import"./MemCache-wpZxgzga.js";import"./utils-DiTELdsc.js";import"./heatmapUtils-Duwfpz_y.js";import"./vec42-CKs01hkn.js";import"./common-DQOJ18NT.js";import"./vec4f64-o2zAXfmz.js";import"./popupUtils-C4gIdzmb.js";import"./layerContainerType-C5CzMsLd.js";import"./jsonUtils-BLSWEWNd.js";import"./parser-BhaRosyh.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-BU-bdZEI.js";import"./PortalItem-CmwUCFom.js";import"./TimeInfo-CXkxs2X3.js";import"./ElevationInfo-B0fVz4Uj.js";import"./floorFilterUtils-DKzVzLpH.js";let r=class extends U(Z(B(_(j(q(V(k(F(z(N(A(R)))))))))))){constructor(...t){super(...t),this._exportImageParameters=new G({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(t,e){return typeof t=="string"?{url:t,...e}:t}load(t){const e=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},t).catch(S).then(()=>this._fetchService(e))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(t,e){const n=e.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(t,e,n,s){if(!this.loaded||!t)return;const m=t.slice().reverse().flatten(({sublayers:i})=>i&&i.toArray().reverse()).toArray();let p=!1;const l=g(s.origin);if(this.capabilities?.operations.supportsExportMap&&this.capabilities?.exportMap?.supportsDynamicLayers){if(l===c.PORTAL_ITEM){const i=this.createSublayersForOrigin("service").sublayers;p=v(m,i,c.SERVICE)}else if(l>c.PORTAL_ITEM){const i=this.createSublayersForOrigin("portal-item");p=v(m,i.sublayers,g(i.origin))}}const h=[],d={writeSublayerStructure:p,...s};let y=p||this.hasVisibleLayersForOrigin(l);m.forEach(i=>{const u=i.write({},d);h.push(u),y=y||i.originOf("visible")==="user"}),h.some(i=>Object.keys(i).length>1)&&(e.layers=h),y&&(e.visibleLayers=m.filter(i=>i.visible).map(i=>i.id))}createExportImageParameters(t,e,n,s){const m=s?.pixelRatio||1;t&&this.version>=10&&(t=t.clone().shiftCentralMeridian()),this._exportImageParameters.floors=s?.floors??null,this._exportImageParameters.scale=M({extent:t,width:e})*m;const p=this._exportImageParameters.toJSON(),l=!s?.rotation||this.version<10.3?{}:{rotation:-s.rotation},h=t?.spatialReference,d=I(h);p.dpi*=m;const y={};if(s?.timeExtent){const{start:i,end:u}=s.timeExtent.toJSON();y.time=i&&u&&i===u?""+i:`${i??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(y.time="null,null");return{bbox:t?t.xmin+","+t.ymin+","+t.xmax+","+t.ymax:void 0,bboxSR:d,imageSR:d,size:e+","+n,...p,...l,...y}}async fetchImage(t,e,n,s){const{data:m}=await this._fetchImage("image",t,e,n,s);return m}async fetchImageBitmap(t,e,n,s){const{data:m,url:p}=await this._fetchImage("blob",t,e,n,s);return H(m,p,s?.signal)}async fetchRecomputedExtents(t={}){const e={...t,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await f(this.url,e),{extent:s,fullExtent:m,timeExtent:p}=n,l=s||m;return{fullExtent:l&&w.fromJSON(l),timeExtent:p&&K.fromJSON({start:p[0],end:p[1]})}}loadAll(){return L(this,t=>{t(this.allSublayers),t(this.subtables)})}serviceSupportsSpatialReference(t){return C(this,t)}async _fetchImage(t,e,n,s,m){const p={responseType:t,signal:m?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(e,n,s,m),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(p.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new b("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:p.query});try{const{data:h}=await f(l,p);return{data:h,url:l}}catch(h){throw $(h)?h:new b("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:h})}}async _fetchService(t){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:e,ssl:n}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:t});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=e,this.read(e,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(t){return!(t==null||!this.sublayersSourceJSON[t]?.visibleLayers)}};o([a(x("dateFieldsTimeReference"))],r.prototype,"dateFieldsTimeZone",void 0),o([a({type:Boolean})],r.prototype,"datesInUnknownTimezone",void 0),o([a()],r.prototype,"dpi",void 0),o([a()],r.prototype,"gdbVersion",void 0),o([a()],r.prototype,"imageFormat",void 0),o([O("imageFormat",["supportedImageFormatTypes"])],r.prototype,"readImageFormat",null),o([a({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],r.prototype,"imageMaxHeight",void 0),o([a({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],r.prototype,"imageMaxWidth",void 0),o([a()],r.prototype,"imageTransparency",void 0),o([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],r.prototype,"isReference",void 0),o([a({json:{read:!1,write:!1}})],r.prototype,"labelsVisible",void 0),o([a({type:["ArcGISMapServiceLayer"]})],r.prototype,"operationalLayerType",void 0),o([a({json:{read:!1,write:!1}})],r.prototype,"popupEnabled",void 0),o([a(x("preferredTimeReference"))],r.prototype,"preferredTimeZone",void 0),o([a()],r.prototype,"sourceJSON",void 0),o([a({json:{write:{ignoreOrigin:!0}}})],r.prototype,"sublayers",void 0),o([T("sublayers",{layers:{type:[J]},visibleLayers:{type:[P]}})],r.prototype,"writeSublayers",null),o([a({type:["show","hide","hide-children"]})],r.prototype,"listMode",void 0),o([a({json:{read:!1},readOnly:!0,value:"map-image"})],r.prototype,"type",void 0),o([a(D)],r.prototype,"url",void 0),r=o([E("esri.layers.MapImageLayer")],r);const _r=r;export{_r as default};
