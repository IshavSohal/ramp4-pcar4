import{bj as p,Y as c,n as y,B as u,D as w,N as g}from"./main-BzrPS9ps.js";import{r as I,n as f}from"./imageUtils-EPqMnXJs.js";import{S,y as T}from"./LayerView-CD70PxIG.js";import{h as V,p as v,r as x}from"./Tile-D01LQJHl.js";import{e as d}from"./TileKey-Dopy0mS_.js";import{i as M}from"./RefreshableLayerView-BCV-_PhC.js";import{g as q}from"./Scheduler-BU5x_NJS.js";import"./preload-helper-ExcqyqRp.js";import"./MapView-CAm1cxV2.js";import"./Cyclical-DY-2C8vN.js";import"./CollectionFlattener-C3ajzwPX.js";import"./workers-oTWsZW0v.js";import"./Queue-D-ve-NIM.js";import"./intl-BwCluHOf.js";import"./projection-BrJn3jZa.js";import"./projectBuffer-C-y1usGb.js";import"./TileInfo-BaLJZAhe.js";import"./TileKey-DZd6gJy7.js";import"./themeUtils-tXGn5N2M.js";import"./uuid-Cl5lrJ4c.js";import"./UpdatingHandles-C4LkphxM.js";import"./signal-CJBTNEjj.js";import"./Map-DIIUxuXo.js";import"./Basemap-C0uN_Ba4.js";import"./loadAll-uIFEjoqZ.js";import"./PortalItem-CmwUCFom.js";import"./writeUtils-DmbSitBT.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-BU-bdZEI.js";import"./common-DQOJ18NT.js";import"./TablesMixin-M17wlrm9.js";import"./Layer-Dx8vJCHY.js";import"./TimeExtent-46TNl0XW.js";import"./GraphicsCollection-mQQqlnnt.js";import"./HeightModelInfo-DPLOFZ51.js";import"./timeZoneUtils-CwbFjBwN.js";import"./ReactiveMap-BRs2Ox8e.js";import"./Query-C0gvFNUO.js";import"./Field-Cnu4Q95F.js";import"./fieldType--5Ofvjs0.js";import"./HighlightDefaults-DOLeeMiI.js";import"./ViewingMode-HRfKv6NR.js";import"./vec2-maR1OrZI.js";import"./vec2f64-DohEyf3f.js";import"./normalizeUtils-qi8j2obk.js";import"./normalizeUtilsCommon-LzJE2KPI.js";import"./utils-D7cFhi-N.js";import"./utils-BV6vfcmn.js";import"./mat3-CruJiiUv.js";import"./vec2f32-BbH2jxlN.js";import"./vec32-BKIqLMFz.js";import"./unitBezier-B1N-tmtC.js";import"./definitions-CPtb4TQS.js";import"./enums-Dk3osxpS.js";import"./Texture-Bx09OAFq.js";import"./getDataTypeBytes-DflDeYgv.js";import"./imageUtils-R5N61v06.js";import"./capabilities-Du2wdNlQ.js";import"./Version-BYRTfZDC.js";import"./ColorBackground-YICRW4MK.js";import"./BitmapTechnique-BgEX_zWX.js";import"./Container-jy4Fi_C3.js";import"./parser-BhaRosyh.js";import"./GraphShaderModule-CN4d6A_a.js";import"./FramebufferObject-DAR6lj7x.js";import"./VertexArrayObject-D2ZYe09D.js";import"./memoryEstimations-D08VA19Z.js";import"./ProgramTemplate-BHSH_py1.js";import"./ShaderBuilder-BBLOpj8P.js";import"./BindType-BBwFZqyN.js";import"./TechniqueType-uMFRS8dR.js";import"./WGLContainer-CX6unUWn.js";import"./Utils-DOst5CMe.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./vec3f32-nZdmKIgz.js";import"./StyleDefinition-Bp1wY35y.js";import"./enums-CD-fX3vU.js";import"./config-MDUrh2eL.js";import"./earcut-Lltz9D9k.js";import"./featureConversionUtils-COudkyc6.js";import"./OptimizedFeature-Bvo2_jKY.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./TileContainer-DsdLtbsL.js";import"./layerViewUtils-QvyDWdjV.js";import"./quickselect-QQC62dOK.js";const R=[0,0];let r=class extends M(I(S(T))){constructor(){super(...arguments),this._tileStrategy=null,this._fetchQueue=null,this.layer=null}get tileMatrixSet(){const{activeLayer:t}=this.layer,{tileMatrixSet:e}=t;if(e&&p(e.tileInfo?.spatialReference,this.view.spatialReference))return e;const i=this._getTileMatrixSetBySpatialReference(t);return i&&i.id!==t.tileMatrixSetId?(t.tileMatrixSetId=i.id,i):null}update(t){this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume()}attach(){const t=this.tileMatrixSet?.tileInfo;t&&(this._tileInfoView=new V(t),this._fetchQueue=new v({tileInfoView:this._tileInfoView,concurrency:16,process:(e,i)=>this.fetchTile(e,i),scheduler:this.scheduler,priority:q.MAPVIEW_FETCH_QUEUE}),this._tileStrategy=new x({cachePolicy:"keep",resampling:!0,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),this.addAttachHandles(this._updatingHandles.add(()=>[this.layer?.activeLayer?.styleId,this.tileMatrixSet],()=>this.doRefresh())),super.attach())}detach(){super.detach(),this._tileStrategy?.destroy(),this._fetchQueue?.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){return this.layer.activeLayer.tileMatrixSets?.some(e=>p(e.tileInfo?.spatialReference,t))??!1}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(t=>this._updatingHandles.addPromise(this._enqueueTileFetch(t)))}}acquireTile(t){const e=this._bitmapView.createTile(t),i=e.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(R,e.key),i.resolution=this._tileInfoView.getTileResolution(e.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(e)),this._bitmapView.addChild(e),this.requestUpdate(),e}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,e={}){const i="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:s,resamplingLevel:l=0}=e;if(!i)return this._fetchImage(t,s);const o=new d(0,0,0,0);let h;try{await i.fetchAvailabilityUpsample(t.level,t.row,t.col,o,{signal:s}),h=await this._fetchImage(o,s)}catch(a){if(c(a))throw a;if(l<3){const m=this._tileInfoView.getTileParentId(t.id);if(m){const n=new d(m),_=await this.fetchTile(n,{...e,resamplingLevel:l+1});return f(this._tileInfoView,_,n,t)}}throw a}return f(this._tileInfoView,h,o,t)}canResume(){const t=super.canResume();return t&&this.tileMatrixSet!==null}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const e=await this._fetchQueue.push(t.key);t.bitmap.source=e,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(e){c(e)||y.getLogger(this).error(e)}this.requestUpdate()}}async _fetchImage(t,e){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:e})}_getTileMatrixSetBySpatialReference(t){return t.tileMatrixSets?.find(e=>p(e.tileInfo?.spatialReference,this.view.spatialReference))}};u([w({readOnly:!0})],r.prototype,"tileMatrixSet",null),r=u([g("esri.views.2d.layers.WMTSLayerView2D")],r);const ae=r;export{ae as default};
