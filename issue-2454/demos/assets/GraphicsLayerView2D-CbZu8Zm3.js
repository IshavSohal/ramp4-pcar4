import{ck as o,a2 as g,a1 as m,F as l,bi as a,bw as p,bx as c,by as n}from"./main-Bw8nB3u2.js";import{j as d,y as u}from"./LayerView-CTknMZWC.js";import{t as w}from"./GraphicContainer-BePwLk-Y.js";import{F as y}from"./GraphicsView2D-BDkcNTEg.js";import{e as V}from"./HighlightCounter-Czi-fdpx.js";import"./preload-helper-ExcqyqRp.js";import"./Container-CPskgPg-.js";import"./layerViewUtils-C33WEq8s.js";import"./AGraphicContainer-Ct5Dnj2_.js";import"./TechniqueInstance-BDeuQV50.js";import"./UpdateTracking2D-BJ8w8opS.js";import"./BidiEngine-DNnuvc1i.js";import"./GeometryUtils-BBNut3-U.js";import"./Rect-CUzevAry.js";import"./LabelMetric-Qe59nMiG.js";import"./Program-DtZhcD0y.js";import"./BufferObject-Cj6eUoaD.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./BindType-BmZEZMMh.js";import"./Util-C3OXE8hd.js";import"./TileContainer-CjmV5FvS.js";import"./WGLContainer-b0EMQgT0.js";import"./VertexArrayObject-_GVwR-D-.js";import"./ProgramTemplate-OjtAHvPZ.js";import"./vec3f32-nZdmKIgz.js";import"./StyleDefinition-I14Tf0Kf.js";import"./config-MDUrh2eL.js";import"./earcut-Lltz9D9k.js";import"./FeatureCommandQueue-jq0Og8p7.js";import"./constants-F8oTIn7N.js";import"./AttributeStore-DgkdsqEL.js";import"./TimeOnly-Bb522voP.js";import"./timeSupport-CPpkCXqy.js";import"./normalizeUtilsSync-BCkZtAWY.js";let s=class extends d(u){constructor(){super(...arguments),this._highlightCounter=new V}attach(){this.graphicsView=new y({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new w(this.view.featuresTilingScheme),layerId:this.layer.id}),this.container.addChild(this.graphicsView.container),this.addAttachHandles([this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler),this.watch("layer.visible",i=>{i&&(this.graphicsView.update({state:this.view.state}),this.graphicsView.pushUpdate())})]),this._updateHighlights()}detach(){this.container.removeAllChildren(),this.graphicsView=o(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i,t="default"){let e;typeof i=="number"?e=[i]:i instanceof g?e=[i.uid]:Array.isArray(i)&&i.length>0?e=typeof i[0]=="number"?i:i.map(h=>h&&h.uid):m.isCollection(i)&&i.length>0&&(e=i.map(h=>h&&h.uid).toArray());const r=e?.filter(l);return r?.length?(this._addHighlight(r,t),a(()=>this._removeHighlight(r,t))):a()}_addHighlight(i,t){this._highlightCounter.addGroup(i,t),this._updateHighlights()}_removeHighlight(i,t){this._highlightCounter.deleteGroup(i,t),this._updateHighlights()}_updateHighlights(){const i=[];for(const t of this._highlightCounter.ids()){const e=this._highlightCounter.getHighlightGroups(t),r=this._getHighlightBits(e);i.push({objectId:t,highlightFlags:r})}this.graphicsView?.setHighlight(i)}};p([c()],s.prototype,"graphicsView",void 0),s=p([n("esri.views.2d.layers.GraphicsLayerView2D")],s);const Z=s;export{Z as default};
