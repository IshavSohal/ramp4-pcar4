import{c7 as h,d0 as n,V as g,d1 as f,o as w,G as d}from"./main-BfV_Ya13.js";import{p as y}from"./SimpleRenderer-BWycbYs_.js";import{fromJSON as u}from"./jsonUtils-BxL2w7H3.js";import{d as S}from"./FeatureSet-BFoqsyXR.js";import{S as V,y as b}from"./LayerView-CGnGaPMl.js";import{t as _}from"./GraphicContainer-BUswMu9n.js";import{A as T}from"./GraphicsView2D-D1JrhcZK.js";let c=class extends V(b){constructor(){super(...arguments),this._graphicsViewMap={},this._popupTemplates=new Map,this.graphicsViews=[]}async hitTest(e,t){if(!this.graphicsViews.length)return null;const r=this.layer;return this.graphicsViews.reverse().flatMap(i=>{const s=this._popupTemplates.get(i),a=i.hitTest(e);for(const o of a)o.layer=r,o.sourceLayer=r,o.popupTemplate=s;return a}).map(i=>({type:"graphic",graphic:i,layer:r,mapPoint:e}))}update(e){if(this.graphicsViews)for(const t of this.graphicsViews)t.processUpdate(e)}attach(){this.addAttachHandles([h(()=>this.layer?.featureCollections,e=>{this._clear();for(const{popupInfo:t,featureSet:r,layerDefinition:i}of e){const s=S.fromJSON(r),a=new g(s.features),o=i.drawingInfo,m=t?f.fromJSON(t):null,p=u(o.renderer),l=new T({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:a,renderer:p,container:new _(this.view.featuresTilingScheme)});this._graphicsViewMap[s.geometryType]=l,this._popupTemplates.set(l,m),s.geometryType!=="polygon"||this.layer.polygonSymbol?s.geometryType!=="polyline"||this.layer.lineSymbol?s.geometryType!=="point"||this.layer.pointSymbol||(this.layer.pointSymbol=p.symbol):this.layer.lineSymbol=p.symbol:this.layer.polygonSymbol=p.symbol,this.graphicsViews.push(l),this.container.addChild(l.container)}},n),h(()=>this.layer?.polygonSymbol,e=>{this._graphicsViewMap.polygon.renderer=new y({symbol:e})},n),h(()=>this.layer?.lineSymbol,e=>{this._graphicsViewMap.polyline.renderer=new y({symbol:e})},n),h(()=>this.layer?.pointSymbol,e=>{this._graphicsViewMap.point.renderer=new y({symbol:e})},n)])}detach(){this._clear()}moveEnd(){}viewChange(){for(const e of this.graphicsViews)e.viewChange()}_clear(){this.container.removeAllChildren();for(const e of this.graphicsViews)e.destroy();this._graphicsViewMap={},this._popupTemplates.clear(),this.graphicsViews.length=0}};c=w([d("esri.views.2d.layers.GeoRSSLayerView2D")],c);const v=c;export{v as default};
