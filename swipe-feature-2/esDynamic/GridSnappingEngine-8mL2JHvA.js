import{bm as z,av as E,n as D,X as L,o,q as p,G as W}from"./main-BfV_Ya13.js";import{w as G}from"./vec32-D2jQCZiP.js";import{U as F,O as X}from"./projection-Xiqt9C3K.js";import{P as q}from"./normalizeUtils-DpMCKeNA.js";import{u as H}from"./scaleUtils-UyBYjUzP.js";import{l as I,u as T,t as _}from"./gridUtils-Dpulv6MW.js";import{f as d,d as k,c as A}from"./SketchOptions-CFCypsHU.js";import{r as O,a as B}from"./RouteLayerInteraction-2tRymPeS.js";let s=class extends z{constructor(e){super(e),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){return this.grid?.rotateWithMap?0:E(this.view.rotation??0)}get gridRotation(){return E(this.grid?.rotation??0)}get gridCenter(){const{spatialReference:e,grid:r}=this;if(!r||!e||!F(r.center.spatialReference,e))return null;try{const t=X(r.center,e),i=e.isWrappable&&this.view?.center!=null?q(t.x,this.view.center.x,e):t.x;return d(i,t.y,t.z)}catch(t){return D.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",t),null}}get offsetScaleFactor(){const{pixelsPerStride:e,grid:r}=this;if(!r||!e)return 1;const{majorLineInterval:t,dynamicScaling:i}=r;return t<1?null:I(t,e,i)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:e}=this;return e?L(e.spacing,e.units,"meters"):null}get viewMetersPerPixel(){const{viewMetersPerSRUnit:e}=this;return e==null?null:e*H(this.view.scale,this.view.spatialReference)}get viewMetersPerSRUnit(){const{spatialReference:e}=this.view;return this.gridCenter?T(this.gridCenter[0],this.gridCenter[1],e):null}get pixelsPerStride(){const{gridMetersPerStride:e,viewMetersPerPixel:r}=this;return r&&e?e/r:null}get updating(){return this.grid!=null&&this.spatialReference!=null&&this.viewMetersPerSRUnit==null}async fetchCandidates(e,r,t){const{options:i,view:n}=this;if(!i?.effectiveGridEnabled||!n.grid||t.feature?.attributes&&k in t.feature.attributes)return[];const a=t.coordinateHelper.arrayToPoint(e),l=i.distance*(t.pointer==="touch"?i.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(a,l)}fetchCandidatesSync(e,r){const t=[],{grid:i,effectiveViewRotation:n,gridRotation:a,gridCenter:l,viewMetersPerPixel:S,viewMetersPerSRUnit:g,offsetScaleFactor:v,spatialReference:h,gridMetersPerStride:C,pixelsPerStride:b}=this;if(!(i&&S&&g&&l&&h&&v&&C&&b)||!i.dynamicScaling&&b<_||!F(e.spatialReference,h))return t;const P=X(e,h),Y=d(P.x,P.y,P.z),u=f(Y,-a,l,-n),R=C/g*v,c=J(u,R,l),{shouldSnapX:w,shouldSnapY:y}=$(c,u,r,S,g);if(!w&&!y)return[];const j=d((w?c:u)[0],(y?c:u)[1]),m=f(j,a,l,n),U=f(c,a,l,n);if(y){const M=V(c,u,R,"y"),x=f(M,a,l,n);t.push(new O({lineStart:U,lineEnd:x,targetPoint:m,isDraped:!1}))}if(w){const M=V(c,u,R,"x"),x=f(M,a,l,n);t.push(new O({lineStart:U,lineEnd:x,targetPoint:m,isDraped:!1}))}return w&&y&&t.push(new B(m,t[0],t[1],!1)),t}};o([p({constructOnly:!0})],s.prototype,"view",void 0),o([p()],s.prototype,"options",void 0),o([p()],s.prototype,"grid",null),o([p()],s.prototype,"effectiveViewRotation",null),o([p()],s.prototype,"gridRotation",null),o([p()],s.prototype,"gridCenter",null),o([p()],s.prototype,"offsetScaleFactor",null),o([p()],s.prototype,"spatialReference",null),o([p()],s.prototype,"gridMetersPerStride",null),o([p()],s.prototype,"viewMetersPerPixel",null),o([p()],s.prototype,"viewMetersPerSRUnit",null),o([p()],s.prototype,"pixelsPerStride",null),o([p()],s.prototype,"updating",null),s=o([W("esri.views.interactive.snapping.GridSnappingEngine")],s);const f=(e,r,t,i)=>{const n=A(e[0],e[1],e[2]);return G(n,G(n,n,t,r),t,i)},J=(e,r,t)=>{const i=(e[0]-t[0])/r,n=(e[1]-t[1])/r,a=Math.trunc(i),l=Math.trunc(n),S=Math.round(i%1),g=Math.round(n%1),v=t[0]+(a+S)*r,h=t[1]+(l+g)*r;return d(v,h)},$=(e,r,t,i,n)=>{if(i<=0)return{shouldSnapX:!1,shouldSnapY:!1};const a=(e[0]-r[0])/i,l=(e[1]-r[1])/i;return{shouldSnapX:Math.abs(a*n)<t,shouldSnapY:Math.abs(l*n)<t}},V=(e,r,t,i)=>{if(i==="y"){const a=r[0]>e[0]?1:-1;return d(e[0]+t*a,e[1])}const n=r[1]>e[1]?1:-1;return d(e[0],e[1]+t*n)};export{s as GridSnappingEngine};
