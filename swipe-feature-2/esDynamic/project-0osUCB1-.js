import{o as s,q as i,M as d,G as S,z as g,bY as n,bv as m,c6 as y,aN as R}from"./main-BfV_Ya13.js";import{f as w,i as N}from"./utils-6Q51K23J.js";import{o as v}from"./utils-1YaY58v_.js";let o=class extends g{constructor(e){super(e),this.geometries=[],this.outSpatialReference=null,this.transformation=null,this.transformForward=null}toJSON(){const e=this.geometries.map(a=>a.toJSON()),t=this.geometries[0],r={};return r.outSR=n(this.outSpatialReference),r.inSR=n(t.spatialReference),r.geometries=JSON.stringify({geometryType:m(t),geometries:e}),this.transformation&&(r.transformation=this.transformation.wkid||JSON.stringify(this.transformation)),this.transformForward!=null&&(r.transformForward=this.transformForward),r}};s([i()],o.prototype,"geometries",void 0),s([i({type:d,json:{read:{source:"outSR"}}})],o.prototype,"outSpatialReference",void 0),s([i()],o.prototype,"transformation",void 0),s([i()],o.prototype,"transformForward",void 0),o=s([S("esri.rest.support.ProjectParameters")],o);const p=o,O=y(p);async function F(e,t,r){t=O(t);const a=w(e),f={...a.query,f:"json",...t.toJSON()},u=t.outSpatialReference,c=m(t.geometries[0]),h=N(f,r);return R(a.path+"/project",h).then(({data:{geometries:l}})=>v(l,c,u))}export{p as m,F as n};
