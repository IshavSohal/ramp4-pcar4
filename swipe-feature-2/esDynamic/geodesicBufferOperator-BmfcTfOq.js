import{X as o,bC as x}from"./main-BfV_Ya13.js";import{u as g,i as v,c as G,s as N}from"./operatorGeodesicBuffer-DTENFfQZ.js";import{e as l}from"./geodeticCurveType-D_etKnbP.js";let u,y,f;function d(){return!!u&&N()}async function b(){if(!d()){const[t]=await Promise.all([import("./jsonConverter-Bo_-j0aI.js"),g()]);u=t.fromGeometries,y=t.fromGeometry,f=t.toGeometry}}function w(t,r,m={}){let{curveType:n="geodesic",maxDeviation:e=NaN,unit:i}=m;i&&(r=o(r,i,"meters"),e&&(e=o(e,i,"meters")));const a=y(t),s=a.getSpatialReference();return f(v(a.getGeometry(),s,l[n],r,e),s)}function C(t,r,m={}){let{curveType:n="geodesic",maxDeviation:e=NaN,union:i=!1,unit:a}=m;a&&(r=r.map(c=>o(c,a,"meters")),e&&(e=o(e,a,"meters")));const[s,p]=u(t);return G(s,p,l[n],r,e,i).map(c=>f(c,p)).filter(x)}export{w as execute,C as executeMany,d as isLoaded,b as load};
