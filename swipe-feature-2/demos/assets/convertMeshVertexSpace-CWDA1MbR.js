import{U as m,s,aD as p}from"./main-C1jnFJXF.js";import{p as n}from"./MeshVertexAttributes-VEoTJvEA.js";import{B as a}from"./vertexSpaceConversion-Di2KWSeE.js";import"./preload-helper-ExcqyqRp.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3-CruJiiUv.js";import"./common-DQOJ18NT.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4-BvBT-TXm.js";import"./mat4f64-Dk4dwAN8.js";import"./vec32-Hh3I5M3g.js";import"./spatialReferenceEllipsoidUtils-CY9xxY81.js";import"./computeTranslationToOriginAndRotation-BtkMfToj.js";import"./projection-Vy0ZlKbO.js";import"./projectPointToVector-BX5aac8C.js";import"./meshVertexSpaceUtils-Db1pRdMf.js";import"./MeshLocalVertexSpace-DuAyS8Jk.js";import"./vec3-CDRQWuae.js";import"./BufferView-BgUl5c4y.js";import"./vec2-maR1OrZI.js";import"./vec42-CKs01hkn.js";import"./vec4-D6pUnjxR.js";async function P(t,r,o){await Promise.resolve(),m(o);const e=a(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),r);return i.transform=null,i}export{P as convertMeshVertexSpace};
