import{f as m}from"./utils-BMNpR1Gg.js";import{aP as p,b_ as y}from"./main-C1jnFJXF.js";import{t as j}from"./query-B1lW0deU.js";import{d as R}from"./FeatureSet-DtKA3fDK.js";import{d as l}from"./RelationshipQuery-CJWPaQPa.js";import"./preload-helper-ExcqyqRp.js";import"./normalizeUtils-C3lgASKe.js";import"./utils-DFsgVUQE.js";import"./pbfQueryUtils-6cSNbOS6.js";import"./pbf-DJxxhVEY.js";import"./memoryEstimations-D28a58Kd.js";import"./OptimizedFeatureSet-DElmmwrI.js";import"./queryZScale-BEvn4DAN.js";import"./projection-Vy0ZlKbO.js";import"./Field-LsRjlaGK.js";import"./fieldType-Db7hPrGE.js";import"./Query-Ckfmrrtp.js";import"./TimeExtent-DKSNJ8Bm.js";function b(r,t){const e=r.toJSON();return e.objectIds&&(e.objectIds=e.objectIds.join(",")),e.orderByFields&&(e.orderByFields=e.orderByFields.join(",")),e.outFields&&!t?.returnCountOnly?e.outFields.includes("*")?e.outFields="*":e.outFields=e.outFields.join(","):delete e.outFields,e.outSR&&(e.outSR=y(e.outSR)),e.dynamicDataSource&&(e.layer=JSON.stringify({source:e.dynamicDataSource}),delete e.dynamicDataSource),e}async function F(r,t,e){const n=await f(r,t,e),o=n.data,s=o.geometryType,a=o.spatialReference,i={};for(const c of o.relatedRecordGroups){const d={fields:void 0,objectIdFieldName:void 0,geometryType:s,spatialReference:a,hasZ:!!o.hasZ,hasM:!!o.hasM,features:c.relatedRecords};if(c.objectId!=null)i[c.objectId]=d;else for(const u of Object.keys(c))u!=="relatedRecords"&&(i[c[u]]=d)}return{...n,data:i}}async function h(r,t,e){const n=await f(r,t,e,{returnCountOnly:!0}),o=n.data,s={};for(const a of o.relatedRecordGroups)a.objectId!=null&&(s[a.objectId]=a.count);return{...n,data:s}}async function f(r,t,e={},n){const o=j({...r.query,f:"json",...n,...b(t,n)});return p(r.path+"/queryRelatedRecords",{...e,query:{...e.query,...o}})}async function T(r,t,e){t=l.from(t);const n=m(r);return F(n,t,e).then(o=>{const s=o.data,a={};return Object.keys(s).forEach(i=>a[i]=R.fromJSON(s[i])),a})}async function Z(r,t,e){t=l.from(t);const n=m(r);return h(n,t,{...e}).then(o=>o.data)}export{T as executeRelationshipQuery,Z as executeRelationshipQueryForCount};
