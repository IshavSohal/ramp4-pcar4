import{G as m,s,h as p}from"./main-4plRJTZ0.js";import{p as n}from"./MeshVertexAttributes-B3pjrQ7A.js";import{B as a}from"./vertexSpaceConversion-C0hB2IKM.js";import"./preload-helper-ExcqyqRp.js";import"./mat3-XZDRtl20.js";import"./common-DQOJ18NT.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4-DG2cZNC_.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-0Yua-EKL.js";import"./spatialReferenceEllipsoidUtils-B9yb-Gh6.js";import"./computeTranslationToOriginAndRotation-BOp91Yap.js";import"./projectBuffer-E6tv8FMP.js";import"./projectPointToVector-DcPyy0Ly.js";import"./projection-C24qO2LW.js";import"./meshVertexSpaceUtils-BrBhE443.js";import"./MeshLocalVertexSpace-A3vqMMWr.js";import"./vec3-BI_2G3rm.js";import"./BufferView-DAtxAXKU.js";import"./vec2-DGVIkCvT.js";import"./vec42-CKs01hkn.js";import"./vec4-CFR4UR4H.js";async function U(t,r,o){await Promise.resolve(),m(o);const e=a(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),r);return i.transform=null,i}export{U as convertMeshVertexSpace};
